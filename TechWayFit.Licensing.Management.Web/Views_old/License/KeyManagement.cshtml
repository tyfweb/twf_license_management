@model TechWayFit.Licensing.WebUI.ViewModels.License.KeyManagementViewModel
@{
    ViewData["Title"] = "Key Management";
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <h2><i class="bi bi-shield-lock"></i> RSA Key Pair Management</h2>
            <p class="text-muted">Manage the RSA key pairs used for license generation and validation.</p>
        </div>
    </div>

    <!-- Current Key Status -->
    <div class="row mt-4">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-info-circle"></i> Current Key Status</h5>
                </div>
                <div class="card-body">
                    @if (Model.HasCurrentKeys)
                    {
                        <div class="alert alert-success">
                            <strong><i class="bi bi-check-circle"></i> Active Key Pair Found</strong>
                            <br />Keys are loaded and ready for license operations.
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <strong><i class="bi bi-exclamation-triangle"></i> No Active Key Pair</strong>
                            <br />Please generate or load a key pair to enable license operations.
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-key"></i> Public Key</h5>
                </div>
                <div class="card-body">
                    @if (Model.HasCurrentKeys && !string.IsNullOrEmpty(Model.CurrentPublicKey))
                    {
                        <div class="form-group">
                            <label for="currentPublicKey" class="form-label">Current Public Key (Base64):</label>
                            <textarea id="currentPublicKey" class="form-control font-monospace" rows="6" readonly>@Model.CurrentPublicKey</textarea>
                            <div class="mt-2">
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="copyToClipboard('currentPublicKey')">
                                    <i class="bi bi-clipboard"></i> Copy
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="exportPublicKey()">
                                    <i class="bi bi-download"></i> Export
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No public key available. Generate or load a key pair first.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Key Operations -->
    <div class="row mt-4">
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-plus-circle"></i> Generate New Key Pair</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Generate a new RSA 2048-bit key pair. This will replace any existing keys.</p>
                    <div class="form-group mb-3">
                        <label for="keyPassword" class="form-label">Private Key Password (Optional):</label>
                        <input type="password" id="keyPassword" class="form-control" placeholder="Leave empty for no password">
                        <div class="form-text">Recommended: Use a strong password to protect the private key</div>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="generateNewKeyPair()">
                        <i class="bi bi-gear"></i> Generate Key Pair
                    </button>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-save"></i> Save Private Key</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Save the current private key to a file for backup or deployment.</p>
                    <div class="form-group mb-3">
                        <label for="saveFileName" class="form-label">File Name:</label>
                        <input type="text" id="saveFileName" class="form-control" value="private_key.pem" placeholder="private_key.pem">
                    </div>
                    <div class="form-group mb-3">
                        <label for="savePassword" class="form-label">Password (Optional):</label>
                        <input type="password" id="savePassword" class="form-control" placeholder="Leave empty for no password">
                    </div>
                    <button type="button" class="btn btn-success" onclick="savePrivateKey()" @(Model.HasCurrentKeys ? "" : "disabled")>
                        <i class="bi bi-download"></i> Save Private Key
                    </button>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-upload"></i> Load Private Key</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Load a private key from a file to restore key pair operations.</p>
                    <div class="form-group mb-3">
                        <label for="loadFile" class="form-label">Private Key File:</label>
                        <input type="file" id="loadFile" class="form-control" accept=".pem,.key,.txt">
                    </div>
                    <div class="form-group mb-3">
                        <label for="loadPassword" class="form-label">Password (if protected):</label>
                        <input type="password" id="loadPassword" class="form-control" placeholder="Enter password if key is encrypted">
                    </div>
                    <button type="button" class="btn btn-info" onclick="loadPrivateKey()">
                        <i class="bi bi-upload"></i> Load Private Key
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Area -->
    <div class="row mt-4">
        <div class="col-12">
            <div id="resultsArea" class="card" style="display: none;">
                <div class="card-header">
                    <h5><i class="bi bi-clipboard-data"></i> Operation Results</h5>
                </div>
                <div class="card-body">
                    <div id="resultsContent"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Show results area with content
        function showResults(content, type = 'info') {
            const resultsArea = document.getElementById('resultsArea');
            const resultsContent = document.getElementById('resultsContent');
            
            let alertClass = 'alert-info';
            let icon = 'bi-info-circle';
            
            switch (type) {
                case 'success':
                    alertClass = 'alert-success';
                    icon = 'bi-check-circle';
                    break;
                case 'error':
                    alertClass = 'alert-danger';
                    icon = 'bi-exclamation-triangle';
                    break;
                case 'warning':
                    alertClass = 'alert-warning';
                    icon = 'bi-exclamation-triangle';
                    break;
            }
            
            resultsContent.innerHTML = `<div class="alert ${alertClass}"><i class="bi ${icon}"></i> ${content}</div>`;
            resultsArea.style.display = 'block';
            resultsArea.scrollIntoView({ behavior: 'smooth' });
        }

        // Copy text to clipboard
        function copyToClipboard(elementId) {
            const element = document.getElementById(elementId);
            element.select();
            element.setSelectionRange(0, 99999);
            navigator.clipboard.writeText(element.value).then(() => {
                showResults('Public key copied to clipboard!', 'success');
            }).catch(() => {
                showResults('Failed to copy to clipboard. Please select and copy manually.', 'error');
            });
        }

        // Generate new key pair
        function generateNewKeyPair() {
            const password = document.getElementById('keyPassword').value;
            
            fetch('/License/GenerateNewKeyPair', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({ password: password })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showResults('New RSA key pair generated successfully! The page will reload to show the new keys.', 'success');
                    setTimeout(() => location.reload(), 2000);
                } else {
                    showResults(`Failed to generate key pair: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                showResults(`Error generating key pair: ${error.message}`, 'error');
            });
        }

        // Export public key
        function exportPublicKey() {
            fetch('/License/ExportPublicKey', {
                method: 'GET'
            })
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = 'public_key.pem';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                showResults('Public key exported successfully!', 'success');
            })
            .catch(error => {
                showResults(`Error exporting public key: ${error.message}`, 'error');
            });
        }

        // Save private key
        function savePrivateKey() {
            const fileName = document.getElementById('saveFileName').value || 'private_key.pem';
            const password = document.getElementById('savePassword').value;
            
            fetch('/License/SavePrivateKey', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({ fileName: fileName, password: password })
            })
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                showResults(`Private key saved as ${fileName}`, 'success');
            })
            .catch(error => {
                showResults(`Error saving private key: ${error.message}`, 'error');
            });
        }

        // Load private key
        function loadPrivateKey() {
            const fileInput = document.getElementById('loadFile');
            const password = document.getElementById('loadPassword').value;
            
            if (!fileInput.files || fileInput.files.length === 0) {
                showResults('Please select a private key file to load.', 'warning');
                return;
            }
            
            const file = fileInput.files[0];
            const formData = new FormData();
            formData.append('file', file);
            formData.append('password', password);
            formData.append('__RequestVerificationToken', $('input[name="__RequestVerificationToken"]').val());
            
            fetch('/License/LoadPrivateKey', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showResults('Private key loaded successfully! The page will reload to show the updated key information.', 'success');
                    setTimeout(() => location.reload(), 2000);
                } else {
                    showResults(`Failed to load private key: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                showResults(`Error loading private key: ${error.message}`, 'error');
            });
        }
    </script>
}
