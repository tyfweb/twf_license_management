@model TechWayFit.Licensing.Management.Web.ViewModels.Settings.SettingsIndexViewModel
@using TechWayFit.Licensing.Management.Web.ViewModels.Settings
@{
    ViewData["Title"] = "System Settings";
    ViewData["Description"] = "Manage system settings and configuration";
}

@section Styles {
    <link rel="stylesheet" href="~/css/product-management.css" />
}

@Html.AntiForgeryToken()

<div class="container-fluid py-3">
    <!-- Header Section -->
    <div class="header mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="mb-1">System Settings</h2>
                <p class="text-muted mb-0">Manage your application configuration and system settings.</p>
            </div>
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-primary" onclick="saveAllChanges()">
                    <i class="fas fa-save me-2"></i>Save All Changes
                </button>
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-secondary" onclick="validateAllSettings()">
                        <i class="fas fa-check-circle me-1"></i>Validate All
                    </button>
                    <a href="@Url.Action("Backup")" class="btn btn-outline-secondary">
                        <i class="fas fa-download me-1"></i>Backup
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row g-2 mb-3">
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card">
                <div class="stats-icon">
                    <i class="fas fa-cog"></i>
                </div>
                <div class="stats-content">
                    <div class="stats-number">@Model.TotalSettings</div>
                    <div class="stats-label">Total Settings</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card stats-card-success">
                <div class="stats-icon">
                    <i class="fas fa-edit"></i>
                </div>
                <div class="stats-content">
                    <div class="stats-number" id="modifiedCount">@Model.ModifiedSettings</div>
                    <div class="stats-label">Modified</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card">
                <div class="stats-icon">
                    <i class="fas fa-lock"></i>
                </div>
                <div class="stats-content">
                    <div class="stats-number">@Model.ReadOnlySettings</div>
                    <div class="stats-label">Read-Only</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card">
                <div class="stats-icon">
                    <i class="fas fa-tags"></i>
                </div>
                <div class="stats-content">
                    <div class="stats-number">@Model.Categories.Count</div>
                    <div class="stats-label">Categories</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="sidebar-section">
                <div class="section-header">
                    <h5><i class="fas fa-bolt me-2"></i>Quick Actions</h5>
                </div>
                <div class="section-content">
                    <div class="row g-2">
                        <div class="col-sm-6 col-lg-3">
                            <button type="button" class="btn btn-outline-primary w-100" onclick="resetAllModified()">
                                <i class="fas fa-undo me-2"></i>Reset Modified
                            </button>
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <button type="button" class="btn btn-outline-secondary w-100" onclick="exportSettings()">
                                <i class="fas fa-download me-2"></i>Export Settings
                            </button>
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <button type="button" class="btn btn-outline-info w-100" onclick="importSettings()">
                                <i class="fas fa-upload me-2"></i>Import Settings
                            </button>
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <button type="button" class="btn btn-outline-success w-100" onclick="validateAllSettings()">
                                <i class="fas fa-shield-alt me-2"></i>Validate All
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="row g-2 mb-3">
        <div class="col-12">
            <div class="search-section">
                <div class="d-flex gap-2 align-items-end">
                    <div class="flex-grow-1">
                        <div class="search-box">
                            <i class="fas fa-search search-icon"></i>
                            <input type="text" class="form-control" id="searchInput" placeholder="Search settings by name, description, or key...">
                        </div>
                    </div>
                    <div class="search-actions">
                        <button type="button" class="btn btn-primary" id="searchBtn">
                            <i class="fas fa-search me-1"></i>Search
                        </button>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="showModifiedOnly">
                        <label class="form-check-label" for="showModifiedOnly">
                            Show modified only
                        </label>
                    </div>
                    <div class="filter-button">
                        <button type="button" class="btn btn-outline-primary" id="clearFiltersBtn">
                            <i class="fas fa-times me-1"></i>Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Tabs -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="edit-section">
                <div class="section-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5><i class="fas fa-cogs me-2"></i>Settings Management</h5>
                        <div class="btn-group" role="group" aria-label="View toggle">
                            <button type="button" class="btn btn-outline-secondary btn-sm active" id="gridViewBtn" onclick="switchView('grid')">
                                <i class="fas fa-th-large me-1"></i>Grid
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" id="listViewBtn" onclick="switchView('list')">
                                <i class="fas fa-list me-1"></i>List
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Category Navigation -->
                <div class="category-navigation mb-3">
                    <div class="btn-group" role="group" aria-label="Category filter">
                        <button type="button" class="btn btn-outline-primary active" data-category="all" onclick="showCategory('all', this)">
                            <i class="fas fa-layer-group me-1"></i>All Settings
                            <span class="badge bg-secondary ms-1">@Model.TotalSettings</span>
                        </button>
                        @foreach (var category in Model.Categories)
                        {
                            <button type="button" class="btn btn-outline-primary" data-category="@category" onclick="showCategory('@category', this)">
                                <i class="fas fa-tag me-1"></i>@category
                                <span class="badge bg-secondary ms-1">@Model.GetCategorySettingsCount(category)</span>
                            </button>
                        }
                        <button type="button" class="btn btn-outline-primary" data-category="config" onclick="showCategory('config', this)">
                            <i class="fas fa-file-code me-1"></i>Configuration
                            <span class="badge bg-secondary ms-1">@Model.ConfigurationSettings.Count</span>
                        </button>
                    </div>
                </div>

                <!-- Content Area -->
                <div class="section-content">
                    <!-- Alerts -->
                    <div id="alertContainer"></div>

                    <!-- Grid View -->
                    <div id="gridView" class="settings-grid">
                        @foreach (var categoryGroup in Model.SettingsGrouped.OrderBy(g => g.Key))
                        {
                            <div class="settings-category-section" data-category="@categoryGroup.Key">
                                <h6 class="category-header">
                                    <i class="fas fa-folder me-2"></i>@categoryGroup.Key
                                    @if (Model.GetCategoryModifiedCount(categoryGroup.Key) > 0)
                                    {
                                        <span class="badge bg-warning ms-2">@Model.GetCategoryModifiedCount(categoryGroup.Key) modified</span>
                                    }
                                </h6>
                                <div class="row g-3">
                                    @foreach (var setting in categoryGroup.Value.OrderBy(s => s.SortOrder))
                                    {
                                        <div class="col-md-6 col-lg-4">
                                            <div class="product-card @(setting.IsModified ? "setting-modified" : "") @(setting.IsReadOnly ? "setting-readonly" : "")" 
                                                 data-setting-id="@setting.SettingId" 
                                                 data-search-text="@($"{setting.DisplayName} {setting.Description} {setting.Category} {setting.Key}".ToLower())">
                                                <div class="product-card-header">
                                                    <div class="product-info">
                                                        <h6 class="product-name">
                                                            @setting.DisplayName
                                                            @if (setting.IsRequired)
                                                            {
                                                                <span class="text-danger">*</span>
                                                            }
                                                            @if (setting.IsModified)
                                                            {
                                                                <i class="fas fa-circle text-warning ms-1" title="Modified from default"></i>
                                                            }
                                                        </h6>
                                                    </div>
                                                    <span class="badge bg-info">@setting.DataType</span>
                                                </div>
                                                <div class="product-card-body">
                                                    @if (!string.IsNullOrEmpty(setting.Description))
                                                    {
                                                        <div class="product-detail">
                                                            <small class="text-muted">@setting.Description</small>
                                                        </div>
                                                    }
                                                    <div class="product-detail">
                                                        @if (setting.DataType.ToLower() == "boolean" || setting.DataType.ToLower() == "bool")
                                                        {
                                                            <div class="form-check form-switch">
                                                                <input type="checkbox" 
                                                                       class="form-check-input setting-input" 
                                                                       id="setting_@setting.SettingId"
                                                                       data-setting-id="@setting.SettingId"
                                                                       data-original="@setting.Value"
                                                                       @(string.Equals(setting.Value, "true", StringComparison.OrdinalIgnoreCase) ? "checked" : "")
                                                                       @(setting.IsReadOnly ? "disabled" : "") />
                                                                <label class="form-check-label" for="setting_@setting.SettingId">
                                                                    @(string.Equals(setting.Value, "true", StringComparison.OrdinalIgnoreCase) ? "Enabled" : "Disabled")
                                                                </label>
                                                            </div>
                                                        }
                                                        else if (setting.InputType == "textarea")
                                                        {
                                                            <textarea class="form-control setting-input" 
                                                                      rows="3"
                                                                      data-setting-id="@setting.SettingId"
                                                                      data-original="@setting.Value"
                                                                      @(setting.IsReadOnly ? "readonly" : "")
                                                                      placeholder="@setting.DefaultValue">@setting.Value</textarea>
                                                        }
                                                        else
                                                        {
                                                            <input type="@setting.InputType" 
                                                                   class="form-control setting-input" 
                                                                   data-setting-id="@setting.SettingId"
                                                                   data-original="@setting.Value"
                                                                   value="@setting.Value"
                                                                   @(setting.IsReadOnly ? "readonly" : "")
                                                                   placeholder="@setting.DefaultValue" />
                                                        }
                                                    </div>
                                                    <div class="product-detail">
                                                        <small class="text-muted">Key: @setting.Key</small>
                                                    </div>
                                                </div>
                                                <div class="product-card-actions">
                                                    <div class="btn-group w-100" role="group">
                                                        <button type="button" class="btn btn-sm btn-success save-setting-btn" style="display: none;" onclick="saveSetting('@setting.SettingId', this)">
                                                            <i class="fas fa-check"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-secondary cancel-setting-btn" style="display: none;" onclick="cancelSetting('@setting.SettingId', this)">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-outline-warning" onclick="resetSetting('@setting.SettingId', this)" title="Reset to default">
                                                            <i class="fas fa-undo"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <!-- List View -->
                    <div id="listView" class="d-none">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Setting</th>
                                        <th>Category</th>
                                        <th>Current Value</th>
                                        <th>Type</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="settingsTableBody">
                                    @foreach (var categoryGroup in Model.SettingsGrouped.OrderBy(g => g.Key))
                                    {
                                        @foreach (var setting in categoryGroup.Value.OrderBy(s => s.SortOrder))
                                        {
                                            <tr class="setting-row @(setting.IsModified ? "table-warning" : "")" 
                                                data-setting-id="@setting.SettingId" 
                                                data-category="@setting.Category"
                                                data-search-text="@($"{setting.DisplayName} {setting.Description} {setting.Category} {setting.Key}".ToLower())">
                                                <td>
                                                    <div class="fw-semibold">
                                                        @setting.DisplayName
                                                        @if (setting.IsRequired)
                                                        {
                                                            <span class="text-danger">*</span>
                                                        }
                                                        @if (setting.IsModified)
                                                        {
                                                            <i class="fas fa-circle text-warning ms-1" title="Modified"></i>
                                                        }
                                                    </div>
                                                    <small class="text-muted d-block">@setting.Key</small>
                                                    @if (!string.IsNullOrEmpty(setting.Description))
                                                    {
                                                        <small class="text-muted d-block">@setting.Description</small>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="badge bg-secondary">@setting.Category</span>
                                                </td>
                                                <td>
                                                    <div class="setting-value-display">
                                                        @if (setting.DataType.ToLower() == "boolean" || setting.DataType.ToLower() == "bool")
                                                        {
                                                            <span class="badge @(string.Equals(setting.Value, "true", StringComparison.OrdinalIgnoreCase) ? "bg-success" : "bg-secondary")">
                                                                @(string.Equals(setting.Value, "true", StringComparison.OrdinalIgnoreCase) ? "Enabled" : "Disabled")
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-truncate d-inline-block" style="max-width: 200px;" title="@setting.Value">@setting.Value</span>
                                                        }
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-info">@setting.DataType</span>
                                                </td>
                                                <td>
                                                    @if (setting.IsReadOnly)
                                                    {
                                                        <span class="badge bg-secondary">Read-Only</span>
                                                    }
                                                    else if (setting.IsModified)
                                                    {
                                                        <span class="badge bg-warning">Modified</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-light text-dark">Default</span>
                                                    }
                                                </td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="editSetting('@setting.SettingId')" title="Edit">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-outline-warning" onclick="resetSetting('@setting.SettingId')" title="Reset to default">
                                                            <i class="fas fa-undo"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Configuration Settings Section -->
                    <div class="settings-category-section" data-category="config" style="display: none;">
                        <h6 class="category-header">
                            <i class="fas fa-file-code me-2"></i>Configuration Settings
                        </h6>
                        <div class="row">
                            <div class="col-12">
                                <div class="configuration-display">
                                    @foreach (var configGroup in Model.ConfigurationSettings)
                                    {
                                        <div class="config-group mb-3">
                                            <h6>@configGroup.Key</h6>
                                            <div class="config-content">
                                                @if (configGroup.Value is IDictionary<string, object> dict)
                                                {
                                                    <details>
                                                        <summary>@dict.Count items</summary>
                                                        @foreach (var item in dict)
                                                        {
                                                            <div class="config-item">
                                                                <span class="config-key">@item.Key:</span>
                                                                <span class="config-value">@item.Value</span>
                                                            </div>
                                                        }
                                                    </details>
                                                }
                                                else
                                                {
                                                    <span>@configGroup.Value?.ToString()</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- No Results -->
                    <div id="noResults" class="no-results d-none">
                        <i class="fas fa-search"></i>
                        <h5>No settings found</h5>
                        <p>Try adjusting your search criteria or filters.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global variables
        let modifiedSettings = new Set();
        let originalValues = new Map();
        let currentView = 'grid';
        let currentCategory = 'all';

        // Ensure jQuery is loaded before proceeding
        function initializeSettings() {
            // Check if jQuery is available
            if (typeof $ === 'undefined') {
                console.error('jQuery is not loaded. Retrying in 100ms...');
                setTimeout(initializeSettings, 100);
                return;
            }

            // Initialize when document is ready
            $(document).ready(function() {
            // Initialize original values
            $('.setting-input').each(function() {
                const settingId = $(this).data('setting-id');
                const value = $(this).data('original');
                originalValues.set(settingId, value);
            });

            // Initialize view based on saved preference
            const savedView = localStorage.getItem('settingsViewType') || 'grid';
            switchView(savedView);

            // Bind setting input change events
            $(document).on('input change', '.setting-input', function() {
                markAsChanged(this);
            });

            // Bind search input
            $('#searchInput').on('input', function() {
                filterSettings(this.value);
            });

            // Bind search button
            $('#searchBtn').on('click', function() {
                const searchTerm = $('#searchInput').val();
                filterSettings(searchTerm);
            });

            // Enable search on Enter key press
            $('#searchInput').on('keypress', function(e) {
                if (e.which === 13) { // Enter key
                    const searchTerm = $(this).val();
                    filterSettings(searchTerm);
                }
            });

            // Bind modified filter checkbox
            $('#showModifiedOnly').on('change', function() {
                toggleModifiedFilter(this.checked);
            });

            // Bind clear filters button
            $('#clearFiltersBtn').on('click', function() {
                clearFilters();
            });
        });
        }

        // Start initialization
        initializeSettings();

        // View switching functionality
        function switchView(view) {
            currentView = view;
            const gridView = document.getElementById('gridView');
            const listView = document.getElementById('listView');
            const gridBtn = document.getElementById('gridViewBtn');
            const listBtn = document.getElementById('listViewBtn');

            if (view === 'grid') {
                gridView.classList.remove('d-none');
                listView.classList.add('d-none');
                gridBtn.classList.add('active');
                listBtn.classList.remove('active');
                localStorage.setItem('settingsViewType', 'grid');
            } else {
                gridView.classList.add('d-none');
                listView.classList.remove('d-none');
                gridBtn.classList.remove('active');
                listBtn.classList.add('active');
                localStorage.setItem('settingsViewType', 'list');
            }
        }

        // Category switching
        function showCategory(category, button) {
            currentCategory = category;
            
            // Update active button
            document.querySelectorAll('.category-navigation .btn').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            
            // Show/hide categories
            const categoryElements = document.querySelectorAll('.settings-category-section');
            categoryElements.forEach(element => {
                const elementCategory = $(element).data('category');
                if (category === 'all') {
                    element.style.display = 'block';
                } else if (category === 'config') {
                    element.style.display = elementCategory === 'config' ? 'block' : 'none';
                } else {
                    element.style.display = elementCategory === category ? 'block' : 'none';
                }
            });
            
            // Apply current filters
            filterSettings(document.getElementById('searchInput').value);
        }

        // Search functionality
        function filterSettings(searchTerm) {
            const showModifiedOnly = document.getElementById('showModifiedOnly').checked;
            
            if (currentView === 'grid') {
                filterGridView(searchTerm, showModifiedOnly);
            } else {
                filterListView(searchTerm, showModifiedOnly);
            }
        }

        function filterGridView(searchTerm, showModifiedOnly) {
            let hasResults = false;
            const cards = document.querySelectorAll('.product-card');
            
            cards.forEach(card => {
                const searchText = $(card).data('search-text') || '';
                const isModified = card.classList.contains('setting-modified');
                const matchesSearch = searchTerm === '' || searchText.includes(searchTerm.toLowerCase());
                const matchesFilter = !showModifiedOnly || isModified;
                
                const columnElement = card.closest('.col-md-6');
                if (matchesSearch && matchesFilter) {
                    columnElement.style.display = 'block';
                    hasResults = true;
                } else {
                    columnElement.style.display = 'none';
                }
            });
            
            // Hide empty categories
            document.querySelectorAll('.settings-category-section').forEach(section => {
                const visibleCards = section.querySelectorAll('.col-md-6[style*="block"]').length;
                section.style.display = visibleCards > 0 ? 'block' : 'none';
            });
            
            document.getElementById('noResults').classList.toggle('d-none', hasResults);
        }

        function filterListView(searchTerm, showModifiedOnly) {
            let hasResults = false;
            const rows = document.querySelectorAll('.setting-row');
            
            rows.forEach(row => {
                const searchText = $(row).data('search-text') || '';
                const isModified = row.classList.contains('table-warning');
                const matchesSearch = searchTerm === '' || searchText.includes(searchTerm.toLowerCase());
                const matchesFilter = !showModifiedOnly || isModified;
                
                if (matchesSearch && matchesFilter) {
                    row.style.display = 'table-row';
                    hasResults = true;
                } else {
                    row.style.display = 'none';
                }
            });
            
            document.getElementById('noResults').classList.toggle('d-none', hasResults);
        }

        function toggleModifiedFilter(showModified) {
            filterSettings(document.getElementById('searchInput').value);
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('showModifiedOnly').checked = false;
            filterSettings('');
        }

        // Setting value change tracking
        function markAsChanged(element) {
            const settingId = $(element).data('setting-id'); // Use jQuery data access for consistency
            const currentValue = element.type === 'checkbox' ? element.checked.toString() : element.value;
            const originalValue = originalValues.get(settingId);
            
            const isModified = currentValue !== originalValue;
            const container = element.closest('.product-card, .setting-row');
            
            if (isModified) {
                modifiedSettings.add(settingId);
                container.classList.add('setting-modified', 'table-warning');
                const saveBtn = container.querySelector('.save-setting-btn');
                const cancelBtn = container.querySelector('.cancel-setting-btn');
                if (saveBtn) saveBtn.style.display = 'inline-block';
                if (cancelBtn) cancelBtn.style.display = 'inline-block';
            } else {
                modifiedSettings.delete(settingId);
                container.classList.remove('setting-modified', 'table-warning');
                const saveBtn = container.querySelector('.save-setting-btn');
                const cancelBtn = container.querySelector('.cancel-setting-btn');
                if (saveBtn) saveBtn.style.display = 'none';
                if (cancelBtn) cancelBtn.style.display = 'none';
            }
            
            // Update checkbox label
            if (element.type === 'checkbox') {
                const label = element.nextElementSibling;
                if (label) {
                    label.textContent = element.checked ? 'Enabled' : 'Disabled';
                }
            }
            
            updateModifiedCount();
        }

        function updateModifiedCount() {
            const countElement = document.getElementById('modifiedCount');
            if (countElement) {
                countElement.textContent = modifiedSettings.size;
            }
        }

        // Save individual setting
        function saveSetting(settingId, button) {
            const input = document.querySelector(`[data-setting-id="${settingId}"]`);
            const value = input.type === 'checkbox' ? input.checked.toString() : input.value;
            
            showLoadingState(button, true);
            
            $.ajax({
                url: '@Url.Action("UpdateSetting", "Settings")',
                type: 'POST',
                data: JSON.stringify({ settingId: settingId, value: value }),
                contentType: 'application/json',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        showToast('Setting saved successfully', 'success');
                        originalValues.set(settingId, value);
                        modifiedSettings.delete(settingId);
                        
                        const container = input.closest('.product-card, .setting-row');
                        container.classList.remove('setting-modified', 'table-warning');
                        const saveBtn = container.querySelector('.save-setting-btn');
                        const cancelBtn = container.querySelector('.cancel-setting-btn');
                        if (saveBtn) saveBtn.style.display = 'none';
                        if (cancelBtn) cancelBtn.style.display = 'none';
                        
                        updateModifiedCount();
                    } else {
                        showToast(response.message || 'Error saving setting', 'error');
                    }
                },
                error: function() {
                    showToast('Error saving setting', 'error');
                },
                complete: function() {
                    showLoadingState(button, false);
                }
            });
        }

        // Cancel setting changes
        function cancelSetting(settingId, button) {
            const input = document.querySelector(`[data-setting-id="${settingId}"]`);
            const originalValue = originalValues.get(settingId);
            
            if (input.type === 'checkbox') {
                input.checked = originalValue === 'true';
                const label = input.nextElementSibling;
                if (label) {
                    label.textContent = originalValue === 'true' ? 'Enabled' : 'Disabled';
                }
            } else {
                input.value = originalValue;
            }
            
            modifiedSettings.delete(settingId);
            const container = input.closest('.product-card, .setting-row');
            container.classList.remove('setting-modified', 'table-warning');
            const saveBtn = container.querySelector('.save-setting-btn');
            const cancelBtn = container.querySelector('.cancel-setting-btn');
            if (saveBtn) saveBtn.style.display = 'none';
            if (cancelBtn) cancelBtn.style.display = 'none';
            
            updateModifiedCount();
        }

        // Reset setting to default
        function resetSetting(settingId, button) {
            if (!confirm('Are you sure you want to reset this setting to its default value?')) {
                return;
            }
            
            showLoadingState(button, true);
            
            $.ajax({
                url: '@Url.Action("ResetSetting", "Settings")',
                type: 'POST',
                data: { settingId: settingId },
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        showToast('Setting reset to default value', 'success');
                        location.reload(); // Reload to show updated values
                    } else {
                        showToast(response.message || 'Error resetting setting', 'error');
                    }
                },
                error: function() {
                    showToast('Error resetting setting', 'error');
                },
                complete: function() {
                    showLoadingState(button, false);
                }
            });
        }

        // Save all changes
        function saveAllChanges() {
            if (modifiedSettings.size === 0) {
                showToast('No changes to save', 'info');
                return;
            }
            
            const updates = [];
            modifiedSettings.forEach(settingId => {
                const input = document.querySelector(`[data-setting-id="${settingId}"]`);
                const value = input.type === 'checkbox' ? input.checked.toString() : input.value;
                updates.push({ settingId: settingId, value: value });
            });
            
            const button = document.querySelector('.btn-primary');
            showLoadingState(button, true);
            
            $.ajax({
                url: '@Url.Action("UpdateMultipleSettings", "Settings")',
                type: 'POST',
                data: JSON.stringify(updates),
                contentType: 'application/json',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        showToast(response.message || 'Settings saved successfully', 'success');
                        location.reload(); // Reload to show updated values
                    } else {
                        showToast(response.message || 'Error saving settings', 'error');
                    }
                },
                error: function() {
                    showToast('Error saving settings', 'error');
                },
                complete: function() {
                    showLoadingState(button, false);
                }
            });
        }

        // Validate all settings
        function validateAllSettings() {
            const button = document.querySelector('button[onclick*="validateAllSettings"]');
            showLoadingState(button, true);
            
            $.ajax({
                url: '@Url.Action("ValidateAll", "Settings")',
                type: 'GET',
                success: function(response) {
                    if (response.success) {
                        showToast(response.message || 'All settings are valid', 'success');
                    } else {
                        showToast(response.message || 'Validation failed', 'warning');
                        if (response.errors && response.errors.length > 0) {
                            console.log('Validation errors:', response.errors);
                        }
                    }
                },
                error: function() {
                    showToast('Error validating settings', 'error');
                },
                complete: function() {
                    showLoadingState(button, false);
                }
            });
        }

        // Reset all modified settings
        function resetAllModified() {
            if (modifiedSettings.size === 0) {
                showToast('No modified settings to reset', 'info');
                return;
            }
            
            if (!confirm(`Are you sure you want to reset all ${modifiedSettings.size} modified settings?`)) {
                return;
            }
            
            modifiedSettings.forEach(settingId => {
                const input = document.querySelector(`[data-setting-id="${settingId}"]`);
                const originalValue = originalValues.get(settingId);
                
                if (input.type === 'checkbox') {
                    input.checked = originalValue === 'true';
                    const label = input.nextElementSibling;
                    if (label) {
                        label.textContent = originalValue === 'true' ? 'Enabled' : 'Disabled';
                    }
                } else {
                    input.value = originalValue;
                }
                
                const container = input.closest('.product-card, .setting-row');
                container.classList.remove('setting-modified', 'table-warning');
                const saveBtn = container.querySelector('.save-setting-btn');
                const cancelBtn = container.querySelector('.cancel-setting-btn');
                if (saveBtn) saveBtn.style.display = 'none';
                if (cancelBtn) cancelBtn.style.display = 'none';
            });
            
            modifiedSettings.clear();
            updateModifiedCount();
            showToast('All changes have been reset', 'success');
        }

        // Utility functions
        function showLoadingState(button, loading) {
            if (!button) return;
            
            if (loading) {
                button.disabled = true;
                const icon = button.querySelector('i');
                if (icon) icon.classList.add('fa-spin');
            } else {
                button.disabled = false;
                const icon = button.querySelector('i');
                if (icon) icon.classList.remove('fa-spin');
            }
        }

        function showToast(message, type = 'info') {
            const alertClass = type === 'success' ? 'alert-success' : 
                             type === 'error' ? 'alert-danger' : 
                             type === 'warning' ? 'alert-warning' : 'alert-info';
            
            const toast = $(`<div class="alert ${alertClass} alert-dismissible fade show toast-notification" style="position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>`);
            
            $('body').append(toast);
            setTimeout(() => toast.alert('close'), 5000);
        }

        // Placeholder functions for quick actions
        function exportSettings() {
            showToast('Export functionality coming soon', 'info');
        }

        function importSettings() {
            showToast('Import functionality coming soon', 'info');
        }

        function editSetting(settingId) {
            const row = document.querySelector(`tr[data-setting-id="${settingId}"]`);
            if (!row) return;
            
            const valueCell = row.querySelector('.setting-value-display');
            if (!valueCell) return;
            
            // Check if already in edit mode
            if (valueCell.querySelector('.list-setting-input')) return;
            
            // Get current value from the display
            const currentSpan = valueCell.querySelector('span');
            const currentValue = currentSpan ? currentSpan.textContent.trim() : '';
            
            // Determine if it's a boolean based on the current display
            const isBoolean = currentSpan && (currentSpan.textContent === 'Enabled' || currentSpan.textContent === 'Disabled');
            
            // Create appropriate input control
            let inputHtml = '';
            if (isBoolean) {
                const isChecked = currentValue === 'Enabled';
                inputHtml = `
                    <div class="form-check form-switch">
                        <input type="checkbox" class="form-check-input list-setting-input" 
                               data-setting-id="${settingId}" data-original="${isChecked ? 'true' : 'false'}"
                               ${isChecked ? 'checked' : ''} />
                        <label class="form-check-label">${isChecked ? 'Enabled' : 'Disabled'}</label>
                    </div>
                `;
            } else {
                // For non-boolean values, use text input
                inputHtml = `
                    <input type="text" class="form-control list-setting-input" 
                           data-setting-id="${settingId}" data-original="${currentValue}" 
                           value="${currentValue}" />
                `;
            }
            
            // Add save/cancel buttons
            const buttonHtml = `
                <div class="mt-2">
                    <button type="button" class="btn btn-sm btn-success me-1" onclick="saveListSetting('${settingId}')">
                        <i class="fas fa-check"></i> Save
                    </button>
                    <button type="button" class="btn btn-sm btn-secondary" onclick="cancelListSetting('${settingId}')">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            `;
            
            // Store original content and replace with input
            valueCell.dataset.originalContent = valueCell.innerHTML;
            valueCell.innerHTML = inputHtml + buttonHtml;
            
            // Bind change event for checkboxes
            const input = valueCell.querySelector('.list-setting-input');
            if (input && input.type === 'checkbox') {
                input.addEventListener('change', function() {
                    const label = this.nextElementSibling;
                    if (label) {
                        label.textContent = this.checked ? 'Enabled' : 'Disabled';
                    }
                });
            }
            
            // Hide action buttons
            const actionButtons = row.querySelector('.btn-group');
            if (actionButtons) {
                actionButtons.style.display = 'none';
            }
        }

        function saveListSetting(settingId) {
            const row = document.querySelector(`tr[data-setting-id="${settingId}"]`);
            const input = row.querySelector('.list-setting-input');
            const value = input.type === 'checkbox' ? input.checked.toString() : input.value;
            
            // Create a temporary button element for the saveSetting function
            const tempButton = document.createElement('button');
            
            // Call the existing saveSetting function
            showLoadingState(tempButton, true);
            
            $.ajax({
                url: '@Url.Action("UpdateSetting", "Settings")',
                type: 'POST',
                data: JSON.stringify({ settingId: settingId, value: value }),
                contentType: 'application/json',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        showToast('Setting saved successfully', 'success');
                        
                        // Update the original values map
                        originalValues.set(settingId, value);
                        modifiedSettings.delete(settingId);
                        
                        // Update the display
                        const valueCell = row.querySelector('.setting-value-display');
                        if (input.type === 'checkbox') {
                            const isEnabled = input.checked;
                            valueCell.innerHTML = `<span class="badge ${isEnabled ? 'bg-success' : 'bg-secondary'}">${isEnabled ? 'Enabled' : 'Disabled'}</span>`;
                        } else {
                            valueCell.innerHTML = `<span class="text-truncate d-inline-block" style="max-width: 200px;" title="${value}">${value}</span>`;
                        }
                        
                        // Remove table-warning class and update status
                        row.classList.remove('table-warning');
                        const statusCell = row.querySelector('td:nth-child(5)');
                        if (statusCell) {
                            statusCell.innerHTML = '<span class="badge bg-light text-dark">Default</span>';
                        }
                        
                        // Show action buttons
                        const actionButtons = row.querySelector('.btn-group');
                        if (actionButtons) {
                            actionButtons.style.display = 'block';
                        }
                        
                        updateModifiedCount();
                    } else {
                        showToast(response.message || 'Error saving setting', 'error');
                    }
                },
                error: function() {
                    showToast('Error saving setting', 'error');
                },
                complete: function() {
                    showLoadingState(tempButton, false);
                }
            });
        }

        function cancelListSetting(settingId) {
            const row = document.querySelector(`tr[data-setting-id="${settingId}"]`);
            const valueCell = row.querySelector('.setting-value-display');
            
            // Restore original content
            if (valueCell.dataset.originalContent) {
                valueCell.innerHTML = valueCell.dataset.originalContent;
                delete valueCell.dataset.originalContent;
            }
            
            // Show action buttons
            const actionButtons = row.querySelector('.btn-group');
            if (actionButtons) {
                actionButtons.style.display = 'block';
            }
        }
    </script>
}
