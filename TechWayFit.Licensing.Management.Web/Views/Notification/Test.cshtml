@model TechWayFit.Licensing.WebUI.ViewModels.Notification.NotificationTestViewModel
@{
    ViewData["Title"] = "Test Notification Template";
    ViewData["Description"] = "Test notification templates with sample data";
}

@section Styles {
    <link rel="stylesheet" href="~/css/product-management.css" />
    <style>
        .form-section {
            background: var(--white);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        .form-section-header {
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.75rem;
            margin-bottom: 1rem;
        }
        .template-card {
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
            margin-bottom: 0.5rem;
        }
        .template-card:hover {
            background: var(--gray-50);
            border-color: var(--primary-color);
        }
        .template-card.selected {
            background: var(--primary-light);
            border-color: var(--primary-color);
        }
        .test-data-input {
            background: var(--gray-50);
            border-radius: 4px;
            padding: 0.5rem;
            margin-bottom: 0.5rem;
        }
        .preview-section {
            background: var(--gray-50);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 1rem;
        }
        .result-section {
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
        }
        .result-success {
            background: var(--success-light);
            border: 1px solid var(--success-color);
            color: var(--success-text);
        }
        .result-error {
            background: var(--danger-light);
            border: 1px solid var(--danger-color);
            color: var(--danger-text);
        }
        .variable-tag {
            background: var(--info-light);
            color: var(--info-text);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.875rem;
        }
    </style>
}

<div class="container-fluid py-3">
    <!-- Header Section -->
    <div class="header mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <nav aria-label="breadcrumb" class="mb-2">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="@Url.Action("Index")">Notifications</a></li>
                        <li class="breadcrumb-item active">Test Template</li>
                    </ol>
                </nav>
                <h2 class="mb-1">Test Notification Template</h2>
                <p class="text-muted mb-0">Test notification templates with sample data before sending</p>
            </div>
            <div class="d-flex gap-2">
                <a href="@Url.Action("Templates")" class="btn btn-outline-secondary">
                    <i class="fas fa-file-alt me-1"></i>Templates
                </a>
                <a href="@Url.Action("Send")" class="btn btn-outline-primary">
                    <i class="fas fa-paper-plane me-1"></i>Send Notification
                </a>
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                    <i class="fas fa-tachometer-alt me-1"></i>Dashboard
                </a>
            </div>
        </div>
    </div>

    <form asp-action="Test" method="post" id="testForm">
        <div class="row">
            <!-- Main Form -->
            <div class="col-lg-8">
                <!-- Template Selection -->
                <div class="form-section">
                    <div class="form-section-header">
                        <h5><i class="fas fa-file-alt me-2"></i>Select Template to Test</h5>
                    </div>

                    @if (Model.AvailableTemplates.Any())
                    {
                        <input type="hidden" asp-for="TemplateId" id="selectedTemplateId" />
                        
                        <div class="row g-2">
                            @foreach (var template in Model.AvailableTemplates)
                            {
                                <div class="col-md-6">
                                    <div class="template-card @(template.TemplateId == Model.TemplateId ? "selected" : "")" 
                                         onclick="selectTemplate('@template.TemplateId', '@template.TemplateName')">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div class="flex-grow-1">
                                                <div class="fw-medium">@template.TemplateName</div>
                                                <small class="text-muted">@template.Subject</small>
                                                <div class="mt-1">
                                                    <span class="badge bg-info small">@template.TypeDisplayName</span>
                                                    <span class="badge bg-secondary small">@template.ModeDisplayName</span>
                                                </div>
                                            </div>
                                            <i class="fas fa-check text-success @(template.TemplateId == Model.TemplateId ? "" : "d-none") template-check"></i>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <span asp-validation-for="TemplateId" class="text-danger"></span>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                            <h5>No Templates Available</h5>
                            <p class="text-muted">Create a notification template first to test it.</p>
                            <a href="@Url.Action("CreateTemplate")" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Create Template
                            </a>
                        </div>
                    }
                </div>

                <!-- Test Configuration -->
                <div class="form-section">
                    <div class="form-section-header">
                        <h5><i class="fas fa-cog me-2"></i>Test Configuration</h5>
                    </div>

                    <div class="mb-3">
                        <label asp-for="TestRecipient" class="form-label required">Test Recipient Email</label>
                        <input asp-for="TestRecipient" type="email" class="form-control" 
                               placeholder="Enter email address to receive test notification">
                        <span asp-validation-for="TestRecipient" class="text-danger"></span>
                        <div class="form-text">
                            The test notification will be sent to this email address.
                        </div>
                    </div>
                </div>

                <!-- Test Data -->
                <div class="form-section">
                    <div class="form-section-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5><i class="fas fa-database me-2"></i>Test Data</h5>
                            <button type="button" class="btn btn-outline-primary btn-sm" onclick="addTestData()">
                                <i class="fas fa-plus me-1"></i>Add Variable
                            </button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Sample Data:</strong> These values will replace variables in your template for testing.
                            Common variables are pre-filled with sample data.
                        </div>
                    </div>

                    <div id="testDataContainer">
                        @if (Model.TestData.Any())
                        {
                            @for (int i = 0; i < Model.TestData.Count; i++)
                            {
                                var data = Model.TestData.ElementAt(i);
                                <div class="test-data-input">
                                    <div class="row g-2">
                                        <div class="col-md-4">
                                            <label class="form-label small">Variable Name</label>
                                            <input name="TestData[@i].Key" value="@data.Key" 
                                                   class="form-control form-control-sm" readonly>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label small">Test Value</label>
                                            <input name="TestData[@i].Value" value="@data.Value" 
                                                   class="form-control form-control-sm" 
                                                   placeholder="Enter test value for {{@data.Key}}">
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label small">&nbsp;</label>
                                            <button type="button" class="btn btn-outline-danger btn-sm d-block" 
                                                    onclick="removeTestData(this)">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <!-- Default test data -->
                            <div class="test-data-input">
                                <div class="row g-2">
                                    <div class="col-md-4">
                                        <label class="form-label small">Variable Name</label>
                                        <input name="TestData[0].Key" value="consumerName" 
                                               class="form-control form-control-sm" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label small">Test Value</label>
                                        <input name="TestData[0].Value" value="John Doe" 
                                               class="form-control form-control-sm">
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label small">&nbsp;</label>
                                        <button type="button" class="btn btn-outline-danger btn-sm d-block" 
                                                onclick="removeTestData(this)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="test-data-input">
                                <div class="row g-2">
                                    <div class="col-md-4">
                                        <label class="form-label small">Variable Name</label>
                                        <input name="TestData[1].Key" value="productName" 
                                               class="form-control form-control-sm" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label small">Test Value</label>
                                        <input name="TestData[1].Value" value="TechWayFit Professional" 
                                               class="form-control form-control-sm">
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label small">&nbsp;</label>
                                        <button type="button" class="btn btn-outline-danger btn-sm d-block" 
                                                onclick="removeTestData(this)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="test-data-input">
                                <div class="row g-2">
                                    <div class="col-md-4">
                                        <label class="form-label small">Variable Name</label>
                                        <input name="TestData[2].Key" value="licenseKey" 
                                               class="form-control form-control-sm" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label small">Test Value</label>
                                        <input name="TestData[2].Value" value="TWF-12345-ABCDE-67890" 
                                               class="form-control form-control-sm">
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label small">&nbsp;</label>
                                        <button type="button" class="btn btn-outline-danger btn-sm d-block" 
                                                onclick="removeTestData(this)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <div id="noTestData" class="text-center py-3 text-muted d-none">
                        <i class="fas fa-database fa-2x mb-2"></i>
                        <p>No test data defined. Add variables to test dynamic content.</p>
                    </div>
                </div>

                <!-- Test Results -->                @if (Model.TestSent)
                {
                    <div class="result-section @((Model.TestResult?.Contains("success") == true) ? "result-success" : "result-error")">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-@((Model.TestResult?.Contains("success") == true) ? "check-circle" : "exclamation-triangle") fa-2x me-3"></i>
                            <div>
                                <h6 class="mb-1">Test Result</h6>
                                <p class="mb-0">@Model.TestResult</p>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4">
                <!-- Template Preview -->
                <div class="sidebar-section mb-4">
                    <div class="section-header">
                        <h6><i class="fas fa-eye me-2"></i>Template Preview</h6>
                    </div>
                    <div class="section-content">
                        @if (!string.IsNullOrEmpty(Model.RenderedPreview))
                        {
                            <div class="preview-section">
                                <div class="mb-2">
                                    <strong>Rendered Template:</strong>
                                </div>
                                <div id="templatePreview">@Html.Raw(Html.Encode(Model.RenderedPreview).Replace("\n", "<br>"))</div>
                            </div>
                        }
                        else
                        {
                            <div class="preview-section">
                                <div class="text-muted text-center py-3">
                                    <i class="fas fa-file-alt fa-2x mb-2"></i>
                                    <p>Select a template to see the preview</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Common Variables -->
                <div class="sidebar-section mb-4">
                    <div class="section-header">
                        <h6><i class="fas fa-tags me-2"></i>Common Variables</h6>
                    </div>
                    <div class="section-content">
                        <div class="d-flex flex-wrap gap-2">
                            <span class="variable-tag" onclick="addCommonVariable('consumerName')">{{consumerName}}</span>
                            <span class="variable-tag" onclick="addCommonVariable('productName')">{{productName}}</span>
                            <span class="variable-tag" onclick="addCommonVariable('licenseKey')">{{licenseKey}}</span>
                            <span class="variable-tag" onclick="addCommonVariable('expirationDate')">{{expirationDate}}</span>
                            <span class="variable-tag" onclick="addCommonVariable('companyName')">{{companyName}}</span>
                            <span class="variable-tag" onclick="addCommonVariable('supportEmail')">{{supportEmail}}</span>
                        </div>
                        <small class="text-muted mt-2 d-block">Click to add to test data</small>
                    </div>
                </div>

                <!-- Test Actions -->
                <div class="sidebar-section">
                    <div class="section-header">
                        <h6><i class="fas fa-vial me-2"></i>Test Actions</h6>
                    </div>
                    <div class="section-content">
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" @(Model.AvailableTemplates.Any() ? "" : "disabled")>
                                <i class="fas fa-paper-plane me-2"></i>Send Test Notification
                            </button>
                            <button type="button" class="btn btn-outline-info" onclick="previewRendered()" 
                                    @(string.IsNullOrEmpty(Model.TemplateId) ? "disabled" : "")>
                                <i class="fas fa-eye me-2"></i>Preview with Test Data
                            </button>
                            <button type="button" class="btn btn-outline-secondary" onclick="loadSampleData()">
                                <i class="fas fa-download me-2"></i>Load Sample Data
                            </button>
                            <button type="button" class="btn btn-outline-warning" onclick="resetTestData()">
                                <i class="fas fa-undo me-2"></i>Reset Test Data
                            </button>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(Model.TemplateId))
                        {
                            <div class="mt-3 text-center">
                                <small class="text-muted">
                                    Testing template: <strong>@(Model.AvailableTemplates.FirstOrDefault(t => t.TemplateId == Model.TemplateId)?.TemplateName ?? "Unknown")</strong>
                                </small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        let testDataCounter = @(Model.TestData.Any() ? Model.TestData.Count : 3);

        // Template selection
        function selectTemplate(templateId, templateName) {
            // Remove previous selection
            document.querySelectorAll('.template-card').forEach(card => {
                card.classList.remove('selected');
                card.querySelector('.template-check').classList.add('d-none');
            });

            // Select current template
            event.currentTarget.classList.add('selected');
            event.currentTarget.querySelector('.template-check').classList.remove('d-none');

            // Update form
            document.getElementById('selectedTemplateId').value = templateId;
            
            // Enable preview button
            document.querySelector('button[onclick="previewRendered()"]').disabled = false;
        }

        // Test data management
        function addTestData() {
            const variableName = prompt('Enter variable name (without brackets):');
            if (variableName && variableName.trim()) {
                const container = document.getElementById('testDataContainer');
                const testDataDiv = document.createElement('div');
                testDataDiv.className = 'test-data-input';
                testDataDiv.innerHTML = `
                    <div class="row g-2">
                        <div class="col-md-4">
                            <label class="form-label small">Variable Name</label>
                            <input name="TestData[${testDataCounter}].Key" value="${variableName.trim()}" 
                                   class="form-control form-control-sm" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label small">Test Value</label>
                            <input name="TestData[${testDataCounter}].Value" 
                                   class="form-control form-control-sm" 
                                   placeholder="Enter test value for {{${variableName.trim()}}}">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small">&nbsp;</label>
                            <button type="button" class="btn btn-outline-danger btn-sm d-block" 
                                    onclick="removeTestData(this)">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                `;
                
                container.appendChild(testDataDiv);
                testDataCounter++;
                
                document.getElementById('noTestData').classList.add('d-none');
            }
        }

        function addCommonVariable(variableName) {
            // Check if variable already exists
            const existingInputs = document.querySelectorAll('input[name*=".Key"]');
            const exists = Array.from(existingInputs).some(input => input.value === variableName);
            
            if (!exists) {
                const container = document.getElementById('testDataContainer');
                const testDataDiv = document.createElement('div');
                testDataDiv.className = 'test-data-input';
                
                // Get sample value for common variables
                const sampleValues = {
                    'consumerName': 'John Doe',
                    'productName': 'TechWayFit Professional',
                    'licenseKey': 'TWF-12345-ABCDE-67890',
                    'expirationDate': '2024-12-31',
                    'companyName': 'TechWayFit Solutions',
                    'supportEmail': 'support@techwayfit.com'
                };
                
                testDataDiv.innerHTML = `
                    <div class="row g-2">
                        <div class="col-md-4">
                            <label class="form-label small">Variable Name</label>
                            <input name="TestData[${testDataCounter}].Key" value="${variableName}" 
                                   class="form-control form-control-sm" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label small">Test Value</label>
                            <input name="TestData[${testDataCounter}].Value" value="${sampleValues[variableName] || ''}"
                                   class="form-control form-control-sm" 
                                   placeholder="Enter test value for {{${variableName}}}">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small">&nbsp;</label>
                            <button type="button" class="btn btn-outline-danger btn-sm d-block" 
                                    onclick="removeTestData(this)">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                `;
                
                container.appendChild(testDataDiv);
                testDataCounter++;
                
                document.getElementById('noTestData').classList.add('d-none');
            }
        }

        function removeTestData(button) {
            button.closest('.test-data-input').remove();
            
            const container = document.getElementById('testDataContainer');
            if (!container.children.length) {
                document.getElementById('noTestData').classList.remove('d-none');
            }
        }

        function loadSampleData() {
            if (confirm('This will replace all current test data with sample data. Continue?')) {
                // Clear existing data
                document.getElementById('testDataContainer').innerHTML = '';
                testDataCounter = 0;
                
                // Add sample data
                const sampleData = [
                    { key: 'consumerName', value: 'John Doe' },
                    { key: 'productName', value: 'TechWayFit Professional' },
                    { key: 'licenseKey', value: 'TWF-12345-ABCDE-67890' },
                    { key: 'expirationDate', value: '2024-12-31' },
                    { key: 'companyName', value: 'TechWayFit Solutions' }
                ];
                
                sampleData.forEach(data => {
                    addCommonVariable(data.key);
                });
            }
        }

        function resetTestData() {
            if (confirm('This will clear all test data. Continue?')) {
                document.getElementById('testDataContainer').innerHTML = '';
                document.getElementById('noTestData').classList.remove('d-none');
                testDataCounter = 0;
            }
        }

        function previewRendered() {
            // TODO: Implement template preview with test data
            alert('Template preview with test data will be implemented in a future update.');
        }

        // Auto-fill current user email
        document.addEventListener('DOMContentLoaded', function() {            const testRecipient = document.getElementById('TestRecipient');
            if (!testRecipient.value) {
                testRecipient.value = '@(User.Identity?.Name ?? "")' || '';
            }
        });
    </script>
}
