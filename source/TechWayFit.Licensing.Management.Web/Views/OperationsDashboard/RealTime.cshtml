@{
    ViewData["Title"] = "Real-time Monitoring";
    Layout = "~/Views/Shared/_LicenseHubLayout.cshtml";
}

<div class="container-fluid py-3">
    <!-- Header Section -->
    <div class="header mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="mb-1">Real-time Monitoring</h2>
                <p class="text-muted mb-0">Live system performance and activity monitoring.</p>
            </div>
            <div class="d-flex gap-2">
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i>Back to Dashboard
                </a>
                <button class="btn btn-outline-success" id="toggleMonitoring">
                    <i class="fas fa-play me-1"></i>Start Monitoring
                </button>
            </div>
        </div>
    </div>

    <!-- Real-time Status Cards -->
    <div class="row g-2 mb-3">
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card stats-card-success">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-eye"></i>
                    </div>
                    <div class="stats-number" id="activeUsers">--</div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Active Users</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card stats-card-info">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-globe"></i>
                    </div>
                    <div class="stats-number" id="requestsPerMinute">--</div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Requests/Min</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card stats-card-warning">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stats-number" id="avgResponseTime">-- ms</div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Avg Response Time</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card stats-card-danger">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="stats-number" id="errorsPerMinute">--</div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Errors/Min</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Live Activity Feed -->
    <div class="row g-3 mb-3">
        <div class="col-md-6">
            <div class="sidebar-section">
                <div class="section-header">
                    <h5><i class="fas fa-stream me-2"></i>Live Activity Feed</h5>
                    <span class="badge bg-secondary" id="connectionStatus">Disconnected</span>
                </div>
                <div class="section-content">
                    <div id="activityFeed" class="border rounded p-3" style="height: 400px; overflow-y: auto; background-color: #f8f9fa;">
                        <div class="text-center text-muted py-5">
                            <i class="fas fa-satellite-dish fa-2x mb-3"></i>
                            <p>Click "Start Monitoring" to begin real-time activity tracking</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="sidebar-section">
                <div class="section-header">
                    <h5><i class="fas fa-chart-line me-2"></i>Performance Chart</h5>
                </div>
                <div class="section-content">
                    <canvas id="performanceChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- System Resources -->
    <div class="row g-3 mb-3">
        <div class="col-md-4">
            <div class="sidebar-section">
                <div class="section-header">
                    <h5><i class="fas fa-microchip me-2"></i>CPU Usage</h5>
                </div>
                <div class="section-content">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <div class="progress mb-2" style="height: 25px;">
                                <div class="progress-bar bg-info" id="cpuProgressBar" style="width: 0%">
                                    <span id="cpuUsage">0%</span>
                                </div>
                            </div>
                        </div>
                        <div class="ms-3">
                            <i class="fas fa-microchip fa-2x text-info"></i>
                        </div>
                    </div>
                    <small class="text-muted">Current CPU utilization</small>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="sidebar-section">
                <div class="section-header">
                    <h5><i class="fas fa-memory me-2"></i>Memory Usage</h5>
                </div>
                <div class="section-content">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <div class="progress mb-2" style="height: 25px;">
                                <div class="progress-bar bg-warning" id="memoryProgressBar" style="width: 0%">
                                    <span id="memoryUsage">0 MB</span>
                                </div>
                            </div>
                        </div>
                        <div class="ms-3">
                            <i class="fas fa-memory fa-2x text-warning"></i>
                        </div>
                    </div>
                    <small class="text-muted">Current memory utilization</small>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="sidebar-section">
                <div class="section-header">
                    <h5><i class="fas fa-database me-2"></i>Database</h5>
                </div>
                <div class="section-content">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <div class="text-center">
                                <div class="h4 mb-2" id="dbConnections">--</div>
                                <div class="fw-bold">Active Connections</div>
                            </div>
                        </div>
                        <div class="ms-3">
                            <i class="fas fa-database fa-2x text-primary"></i>
                        </div>
                    </div>
                    <small class="text-muted">Current database connections</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Errors -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="sidebar-section">
                <div class="section-header">
                    <h5><i class="fas fa-exclamation-triangle me-2"></i>Recent Errors</h5>
                </div>
                <div class="section-content">
                    <div class="table-responsive">
                        <table class="table table-striped table-sm">
                            <thead class="table-dark">
                                <tr>
                                    <th>Time</th>
                                    <th>Type</th>
                                    <th>Source</th>
                                    <th>Message</th>
                                    <th>User</th>
                                </tr>
                            </thead>
                            <tbody id="recentErrorsTable">
                                <tr>
                                    <td colspan="5" class="text-center text-muted py-3">
                                        No recent errors to display
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let isMonitoring = false;
        let monitoringInterval;
        let performanceChart;
        let performanceData = {
            labels: [],
            datasets: [{
                label: 'Response Time (ms)',
                data: [],
                borderColor: 'rgb(75, 192, 192)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                tension: 0.1
            }]
        };

        // Initialize chart
        const ctx = document.getElementById('performanceChart').getContext('2d');
        performanceChart = new Chart(ctx, {
            type: 'line',
            data: performanceData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Response Time (ms)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    }
                }
            }
        });

        // Toggle monitoring
        document.getElementById('toggleMonitoring').addEventListener('click', function() {
            if (isMonitoring) {
                stopMonitoring();
            } else {
                startMonitoring();
            }
        });

        function startMonitoring() {
            isMonitoring = true;
            document.getElementById('toggleMonitoring').innerHTML = '<i class="fas fa-stop me-1"></i>Stop Monitoring';
            document.getElementById('toggleMonitoring').className = 'btn btn-outline-danger';
            document.getElementById('connectionStatus').innerHTML = 'Connected';
            document.getElementById('connectionStatus').className = 'badge bg-success';
            
            // Clear activity feed
            document.getElementById('activityFeed').innerHTML = '';
            
            // Start simulated monitoring
            monitoringInterval = setInterval(updateRealTimeData, 2000);
            
            addActivityLog('System', 'Real-time monitoring started', 'success');
        }

        function stopMonitoring() {
            isMonitoring = false;
            document.getElementById('toggleMonitoring').innerHTML = '<i class="fas fa-play me-1"></i>Start Monitoring';
            document.getElementById('toggleMonitoring').className = 'btn btn-outline-success';
            document.getElementById('connectionStatus').innerHTML = 'Disconnected';
            document.getElementById('connectionStatus').className = 'badge bg-secondary';
            
            if (monitoringInterval) {
                clearInterval(monitoringInterval);
            }
            
            addActivityLog('System', 'Real-time monitoring stopped', 'warning');
        }

        function updateRealTimeData() {
            // Simulate real-time data updates
            const now = new Date();
            const timeLabel = now.toLocaleTimeString();
            
            // Update metrics with simulated data
            document.getElementById('activeUsers').textContent = Math.floor(Math.random() * 100) + 50;
            document.getElementById('requestsPerMinute').textContent = Math.floor(Math.random() * 500) + 100;
            
            const responseTime = Math.floor(Math.random() * 300) + 100;
            document.getElementById('avgResponseTime').textContent = responseTime + ' ms';
            
            const errorsPerMin = Math.floor(Math.random() * 5);
            document.getElementById('errorsPerMinute').textContent = errorsPerMin;
            
            // Update CPU usage
            const cpuUsage = Math.floor(Math.random() * 40) + 30;
            document.getElementById('cpuUsage').textContent = cpuUsage + '%';
            document.getElementById('cpuProgressBar').style.width = cpuUsage + '%';
            
            // Update memory usage
            const memoryUsage = Math.floor(Math.random() * 500) + 200;
            document.getElementById('memoryUsage').textContent = memoryUsage + ' MB';
            const memoryPercent = Math.floor(memoryUsage / 10);
            document.getElementById('memoryProgressBar').style.width = memoryPercent + '%';
            
            // Update database connections
            document.getElementById('dbConnections').textContent = Math.floor(Math.random() * 20) + 5;
            
            // Update performance chart
            performanceData.labels.push(timeLabel);
            performanceData.datasets[0].data.push(responseTime);
            
            // Keep only last 20 data points
            if (performanceData.labels.length > 20) {
                performanceData.labels.shift();
                performanceData.datasets[0].data.shift();
            }
            
            performanceChart.update('none');
            
            // Add random activity logs
            if (Math.random() < 0.7) {
                const activities = [
                    { type: 'Request', message: 'GET /api/licenses - 200 OK', level: 'success' },
                    { type: 'Request', message: 'POST /api/products - 201 Created', level: 'success' },
                    { type: 'Request', message: 'GET /dashboard - 200 OK', level: 'info' },
                    { type: 'Database', message: 'Query executed in ' + Math.floor(Math.random() * 50) + 'ms', level: 'info' },
                    { type: 'Cache', message: 'Cache miss for key: licenses_' + Math.floor(Math.random() * 1000), level: 'warning' }
                ];
                
                if (errorsPerMin > 0 && Math.random() < 0.3) {
                    activities.push({ type: 'Error', message: 'Validation error in license creation', level: 'danger' });
                }
                
                const activity = activities[Math.floor(Math.random() * activities.length)];
                addActivityLog(activity.type, activity.message, activity.level);
            }
        }

        function addActivityLog(type, message, level) {
            const activityFeed = document.getElementById('activityFeed');
            const timestamp = new Date().toLocaleTimeString();
            
            const logEntry = document.createElement('div');
            logEntry.className = 'border-bottom py-2';
            logEntry.innerHTML = `
                <div class="d-flex justify-content-between align-items-start">
                    <div class="flex-grow-1">
                        <span class="badge bg-${level === 'success' ? 'success' : level === 'warning' ? 'warning' : level === 'danger' ? 'danger' : 'info'} me-2">${type}</span>
                        <span class="small">${message}</span>
                    </div>
                    <small class="text-muted">${timestamp}</small>
                </div>
            `;
            
            activityFeed.insertBefore(logEntry, activityFeed.firstChild);
            
            // Keep only last 50 entries
            while (activityFeed.children.length > 50) {
                activityFeed.removeChild(activityFeed.lastChild);
            }
        }

        // Auto-scroll activity feed
        function scrollActivityFeed() {
            const activityFeed = document.getElementById('activityFeed');
            if (activityFeed.children.length > 0) {
                activityFeed.scrollTop = 0;
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // You could start monitoring automatically if needed
            // startMonitoring();
        });

        // Clean up when leaving page
        window.addEventListener('beforeunload', function() {
            if (isMonitoring) {
                stopMonitoring();
            }
        });
    </script>
}
