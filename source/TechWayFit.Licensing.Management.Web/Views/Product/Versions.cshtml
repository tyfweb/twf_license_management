@model TechWayFit.Licensing.Management.Web.ViewModels.Product.ProductEnhancedEditViewModel

@{
    ViewData["Title"] = "Product Versions - " + Model.ProductName;
    ViewData["Description"] = "Manage product versions, release notes, and version compatibility";
}

@section Styles {
    <link rel="stylesheet" href="~/css/product-management.css" />
    <link rel="stylesheet" href="~/css/version-management.css" />
    <style>
        /* Timeline Styling */
        .timeline {
            position: relative;
            padding: 0;
            margin-top: 1rem;
        }

        .timeline::before {
            content: '';
            position: absolute;
            top: 0;
            bottom: 0;
            left: 24px;
            width: 2px;
            background: var(--border-color);
            z-index: 0;
        }

        .timeline-item {
            position: relative;
            padding-left: 3.5rem;
            padding-bottom: 2rem;
        }

        .timeline-item:last-child {
            padding-bottom: 0;
        }

        .timeline-marker {
            position: absolute;
            left: 0;
            top: 0;
            z-index: 1;
        }

        .timeline-marker-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.25rem;
            box-shadow: var(--shadow-sm);
            background-color: var(--gray-600);
        }

        .timeline-marker-icon.approved {
            background-color: var(--success-color);
        }
        
        .timeline-marker-icon.stable {
            background-color: var(--info-color);
        }
        
        .timeline-marker-icon.beta {
            background-color: var(--warning-color);
        }
    </style>
}

<div class="container-fluid py-3">
    <!-- Header Section -->
    <div class="header mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="mb-1">Product Versions</h2>
                <p class="text-muted mb-0">Manage versions, release notes and compatibility for @Model.ProductName.</p>
            </div>
            <div class="btn-group" role="group">
                <a href="@Url.Action("Details", new { id = Model.ProductId })" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i>Back to Product
                </a>
                <a href="@Url.Action("Tiers", new { id = Model.ProductId })" class="btn btn-outline-primary">
                    <i class="fas fa-layer-group me-1"></i>Tiers
                </a>
                <a href="@Url.Action("Features", new { id = Model.ProductId })" class="btn btn-outline-primary">
                    <i class="fas fa-star me-1"></i>Features
                </a>
            </div>
        </div>
    </div>

    <!-- Product Info Card -->
    <div class="row g-2 mb-3">
        <div class="col-12">
            <div class="sidebar-section">
                <div class="section-header">
                    <div class="d-flex align-items-center">
                        <div class="product-icon me-3" style="width: 40px; height: 40px;">
                            <i class="fas fa-cube text-primary"></i>
                        </div>
                        <div>
                            <h5 class="mb-0">@Model.ProductName</h5>
                            <small class="text-muted">@Model.ProductType â€¢ Current Version @Model.Version</small>
                        </div>
                        <div class="ms-auto">
                            @if (Model.IsActive)
                            {
                                <span class="badge bg-success me-2">Active</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary me-2">Inactive</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row g-2 mb-3">
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-code-branch"></i>
                    </div>
                    <div class="stats-number"><span id="versions-count">0</span></div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Total Versions</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card stats-card-success">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stats-number"><span id="stable-versions-count">0</span></div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Stable Releases</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card stats-card-info">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-flask"></i>
                    </div>
                    <div class="stats-number"><span id="beta-versions-count">0</span></div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Beta Versions</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card stats-card-warning">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-calendar-alt"></i>
                    </div>
                    <div class="stats-number"><span id="last-release-days">0</span></div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Days Since Last Release</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="sidebar-section">
                <div class="section-header">
                    <h5><i class="fas fa-bolt me-2"></i>Quick Actions</h5>
                </div>
                <div class="section-content">
                    <div class="row g-2">
                        <div class="col-sm-6 col-lg-3">
                            <button type="button" class="btn btn-outline-primary w-100" onclick="showAddVersionModal()">
                                <i class="fas fa-plus me-2"></i>Add Version
                            </button>
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <button type="button" class="btn btn-outline-secondary w-100" onclick="importVersionsFromJson()">
                                <i class="fas fa-upload me-2"></i>Import Versions
                            </button>
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <button type="button" class="btn btn-outline-info w-100" onclick="markVersionAsCurrent()">
                                <i class="fas fa-check-circle me-2"></i>Set Current Version
                            </button>
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <button type="button" class="btn btn-outline-success w-100" onclick="exportToJson()">
                                <i class="fas fa-download me-2"></i>Export to JSON
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Alert container -->
    <div id="alert-container" class="mb-3"></div>

    <!-- Versions Management -->
    <div class="row">
        <div class="col-12">
            <div class="edit-section">
                <div class="section-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-code-branch me-2"></i>Product Versions
                        </h5>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-secondary btn-sm active" id="timelineViewBtn" onclick="switchView('timeline')">
                                <i class="fas fa-stream me-1"></i>Timeline
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" id="cardViewBtn" onclick="switchView('card')">
                                <i class="fas fa-th-large me-1"></i>Cards
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" id="listViewBtn" onclick="switchView('list')">
                                <i class="fas fa-list me-1"></i>List
                            </button>
                        </div>
                    </div>
                </div>
                <div class="section-content">
                    <!-- Versions content -->
                    <div id="versions-content">
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3 text-muted">Loading product versions...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Version Modal -->
<div class="modal fade" id="versionModal" tabindex="-1" aria-labelledby="versionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="versionModalLabel">Add Product Version</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="versionForm">
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="ProductId" value="@Model.ProductId" />
                    <input type="hidden" name="VersionId" id="versionId" />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="versionNumber" class="form-label">Version Number <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="versionNumber" name="VersionNumber" required 
                                       placeholder="e.g., 1.0.0" pattern="^\d+\.\d+\.\d+$">
                                <div class="form-text">Format: Major.Minor.Patch (e.g., 1.0.0)</div>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="versionName" class="form-label">Version Name</label>
                                <input type="text" class="form-control" id="versionName" name="VersionName" 
                                       placeholder="e.g., Initial Release, Feature Update">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="releaseDate" class="form-label">Release Date</label>
                                <input type="date" class="form-control" id="releaseDate" name="ReleaseDate">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="endOfLifeDate" class="form-label">End of Life Date</label>
                                <input type="date" class="form-control" id="endOfLifeDate" name="EndOfLifeDate">
                                <div class="form-text">Optional: when this version will no longer be supported</div>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="releaseNotes" class="form-label">Release Notes</label>
                        <textarea class="form-control" id="releaseNotes" name="ReleaseNotes" rows="4" 
                                  placeholder="Describe what's new in this version..."></textarea>
                        <div class="invalid-feedback"></div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="isStable" name="IsStable" checked>
                                <label class="form-check-label" for="isStable">
                                    Stable Release
                                </label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="isActive" name="IsActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Active
                                </label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="isApproved" name="IsApproved">
                                <label class="form-check-label" for="isApproved">
                                    Approved
                                </label>
                                <div class="form-text small">Approved versions cannot be deleted</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="versionSubmitBtn">Add Version</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Import Versions Modal -->
<div class="modal fade" id="importModal" tabindex="-1" aria-labelledby="importModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="importModalLabel">Import Versions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="importJson" class="form-label">Paste JSON or upload file</label>
                    <textarea class="form-control" id="importJson" rows="10" placeholder='[{"versionNumber": "1.0.0", "versionName": "Initial Release", "releaseDate": "2023-01-01"}]'></textarea>
                </div>
                <div class="mb-3">
                    <label for="importFile" class="form-label">Or upload a JSON file</label>
                    <input type="file" class="form-control" id="importFile" accept=".json">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="importBtn">Import Versions</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Load versions on page load
            loadProductVersions();
            
            // Handle version form submission
            $('#versionForm').on('submit', function(e) {
                e.preventDefault();
                saveVersion();
            });
            
            // Set default release date to today
            $('#releaseDate').val(new Date().toISOString().split('T')[0]);
            
            // Initialize view based on saved preference
            const savedView = localStorage.getItem('versionViewType') || 'timeline';
            switchView(savedView);
            
            // Handle stable checkbox toggling
            $('#isStable').on('change', function() {
                if ($(this).is(':checked')) {
                    $('#isApproved').prop('disabled', false);
                } else {
                    $('#isApproved').prop('checked', false).prop('disabled', true);
                }
            });
        });

        function loadProductVersions() {
            $('#versions-content').html('<div class="text-center py-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-3 text-muted">Loading product versions...</p></div>');
            
            $.get('@Url.Action("GetProductVersions")', { productId: '@Model.ProductId' })
                .done(function(response) {
                    if (response.success && response.data) {
                        var viewType = localStorage.getItem('versionViewType') || 'timeline';
                        switch(viewType) {
                            case 'timeline':
                                var html = renderProductVersionsTimeline(response.data);
                                break;
                            case 'card':
                                var html = renderProductVersionsCard(response.data);
                                break;
                            case 'list':
                                var html = renderProductVersionsList(response.data);
                                break;
                            default:
                                var html = renderProductVersionsTimeline(response.data);
                        }
                        
                        $('#versions-content').html(html);
                        updateVersionStats(response.data);
                    } else {
                        $('#versions-content').html('<div class="text-center py-5"><div class="text-muted"><i class="fas fa-code-branch fa-3x mb-3"></i><p>No product versions found.</p><p><small>Click "Add Version" to create your first version.</small></p></div></div>');
                        $('#versions-count').text(0);
                        $('#stable-versions-count').text(0);
                        $('#beta-versions-count').text(0);
                        $('#last-release-days').text(0);
                    }
                })
                .fail(function(xhr, status, error) {
                    console.error('Failed to load product versions:', error);
                    $('#versions-content').html('<div class="alert alert-danger"><i class="fas fa-exclamation-triangle me-2"></i>Failed to load product versions. Please try again.</div>');
                    $('#versions-count').text(0);
                });
        }
        
        function updateVersionStats(versions) {
            if (!versions || versions.length === 0) {
                $('#versions-count').text(0);
                $('#stable-versions-count').text(0);
                $('#beta-versions-count').text(0);
                $('#last-release-days').text(0);
                return;
            }
            
            // Total versions
            $('#versions-count').text(versions.length);
            
            // Stable versions
            const stableVersions = versions.filter(v => v.IsStable);
            $('#stable-versions-count').text(stableVersions.length);
            
            // Beta versions
            const betaVersions = versions.filter(v => !v.IsStable);
            $('#beta-versions-count').text(betaVersions.length);
            
            // Days since last release
            let lastReleaseDate = null;
            versions.forEach(function(version) {
                if (version.ReleaseDate) {
                    const releaseDate = new Date(version.ReleaseDate);
                    if (!lastReleaseDate || releaseDate > lastReleaseDate) {
                        lastReleaseDate = releaseDate;
                    }
                }
            });
            
            if (lastReleaseDate) {
                const today = new Date();
                const diffTime = Math.abs(today - lastReleaseDate);
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                $('#last-release-days').text(diffDays);
            } else {
                $('#last-release-days').text('N/A');
            }
        }

        function renderProductVersionsTimeline(versions) {
            if (!versions || versions.length === 0) {
                return '<div class="text-center py-5"><div class="text-muted"><i class="fas fa-code-branch fa-3x mb-3"></i><p>No product versions found.</p><p><small>Click "Add Version" to create your first version.</small></p></div></div>';
            }

            // Sort versions by release date (newest first)
            versions.sort(function(a, b) {
                const dateA = a.ReleaseDate ? new Date(a.ReleaseDate) : new Date(0);
                const dateB = b.ReleaseDate ? new Date(b.ReleaseDate) : new Date(0);
                return dateB - dateA;
            });

            var html = '<div class="timeline">';
            versions.forEach(function(version, index) {
                html += '<div class="timeline-item">';
                html += '  <div class="timeline-marker">';
                
                // Different icon styles based on version status
                let markerClass = 'timeline-marker-icon';
                if (version.IsApproved && version.IsStable) {
                    markerClass += ' approved';
                    html += '    <div class="' + markerClass + '"><i class="fas fa-check"></i></div>';
                } else if (version.IsStable) {
                    markerClass += ' stable';
                    html += '    <div class="' + markerClass + '"><i class="fas fa-code-branch"></i></div>';
                } else {
                    markerClass += ' beta';
                    html += '    <div class="' + markerClass + '"><i class="fas fa-flask"></i></div>';
                }
                
                html += '  </div>';
                html += '  <div class="timeline-content">';
                html += '    <div class="card version-card">';
                html += '      <div class="card-body">';
                html += '        <div class="d-flex justify-content-between align-items-start mb-2">';
                html += '          <div>';
                html += '            <div class="version-label mb-1">Version ' + version.VersionNumber + '</div>';
                if (version.VersionName) {
                    html += '            <div class="text-primary fw-medium">' + version.VersionName + '</div>';
                }
                
                if (version.ReleaseDate) {
                    html += '            <div class="release-date mt-1"><i class="fas fa-calendar-day me-1"></i>' + new Date(version.ReleaseDate).toLocaleDateString() + '</div>';
                }
                
                html += '          </div>';
                html += '          <div class="dropdown">';
                html += '            <button class="btn btn-outline-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">';
                html += '              <i class="fas fa-ellipsis-v"></i>';
                html += '            </button>';
                html += '            <ul class="dropdown-menu dropdown-menu-end">';
                html += '              <li><a class="dropdown-item" href="#" onclick="editVersion(\'' + version.Id + '\')"><i class="fas fa-edit me-2"></i>Edit</a></li>';
                
                // Add Set Current option
                html += '              <li><a class="dropdown-item" href="#" onclick="markCurrentVersion(\'' + version.Id + '\')"><i class="fas fa-check-circle me-2"></i>Set as Current</a></li>';
                
                if (!version.IsApproved) {
                    html += '              <li><a class="dropdown-item" href="#" onclick="approveVersion(\'' + version.Id + '\')"><i class="fas fa-stamp me-2"></i>Approve</a></li>';
                }
                
                if (version.CanDelete) {
                    html += '              <li><hr class="dropdown-divider"></li>';
                    html += '              <li><a class="dropdown-item text-danger" href="#" onclick="deleteVersion(\'' + version.Id + '\')"><i class="fas fa-trash me-2"></i>Delete</a></li>';
                }
                
                html += '            </ul>';
                html += '          </div>';
                html += '        </div>';
                
                html += '        <div class="version-badges mb-2">';
                if (version.IsStable) {
                    html += '          <span class="badge bg-success me-1">Stable</span>';
                } else {
                    html += '          <span class="badge bg-warning me-1">Beta</span>';
                }
                
                if (version.IsApproved) {
                    html += '          <span class="badge bg-info me-1">Approved</span>';
                }
                
                if (version.IsActive) {
                    html += '          <span class="badge bg-primary me-1">Active</span>';
                } else {
                    html += '          <span class="badge bg-secondary me-1">Inactive</span>';
                }
                html += '        </div>';
                
                if (version.ReleaseNotes) {
                    html += '        <div class="border-top pt-2 mt-2">';
                    html += '          <div class="small text-muted mb-1"><i class="fas fa-clipboard-list me-1"></i>Release Notes:</div>';
                    html += '          <p class="mb-0">' + version.ReleaseNotes + '</p>';
                    html += '        </div>';
                }
                
                html += '      </div>';
                html += '    </div>';
                html += '  </div>';
                html += '</div>';
            });
            html += '</div>';
            return html;
        }
        
        function renderProductVersionsCard(versions) {
            if (!versions || versions.length === 0) {
                return '<div class="text-center py-5"><div class="text-muted"><i class="fas fa-code-branch fa-3x mb-3"></i><p>No product versions found.</p><p><small>Click "Add Version" to create your first version.</small></p></div></div>';
            }

            // Sort versions by release date (newest first)
            versions.sort(function(a, b) {
                const dateA = a.ReleaseDate ? new Date(a.ReleaseDate) : new Date(0);
                const dateB = b.ReleaseDate ? new Date(b.ReleaseDate) : new Date(0);
                return dateB - dateA;
            });
            
            var html = '<div class="version-card-grid">';
            
            versions.forEach(function(version) {
                html += '<div class="card version-card h-100">';
                html += '  <div class="card-body">';
                html += '    <div class="d-flex justify-content-between align-items-start mb-3">';
                
                // Left side with icon
                html += '      <div class="d-flex align-items-start">';
                html += '        <div class="version-icon me-3">';
                
                if (version.IsApproved && version.IsStable) {
                    html += '          <i class="fas fa-check text-success"></i>';
                } else if (version.IsStable) {
                    html += '          <i class="fas fa-code-branch text-info"></i>';
                } else {
                    html += '          <i class="fas fa-flask text-warning"></i>';
                }
                
                html += '        </div>';
                html += '        <div>';
                html += '          <h6 class="mb-0">Version ' + version.VersionNumber + '</h6>';
                if (version.VersionName) {
                    html += '          <div class="text-primary small">' + version.VersionName + '</div>';
                }
                html += '        </div>';
                html += '      </div>';
                
                // Dropdown menu
                html += '      <div class="dropdown">';
                html += '        <button class="btn btn-outline-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">';
                html += '          <i class="fas fa-ellipsis-v"></i>';
                html += '        </button>';
                html += '        <ul class="dropdown-menu dropdown-menu-end">';
                html += '          <li><a class="dropdown-item" href="#" onclick="editVersion(\'' + version.Id + '\')"><i class="fas fa-edit me-2"></i>Edit</a></li>';
                
                // Add Set Current option
                html += '          <li><a class="dropdown-item" href="#" onclick="markCurrentVersion(\'' + version.Id + '\')"><i class="fas fa-check-circle me-2"></i>Set as Current</a></li>';
                
                if (!version.IsApproved) {
                    html += '          <li><a class="dropdown-item" href="#" onclick="approveVersion(\'' + version.Id + '\')"><i class="fas fa-stamp me-2"></i>Approve</a></li>';
                }
                
                if (version.CanDelete) {
                    html += '          <li><hr class="dropdown-divider"></li>';
                    html += '          <li><a class="dropdown-item text-danger" href="#" onclick="deleteVersion(\'' + version.Id + '\')"><i class="fas fa-trash me-2"></i>Delete</a></li>';
                }
                html += '        </ul>';
                html += '      </div>';
                html += '    </div>';
                
                // Badges
                html += '    <div class="version-badges mb-3">';
                if (version.IsStable) {
                    html += '      <span class="badge bg-success me-1">Stable</span>';
                } else {
                    html += '      <span class="badge bg-warning me-1">Beta</span>';
                }
                
                if (version.IsApproved) {
                    html += '      <span class="badge bg-info me-1">Approved</span>';
                }
                
                if (version.IsActive) {
                    html += '      <span class="badge bg-primary me-1">Active</span>';
                } else {
                    html += '      <span class="badge bg-secondary me-1">Inactive</span>';
                }
                html += '    </div>';
                
                // Release date
                if (version.ReleaseDate) {
                    html += '    <div class="small text-muted mb-2"><i class="fas fa-calendar-day me-1"></i>Released: ' + new Date(version.ReleaseDate).toLocaleDateString() + '</div>';
                }
                
                // Release notes (truncated)
                if (version.ReleaseNotes) {
                    html += '    <div class="small">';
                    html += '      <div class="text-truncate-3">' + version.ReleaseNotes + '</div>';
                    html += '    </div>';
                }
                
                html += '  </div>';
                html += '</div>';
            });
            
            html += '</div>';
            return html;
        }
        
        function renderProductVersionsList(versions) {
            if (!versions || versions.length === 0) {
                return '<div class="text-center py-5"><div class="text-muted"><i class="fas fa-code-branch fa-3x mb-3"></i><p>No product versions found.</p><p><small>Click "Add Version" to create your first version.</small></p></div></div>';
            }
            
            var html = '<div class="table-responsive">';
            html += '<table class="table table-hover">';
            html += '<thead class="table-light">';
            html += '<tr>';
            html += '<th>Version</th>';
            html += '<th>Name</th>';
            html += '<th>Release Date</th>';
            html += '<th>Status</th>';
            html += '<th>Actions</th>';
            html += '</tr>';
            html += '</thead>';
            html += '<tbody>';
            
            // Sort versions by release date (newest first)
            versions.sort(function(a, b) {
                const dateA = a.ReleaseDate ? new Date(a.ReleaseDate) : new Date(0);
                const dateB = b.ReleaseDate ? new Date(b.ReleaseDate) : new Date(0);
                return dateB - dateA;
            });
            
            versions.forEach(function(version) {
                html += '<tr>';
                
                // Version number with icon
                html += '<td>';
                html += '<div class="d-flex align-items-center">';
                html += '<div class="version-icon me-2" style="width: 30px; height: 30px;">';
                
                if (version.IsApproved && version.IsStable) {
                    html += '<i class="fas fa-check text-success"></i>';
                } else if (version.IsStable) {
                    html += '<i class="fas fa-code-branch text-info"></i>';
                } else {
                    html += '<i class="fas fa-flask text-warning"></i>';
                }
                
                html += '</div>';
                html += '<div class="fw-semibold">' + version.VersionNumber + '</div>';
                html += '</div>';
                html += '</td>';
                
                // Version name
                html += '<td>' + (version.VersionName || '-') + '</td>';
                
                // Release date
                html += '<td>';
                if (version.ReleaseDate) {
                    html += new Date(version.ReleaseDate).toLocaleDateString();
                } else {
                    html += '-';
                }
                html += '</td>';
                
                // Status badges
                html += '<td>';
                html += '<div class="d-flex flex-wrap gap-1">';
                if (version.IsStable) {
                    html += '<span class="badge bg-success">Stable</span>';
                } else {
                    html += '<span class="badge bg-warning">Beta</span>';
                }
                
                if (version.IsApproved) {
                    html += '<span class="badge bg-info">Approved</span>';
                }
                
                if (version.IsActive) {
                    html += '<span class="badge bg-primary">Active</span>';
                } else {
                    html += '<span class="badge bg-secondary">Inactive</span>';
                }
                html += '</div>';
                html += '</td>';
                
                // Actions
                html += '<td>';
                html += '<div class="btn-group btn-group-sm" role="group">';
                html += '<button type="button" class="btn btn-outline-primary" onclick="editVersion(\'' + version.Id + '\')"><i class="fas fa-edit"></i></button>';
                
                if (!version.IsApproved) {
                    html += '<button type="button" class="btn btn-outline-info" onclick="approveVersion(\'' + version.Id + '\')"><i class="fas fa-stamp"></i></button>';
                }
                
                html += '<button type="button" class="btn btn-outline-success" onclick="markCurrentVersion(\'' + version.Id + '\')"><i class="fas fa-check-circle"></i></button>';
                
                if (version.CanDelete) {
                    html += '<button type="button" class="btn btn-outline-danger" onclick="deleteVersion(\'' + version.Id + '\')"><i class="fas fa-trash"></i></button>';
                }
                
                html += '</div>';
                html += '</td>';
                
                html += '</tr>';
            });
            
            html += '</tbody>';
            html += '</table>';
            html += '</div>';
            
            return html;
        }
        
        function switchView(viewType) {
            const timelineViewBtn = document.getElementById('timelineViewBtn');
            const cardViewBtn = document.getElementById('cardViewBtn');
            const listViewBtn = document.getElementById('listViewBtn');

            timelineViewBtn.classList.remove('active');
            cardViewBtn.classList.remove('active');
            listViewBtn.classList.remove('active');

            switch(viewType) {
                case 'timeline':
                    timelineViewBtn.classList.add('active');
                    break;
                case 'card':
                    cardViewBtn.classList.add('active');
                    break;
                case 'list':
                    listViewBtn.classList.add('active');
                    break;
                default:
                    timelineViewBtn.classList.add('active');
                    viewType = 'timeline';
            }
            
            localStorage.setItem('versionViewType', viewType);
            loadProductVersions();
        }

        function showAddVersionModal() {
            // Reset form and modal
            $('#versionForm')[0].reset();
            $('#versionId').val('');
            $('#versionModalLabel').text('Add Product Version');
            $('#versionSubmitBtn').text('Add Version');
            clearValidationErrors();
            
            // Set default date to today
            $('#releaseDate').val(new Date().toISOString().split('T')[0]);
            
            // Show modal
            var modal = new bootstrap.Modal(document.getElementById('versionModal'));
            modal.show();
        }

        function editVersion(versionId) {
            // Get version data
            $.get('@Url.Action("GetProductVersion")', { 
                productId: '@Model.ProductId', 
                versionId: versionId 
            })
            .done(function(response) {
                if (response.success && response.data) {
                    var version = response.data;
                    
                    // Populate form
                    $('#versionId').val(version.VersionId);
                    $('#versionNumber').val(version.VersionNumber);
                    $('#versionName').val(version.VersionName);
                    $('#releaseNotes').val(version.Description || version.ReleaseNotes);
                    
                    if (version.ReleaseDate) {
                        $('#releaseDate').val(new Date(version.ReleaseDate).toISOString().split('T')[0]);
                    }
                    
                    if (version.EndOfLifeDate) {
                        $('#endOfLifeDate').val(new Date(version.EndOfLifeDate).toISOString().split('T')[0]);
                    }
                    
                    $('#isStable').prop('checked', version.IsStable);
                    $('#isActive').prop('checked', version.IsActive);
                    $('#isApproved').prop('checked', version.IsApproved);
                    
                    // Handle stable checkbox state
                    if (!version.IsStable) {
                        $('#isApproved').prop('checked', false).prop('disabled', true);
                    } else {
                        $('#isApproved').prop('disabled', false);
                    }
                    
                    // Update modal title and button
                    $('#versionModalLabel').text('Edit Product Version');
                    $('#versionSubmitBtn').text('Update Version');
                    clearValidationErrors();
                    
                    // Show modal
                    var modal = new bootstrap.Modal(document.getElementById('versionModal'));
                    modal.show();
                } else {
                    showAlert('Error loading version data', 'danger');
                }
            })
            .fail(function() {
                showAlert('Error loading version data', 'danger');
            });
        }

        function deleteVersion(versionId) {
            if (confirm('Are you sure you want to delete this version? This action cannot be undone.')) {
                var formData = new FormData();
                formData.append('productId', '@Model.ProductId');
                formData.append('versionId', versionId);
                formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());

                $.ajax({
                    url: '@Url.Action("DeleteProductVersion")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success) {
                            showAlert(response.message, 'success');
                            loadProductVersions(); // Reload the versions list
                        } else {
                            showAlert(response.message, 'danger');
                        }
                    },
                    error: function() {
                        showAlert('Error deleting version', 'danger');
                    }
                });
            }
        }
        
        function approveVersion(versionId) {
            if (confirm('Are you sure you want to approve this version? Approved versions cannot be deleted.')) {
                var formData = new FormData();
                formData.append('productId', '@Model.ProductId');
                formData.append('versionId', versionId);
                formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
                
                $.ajax({
                    url: '@Url.Action("ApproveProductVersion")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success) {
                            showAlert(response.message, 'success');
                            loadProductVersions(); // Reload the versions list
                        } else {
                            showAlert(response.message || 'Error approving version', 'danger');
                        }
                    },
                    error: function() {
                        showAlert('Error approving version', 'danger');
                    }
                });
            }
        }
        
        function markCurrentVersion(versionId) {
            if (confirm('Set this as the current version?')) {
                var formData = new FormData();
                formData.append('productId', '@Model.ProductId');
                formData.append('versionId', versionId);
                formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
                
                $.ajax({
                    url: '@Url.Action("SetCurrentProductVersion")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success) {
                            showAlert(response.message, 'success');
                            loadProductVersions(); // Reload the versions list
                        } else {
                            showAlert(response.message || 'Error setting current version', 'danger');
                        }
                    },
                    error: function() {
                        showAlert('Error setting current version', 'danger');
                    }
                });
            }
        }
        
        function markVersionAsCurrent() {
            $.get('@Url.Action("GetProductVersions")', { productId: '@Model.ProductId' })
                .done(function(response) {
                    if (response.success && response.data && response.data.length > 0) {
                        // Create a dropdown dialog for selecting the current version
                        let html = '<div class="modal fade" id="selectCurrentVersionModal" tabindex="-1" aria-hidden="true">';
                        html += '<div class="modal-dialog modal-sm">';
                        html += '<div class="modal-content">';
                        html += '<div class="modal-header">';
                        html += '<h5 class="modal-title">Set Current Version</h5>';
                        html += '<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>';
                        html += '</div>';
                        html += '<div class="modal-body">';
                        html += '<div class="mb-3">';
                        html += '<label for="currentVersionSelect" class="form-label">Select Version</label>';
                        html += '<select class="form-select" id="currentVersionSelect">';
                        
                        // Sort versions by version number for the dropdown
                        const sortedVersions = [...response.data].sort((a, b) => {
                            // Convert version strings to comparable arrays (e.g., "2.1.0" -> [2, 1, 0])
                            const verA = a.VersionNumber.split('.').map(Number);
                            const verB = b.VersionNumber.split('.').map(Number);
                            
                            // Compare each part of the version
                            for (let i = 0; i < Math.max(verA.length, verB.length); i++) {
                                const partA = verA[i] || 0;
                                const partB = verB[i] || 0;
                                if (partA !== partB) return partB - partA; // Newest first
                            }
                            return 0;
                        });
                        
                        sortedVersions.forEach(version => {
                            html += `<option value="${version.Id}">${version.VersionNumber}${version.VersionName ? ' - ' + version.VersionName : ''}</option>`;
                        });
                        
                        html += '</select>';
                        html += '</div>';
                        html += '</div>';
                        html += '<div class="modal-footer">';
                        html += '<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>';
                        html += '<button type="button" class="btn btn-primary" id="setCurrentVersionBtn">Set as Current</button>';
                        html += '</div>';
                        html += '</div>';
                        html += '</div>';
                        html += '</div>';
                        
                        // Remove any existing modal
                        $('#selectCurrentVersionModal').remove();
                        
                        // Append and show the modal
                        $('body').append(html);
                        const modal = new bootstrap.Modal(document.getElementById('selectCurrentVersionModal'));
                        modal.show();
                        
                        // Handle the button click
                        $('#setCurrentVersionBtn').on('click', function() {
                            const selectedVersionId = $('#currentVersionSelect').val();
                            markCurrentVersion(selectedVersionId);
                            modal.hide();
                        });
                    } else {
                        showAlert('No versions available to set as current', 'warning');
                    }
                })
                .fail(function() {
                    showAlert('Error loading versions', 'danger');
                });
        }

        function saveVersion() {
            var versionId = $('#versionId').val();
            var isEdit = versionId && versionId !== '';
            var url = isEdit ? '@Url.Action("EditProductVersion")' : '@Url.Action("AddProductVersion")';
            
            var formData = new FormData(document.getElementById('versionForm'));
            if (isEdit) {
                formData.append('versionId', versionId);
            }
            formData.append('productId', '@Model.ProductId');
            
            // Map release notes field to Description for the view model
            if (formData.has('ReleaseNotes')) {
                formData.append('Description', formData.get('ReleaseNotes'));
            }

            // Disable submit button
            $('#versionSubmitBtn').prop('disabled', true).text('Saving...');

            $.ajax({
                url: url,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response.success) {
                        showAlert(response.message, 'success');
                        $('#versionModal').modal('hide');
                        loadProductVersions(); // Reload the versions list
                    } else {
                        if (response.errors && response.errors.length > 0) {
                            showValidationErrors(response.errors);
                        } else {
                            showAlert(response.message, 'danger');
                        }
                    }
                },
                error: function() {
                    showAlert('Error saving version', 'danger');
                },
                complete: function() {
                    // Re-enable submit button
                    $('#versionSubmitBtn').prop('disabled', false).text(isEdit ? 'Update Version' : 'Add Version');
                }
            });
        }
        
        function importVersionsFromJson() {
            // Show import modal
            var modal = new bootstrap.Modal(document.getElementById('importModal'));
            modal.show();
            
            // Set up the import button handler
            $('#importBtn').off('click').on('click', function() {
                // Get the JSON data
                const jsonText = $('#importJson').val();
                if (!jsonText.trim()) {
                    showAlert('Please enter JSON data to import', 'warning');
                    return;
                }
                
                let jsonData;
                try {
                    jsonData = JSON.parse(jsonText);
                    if (!Array.isArray(jsonData)) {
                        throw new Error("JSON must be an array of versions");
                    }
                    
                    // Create form data for the import
                    var formData = new FormData();
                    formData.append('productId', '@Model.ProductId');
                    formData.append('versionsJson', jsonText);
                    formData.append('__RequestVerificationToken', $('[name=__RequestVerificationToken]').val());
                    
                    // Disable button during import
                    $('#importBtn').prop('disabled', true).text('Importing...');
                    
                    $.ajax({
                        url: '@Url.Action("ImportProductVersions")',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function(response) {
                            if (response.success) {
                                showAlert(response.message || 'Versions imported successfully', 'success');
                                modal.hide();
                                loadProductVersions(); // Reload versions
                            } else {
                                showAlert(response.message || 'Error importing versions', 'danger');
                            }
                        },
                        error: function() {
                            showAlert('Server error while importing versions', 'danger');
                        },
                        complete: function() {
                            $('#importBtn').prop('disabled', false).text('Import Versions');
                        }
                    });
                } catch (e) {
                    showAlert('Invalid JSON format: ' + e.message, 'danger');
                }
            });
            
            // Handle file upload
            $('#importFile').off('change').on('change', function(e) {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = function(event) {
                    $('#importJson').val(event.target.result);
                };
                reader.readAsText(file);
            });
        }
        
        function exportToJson() {
            $.get('@Url.Action("GetProductVersions")', { productId: '@Model.ProductId' })
                .done(function(response) {
                    if (response.success && response.data) {
                        // Create a JSON string and download it
                        const jsonData = JSON.stringify(response.data, null, 2);
                        const blob = new Blob([jsonData], { type: 'application/json' });
                        const url = window.URL.createObjectURL(blob);
                        
                        // Create temp link and click it
                        const a = document.createElement('a');
                        a.style.display = 'none';
                        a.href = url;
                        a.download = '@Model.ProductName-versions.json';
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                    } else {
                        showAlert('No versions to export', 'warning');
                    }
                })
                .fail(function() {
                    showAlert('Failed to export versions', 'danger');
                });
        }

        function clearValidationErrors() {
            $('.is-invalid').removeClass('is-invalid');
            $('.invalid-feedback').empty();
        }

        function showValidationErrors(errors) {
            clearValidationErrors();
            errors.forEach(function(error) {
                showAlert(error, 'danger');
            });
        }

        function showAlert(message, type) {
            var alertClass = 'alert-' + type;
            var icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
            var alertHtml = '<div class="alert ' + alertClass + ' alert-dismissible fade show" role="alert">' +
                            '<i class="fas ' + icon + ' me-2"></i>' +
                            message +
                            '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                            '</div>';
            
            // Remove existing alerts
            $('#alert-container .alert').remove();
            
            // Add new alert
            $('#alert-container').html(alertHtml);
            
            // Auto-hide success alerts after 5 seconds
            if (type === 'success') {
                setTimeout(function() {
                    $('.alert-success').alert('close');
                }, 5000);
            }
        }
    </script>
}
