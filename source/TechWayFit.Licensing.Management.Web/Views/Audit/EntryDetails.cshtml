@model TechWayFit.Licensing.Management.Web.ViewModels.Audit.AuditEntryDetailViewModel
@{
    ViewData["Title"] = "Audit Entry Details";
    ViewData["Description"] = "Detailed view of audit entry and related information";
}

@section Styles {
    <link rel="stylesheet" href="~/css/product-management.css" />
    <style>
        .metadata-table th {
            width: 200px;
            background: var(--tw-bg-secondary);
            font-weight: 600;
            color: var(--tw-text-primary);
        }
        .change-added {
            border-left: 4px solid var(--tw-success);
            background: var(--tw-success-light);
        }
        .change-modified {
            border-left: 4px solid var(--tw-warning);
            background: var(--tw-warning-light);
        }
        .change-removed {
            border-left: 4px solid var(--tw-danger);
            background: var(--tw-danger-light);
        }
        .code-block {
            background: var(--tw-bg-secondary);
            border: 1px solid var(--tw-bg-tertiary);
            border-radius: var(--tw-radius-md);
            padding: var(--tw-spacing-md);
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            white-space: pre-wrap;
            word-break: break-all;
            font-size: 0.875rem;
        }
        .related-entry {
            transition: all var(--tw-transition-base);
            border-radius: var(--tw-radius-md);
        }
        .related-entry:hover {
            background: var(--tw-bg-secondary);
            transform: translateY(-1px);
            box-shadow: var(--tw-shadow-sm);
        }
        .breadcrumb-item a {
            text-decoration: none;
            color: var(--tw-primary);
        }
        .breadcrumb-item a:hover {
            color: var(--tw-primary-dark);
        }
        
        /* Enhanced table styles for changes */
        .table th {
            border-top: none;
            font-weight: 600;
            font-size: 0.875rem;
            background: var(--tw-bg-secondary);
            color: var(--tw-text-primary);
        }
        .value-display {
            max-width: 300px;
        }
        .value-container {
            position: relative;
        }
        .value-short {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.875rem;
            background: var(--tw-bg-secondary);
            padding: var(--tw-spacing-sm);
            border-radius: var(--tw-radius-sm);
            border: 1px solid var(--tw-bg-tertiary);
        }
        .expand-btn {
            color: var(--tw-text-secondary);
            text-decoration: none !important;
            transition: color var(--tw-transition-fast);
        }
        .expand-btn:hover {
            color: var(--tw-primary);
        }
        .code-block.small {
            font-size: 0.75rem;
            padding: var(--tw-spacing-sm);
        }
        .table-responsive {
            border-radius: var(--tw-radius-md);
        }
        .table > tbody > tr > td {
            vertical-align: middle;
            padding: var(--tw-spacing-md) var(--tw-spacing-sm);
            border-color: var(--tw-bg-tertiary);
        }
        .table > thead > tr > th {
            vertical-align: middle;
            padding: var(--tw-spacing-md) var(--tw-spacing-sm);
            border-color: var(--tw-bg-tertiary);
        }
        
        /* Badge improvements */
        .badge {
            font-size: 0.75rem;
            font-weight: 500;
            letter-spacing: 0.025em;
        }
        
        /* Value highlighting */
        .text-break {
            word-break: break-word;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.875rem;
            background: var(--tw-bg-secondary);
            padding: var(--tw-spacing-xs) var(--tw-spacing-sm);
            border-radius: var(--tw-radius-sm);
            display: inline-block;
            max-width: 100%;
            border: 1px solid var(--tw-bg-tertiary);
        }
        
        /* Entry header styling */
        .entry-overview {
            background: linear-gradient(135deg, var(--tw-primary) 0%, var(--tw-primary-dark) 100%);
            color: white;
            border-radius: var(--tw-radius-lg) var(--tw-radius-lg) 0 0;
        }
        
        /* Consistent spacing */
        .header {
            margin-bottom: var(--tw-spacing-lg);
        }
        
        /* Action buttons styling */
        .action-buttons .btn {
            font-weight: 500;
            letter-spacing: 0.025em;
        }
        
        /* Collapsible section styling */
        .card-header .btn-link {
            color: var(--tw-text-primary) !important;
            font-weight: 600;
            font-size: 1.25rem;
        }
        .card-header .btn-link:hover {
            color: var(--tw-primary) !important;
        }
        .card-header .btn-link:focus {
            box-shadow: none;
        }
        .collapse-chevron {
            transition: transform var(--tw-transition-base);
        }
        .collapse-chevron.rotated {
            transform: rotate(180deg);
        }
    </style>
}

<div class="container-fluid py-3">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Audit")">Audit Dashboard</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("Entries", "Audit")">Audit Entries</a></li>
            <li class="breadcrumb-item active" aria-current="page">Entry Details</li>
        </ol>
    </nav>

    <!-- Header Section -->
    <div class="header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="mb-1">Audit Entry Details</h2>
                <p class="text-muted mb-0">Comprehensive view of audit entry @Model.Entry?.EntryId</p>
            </div>
            <div class="d-flex gap-2 action-buttons">
                <a href="@Url.Action("Entries", "Audit")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i> Back to Entries
                </a>
                <a href="@Url.Action("EntityAudit", "Audit", new { entityType = Model.Entry?.EntityType, entityId = Model.Entry?.EntityId })" 
                   class="btn btn-outline-primary">
                    <i class="fas fa-history me-1"></i> Entity History
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Main Entry Details -->
        <div class="col-lg-8">
            <!-- Entry Overview -->
            <div class="card mb-4">
                <div class="card-header entry-overview">
                    <div class="row align-items-center">
                        <div class="col">
                            <h4 class="mb-2 text-white">@Model.Entry?.DisplayActionType</h4>
                            <p class="mb-1 text-white-50">
                                <strong>@Model.Entry?.DisplayEntityType:</strong> @Model.Entry?.EntityId
                            </p>
                            <p class="mb-0 text-white-50">
                                <i class="fas fa-user me-2"></i>@Model.Entry?.UserName
                                <i class="fas fa-clock ms-3 me-2"></i>@Model.Entry?.Timestamp.ToString("MMM dd, yyyy 'at' HH:mm:ss UTC")
                            </p>
                        </div>
                        <div class="col-auto">
                            <span class="badge bg-light text-dark fs-6">@Model.Entry?.DisplayActionType</span>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <table class="table table-borderless metadata-table">
                        <tbody>
                            <tr>
                                <th>Entry ID</th>
                                <td><code>@Model.Entry?.EntryId</code></td>
                            </tr>
                            <tr>
                                <th>Entity Type</th>
                                <td>@Model.Entry?.DisplayEntityType</td>
                            </tr>
                            <tr>
                                <th>Entity ID</th>
                                <td><code>@Model.Entry?.EntityId</code></td>
                            </tr>
                            <tr>
                                <th>Action Type</th>
                                <td><span class="badge @Model.Entry?.ActionBadgeClass">@Model.Entry?.DisplayActionType</span></td>
                            </tr>
                            <tr>
                                <th>User</th>
                                <td>@Model.Entry?.UserName</td>
                            </tr>
                            <tr>
                                <th>Timestamp</th>
                                <td>@Model.Entry?.Timestamp.ToString("yyyy-MM-dd HH:mm:ss UTC")</td>
                            </tr>
                            @if (!string.IsNullOrEmpty(Model.Entry?.IpAddress))
                            {
                                <tr>
                                    <th>IP Address</th>
                                    <td><code>@Model.Entry?.IpAddress</code></td>
                                </tr>
                            }
                            @if (!string.IsNullOrEmpty(Model.Entry?.UserAgent))
                            {
                                <tr>
                                    <th>User Agent</th>
                                    <td class="text-muted small">@Model.Entry?.UserAgent</td>
                                </tr>
                            }
                            @if (!string.IsNullOrEmpty(Model.Entry?.Reason))
                            {
                                <tr>
                                    <th>Reason</th>
                                    <td>@Model.Entry?.Reason</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Changes Section -->
            @if (Model.Changes.Any())
            {
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-edit me-2 text-primary"></i>
                            Changes Made (@Model.Changes.Count() properties)
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead>
                                    <tr>
                                        <th style="width: 200px;">Property</th>
                                        <th style="width: 80px;">Action</th>
                                        <th>Previous Value</th>
                                        <th>New Value</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var change in Model.Changes.OrderBy(c => c.PropertyName))
                                    {
                                        <tr class="align-top">
                                            <td>
                                                <strong>@change.PropertyName</strong>
                                            </td>
                                            <td>
                                                <span class="badge @(change.ChangeType == "Added" ? "bg-success" : change.ChangeType == "Removed" ? "bg-danger" : "bg-warning text-dark")">
                                                    @change.ChangeType
                                                </span>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(change.OldValue))
                                                {
                                                    <div class="value-display">
                                                        @if (change.OldValue.Length > 100)
                                                        {
                                                            <div class="value-container">
                                                                <div class="value-short">
                                                                    @change.OldValue.Substring(0, 100)...
                                                                    <button class="btn btn-sm btn-link p-0 ms-1 expand-btn" data-bs-toggle="collapse" data-bs-target="#old-@(change.PropertyName.Replace(" ", ""))" aria-expanded="false">
                                                                        <i class="fas fa-expand-alt"></i>
                                                                    </button>
                                                                </div>
                                                                <div class="collapse mt-2" id="old-@(change.PropertyName.Replace(" ", ""))">
                                                                    <div class="code-block small">@change.OldValue</div>
                                                                </div>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-break">@change.OldValue</span>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span class="text-muted fst-italic">No previous value</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(change.NewValue))
                                                {
                                                    <div class="value-display">
                                                        @if (change.NewValue.Length > 100)
                                                        {
                                                            <div class="value-container">
                                                                <div class="value-short">
                                                                    @change.NewValue.Substring(0, 100)...
                                                                    <button class="btn btn-sm btn-link p-0 ms-1 expand-btn" data-bs-toggle="collapse" data-bs-target="#new-@(change.PropertyName.Replace(" ", ""))" aria-expanded="false">
                                                                        <i class="fas fa-expand-alt"></i>
                                                                    </button>
                                                                </div>
                                                                <div class="collapse mt-2" id="new-@(change.PropertyName.Replace(" ", ""))">
                                                                    <div class="code-block small">@change.NewValue</div>
                                                                </div>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-break">@change.NewValue</span>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span class="text-muted fst-italic">Value removed</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }

            <!-- Raw Data Section -->
            @if (!string.IsNullOrEmpty(Model.FormattedOldValue) || !string.IsNullOrEmpty(Model.FormattedNewValue))
            {
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <button class="btn btn-link p-0 text-decoration-none text-start w-100" type="button" data-bs-toggle="collapse" data-bs-target="#rawDataCollapse" aria-expanded="false" aria-controls="rawDataCollapse">
                                <i class="fas fa-code me-2 text-primary"></i>
                                Raw Data
                                <i class="fas fa-chevron-down ms-2 text-muted" id="rawDataChevron"></i>
                            </button>
                        </h5>
                    </div>
                    <div class="collapse" id="rawDataCollapse">
                        <div class="card-body">
                            @if (!string.IsNullOrEmpty(Model.FormattedOldValue))
                            {
                                <div class="mb-3">
                                    <h6 class="text-muted">Previous Value:</h6>
                                    <div class="code-block">@Model.FormattedOldValue</div>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(Model.FormattedNewValue))
                            {
                                <div>
                                    <h6 class="text-muted">New Value:</h6>
                                    <div class="code-block">@Model.FormattedNewValue</div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Metadata Section -->
            @if (Model.Entry?.Metadata != null && Model.Entry.Metadata.Any())
            {
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-info-circle me-2 text-primary"></i>
                            Additional Metadata
                        </h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-sm table-borderless metadata-table">
                            <tbody>
                                @foreach (var kvp in Model.Entry.Metadata)
                                {
                                    <tr>
                                        <th class="text-muted" style="width: 200px;">@kvp.Key</th>
                                        <td><div class="code-block">@kvp.Value</div></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Related Entries -->
            @if (Model.RelatedEntries?.Any() == true)
            {
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-link me-2 text-primary"></i>
                            Related Entries
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        @foreach (var relatedEntry in Model.RelatedEntries.Take(10))
                        {
                            <div class="related-entry p-3 border-bottom">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1">
                                            <a href="@Url.Action("EntryDetails", "Audit", new { entryId = relatedEntry.EntryId })" 
                                               class="text-decoration-none text-primary">
                                                @relatedEntry.DisplayActionType
                                            </a>
                                        </h6>
                                        <p class="mb-1 text-muted small">
                                            By @relatedEntry.UserName
                                        </p>
                                        <small class="text-muted">@relatedEntry.RelativeTime</small>
                                    </div>
                                    <span class="badge bg-secondary">@relatedEntry.DisplayActionType</span>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="card-footer bg-light text-center">
                        <a href="@Url.Action("EntityAudit", "Audit", new { entityType = Model.Entry?.EntityType, entityId = Model.Entry?.EntityId })" 
                           class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-external-link-alt me-1"></i> View All Related Entries
                        </a>
                    </div>
                </div>
            }

            <!-- Quick Actions -->
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-tools me-2 text-primary"></i>
                        Quick Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="@Url.Action("EntityAudit", "Audit", new { entityType = Model.Entry?.EntityType, entityId = Model.Entry?.EntityId })" 
                           class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-history me-1"></i> View Entity History
                        </a>
                        <a href="@Url.Action("Entries", "Audit", new { actionType = Model.Entry?.ActionType })" 
                           class="btn btn-outline-secondary btn-sm">
                            <i class="fas fa-search me-1"></i> Find Similar Actions
                        </a>
                        <a href="@Url.Action("Entries", "Audit", new { userName = Model.Entry?.UserName })" 
                           class="btn btn-outline-info btn-sm">
                            <i class="fas fa-user me-1"></i> User's Activities
                        </a>
                        <a href="@Url.Action("Security", "Audit")" 
                           class="btn btn-outline-warning btn-sm">
                            <i class="fas fa-shield-alt me-1"></i> Security Audit
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Add copy to clipboard functionality for code blocks
            $('.code-block').each(function() {
                var $this = $(this);
                var $copyBtn = $('<button class="btn btn-sm btn-outline-secondary position-absolute" style="top: 5px; right: 5px;" title="Copy to clipboard"><i class="fas fa-copy"></i></button>');
                
                $this.addClass('position-relative');
                $this.append($copyBtn);
                
                $copyBtn.click(function() {
                    navigator.clipboard.writeText($this.text().trim()).then(function() {
                        $copyBtn.html('<i class="fas fa-check"></i>');
                        setTimeout(function() {
                            $copyBtn.html('<i class="fas fa-copy"></i>');
                        }, 2000);
                    });
                });
            });
            
            // Handle chevron rotation for collapsible sections
            $('#rawDataCollapse').on('show.bs.collapse', function () {
                $('#rawDataChevron').removeClass('fa-chevron-down').addClass('fa-chevron-up');
            });
            
            $('#rawDataCollapse').on('hide.bs.collapse', function () {
                $('#rawDataChevron').removeClass('fa-chevron-up').addClass('fa-chevron-down');
            });
        });
    </script>
}
