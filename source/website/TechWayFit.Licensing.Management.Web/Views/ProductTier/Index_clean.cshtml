@model TechWayFit.Licensing.Management.Web.ViewModels.Product.ProductEnhancedEditViewModel

@{
    ViewData["Title"] = "Product Tiers - " + Model.ProductName;
    ViewData["Description"] = "Manage product tiers, pricing, and capabilities";
    var productTiers = ViewData["ProductTiers"] as List<TechWayFit.Licensing.Management.Web.ViewModels.Product.TierInfoViewModel> ?? new List<TechWayFit.Licensing.Management.Web.ViewModels.Product.TierInfoViewModel>();
}

<div class="container-fluid py-3">
    <!-- Header Section -->
    <div class="page-header mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="mb-1">Product Tiers</h2>
                <p class="text-muted mb-0">Manage pricing tiers and feature sets for @Model.ProductName.</p>
            </div>
            <div class="btn-group" role="group">
                <a href="@Url.Action("Details", "Product", new { id = Model.ProductId })" class="btn btn-outline-primary">
                    <i class="fas fa-info-circle me-1"></i>Basic Details
                </a>
                <a href="@Url.Action("Index", "ProductTier", new { productId = Model.ProductId })" class="btn btn-primary">
                    <i class="fas fa-layer-group me-1"></i>Tiers
                </a>
                <a href="@Url.Action("Index", "ProductVersion", new { productId = Model.ProductId })" class="btn btn-outline-primary">
                    <i class="fas fa-code-branch me-1"></i>Versions
                </a>
                <a href="@Url.Action("Index", "ProductFeature", new { productId = Model.ProductId })" class="btn btn-outline-primary">
                    <i class="fas fa-star me-1"></i>Features
                </a>
            </div>
        </div>
    </div>

    <!-- Product List Container -->
    <div class="product-list-container">
        <!-- Search and Actions -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="search-container">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-search"></i>
                    </span>
                    <input type="text" class="form-control" id="searchInput" placeholder="Search tiers...">
                </div>
            </div>
            <div class="action-buttons">
                <a href="@Url.Action("Create", new { productId = Model.ProductId })" class="btn btn-primary">
                    <i class="fas fa-plus me-1"></i>Add Tier
                </a>
            </div>
        </div>

        <!-- Tiers Table -->
        <div class="table-responsive">
            <table class="table product-list-table">
                <thead>
                    <tr>
                        <th class="sortable" data-sort="name">
                            <i class="fas fa-sort me-1"></i>Name
                        </th>
                        <th>Description</th>
                        <th class="sortable" data-sort="price">
                            <i class="fas fa-sort me-1"></i>Price
                        </th>
                        <th class="sortable" data-sort="displayOrder">
                            <i class="fas fa-sort me-1"></i>Order
                        </th>
                        <th>Max Users</th>
                        <th>Max Devices</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (productTiers != null && productTiers.Any())
                    {
                        @foreach (var tier in productTiers)
                        {
                            <tr data-search-text="@tier.Name @tier.Description">
                                <td>
                                    <div class="fw-medium">@tier.Name</div>
                                </td>
                                <td class="text-muted">@tier.Description</td>
                                <td>
                                    <span class="fw-bold">@tier.Price</span>
                                </td>
                                <td>
                                    <span class="badge bg-secondary">@tier.DisplayOrder</span>
                                </td>
                                <td>@(tier.MaxUsers?.ToString() ?? "Unlimited")</td>
                                <td>@(tier.MaxDevices?.ToString() ?? "Unlimited")</td>
                                <td>
                                    <span class="badge bg-@(tier.IsActive ? "success" : "secondary")">
                                        @(tier.IsActive ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a href="@Url.Action("Edit", new { productId = Model.ProductId, id = tier.Id })" 
                                           class="btn btn-outline-primary" 
                                           title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <a href="@Url.Action("Features", new { productId = Model.ProductId, tierId = tier.Id })" 
                                           class="btn btn-outline-success" 
                                           title="Manage Features">
                                            <i class="fas fa-star"></i>
                                        </a>
                                        <button class="btn btn-outline-danger" 
                                                onclick="confirmDelete('@tier.Id', '@tier.Name')" 
                                                title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center py-4">
                                <div class="text-muted">
                                    <i class="fas fa-layer-group fa-2x mb-2"></i>
                                    <p>No product tiers found.</p>
                                    <p><small>Click "Add Tier" to create your first tier.</small></p>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Tier</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the tier "<span id="tierName"></span>"?</p>
                    <p class="text-muted"><small>This action cannot be undone.</small></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <form id="deleteForm" method="post" style="display: inline;">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr[data-search-text]');
            
            rows.forEach(row => {
                const searchText = row.getAttribute('data-search-text').toLowerCase();
                if (searchText.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });

        // Sort functionality
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', function() {
                const column = this.getAttribute('data-sort');
                sortTable(column);
            });
        });

        function sortTable(column) {
            const table = document.querySelector('.product-list-table');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            rows.sort((a, b) => {
                let aVal, bVal;
                
                switch(column) {
                    case 'name':
                        aVal = a.querySelector('td:first-child .fw-medium').textContent;
                        bVal = b.querySelector('td:first-child .fw-medium').textContent;
                        break;
                    case 'price':
                        aVal = a.querySelector('td:nth-child(3)').textContent;
                        bVal = b.querySelector('td:nth-child(3)').textContent;
                        break;
                    case 'displayOrder':
                        aVal = parseInt(a.querySelector('td:nth-child(4) .badge').textContent);
                        bVal = parseInt(b.querySelector('td:nth-child(4) .badge').textContent);
                        return aVal - bVal;
                    default:
                        aVal = a.querySelector(`td:nth-child(${getColumnIndex(column)})`).textContent;
                        bVal = b.querySelector(`td:nth-child(${getColumnIndex(column)})`).textContent;
                }
                
                return aVal.localeCompare(bVal);
            });
            
            rows.forEach(row => tbody.appendChild(row));
        }

        function getColumnIndex(column) {
            switch(column) {
                case 'name': return 1;
                case 'description': return 2;
                case 'price': return 3;
                case 'displayOrder': return 4;
                case 'status': return 5;
                default: return 1;
            }
        }

        // Delete confirmation
        function confirmDelete(tierId, tierName) {
            document.getElementById('tierName').textContent = tierName;
            document.getElementById('deleteForm').action = '@Url.Action("Delete", "ProductTier", new { productId = Model.ProductId })' + '?tierId=' + tierId;
            
            var modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }
    </script>
}
