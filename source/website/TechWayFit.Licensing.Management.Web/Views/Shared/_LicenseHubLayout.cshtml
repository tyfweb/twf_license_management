<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - LicenseHub</title>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" />
    
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    
    <!-- LicenseHub Custom CSS -->
    <link rel="stylesheet" href="~/css/licensehub.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/product-management.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
   
    <style>
        /* Sidebar responsive enhancements */
        @@media (max-width: 767.98px) {
            .licensehub-sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }
            
            .licensehub-sidebar.show {
                transform: translateX(0);
            }
        }
    </style>
    
    @await RenderSectionAsync("Styles", required: false)
    @await Component.InvokeAsync("ThemeLoader")
</head>
<body>
    @Html.AntiForgeryToken()
    
    <!-- Mobile Menu Toggle -->
    <button class="d-md-none btn btn-primary position-fixed shadow-sm" 
            style="top: 1rem; left: 1rem; z-index: 1051; border-radius: 8px;" 
            onclick="toggleSidebar()"
            data-bs-toggle="tooltip" 
            data-bs-placement="right" 
            title="Toggle Menu">
        <i class="fas fa-bars"></i>
    </button>

    <!-- Sidebar Navigation -->
    <div class="licensehub-sidebar d-flex flex-column" id="sidebar">
        <div class="licensehub-sidebar-brand p-3 border-bottom border-light border-opacity-25">
            <h4 class="text-white mb-0 fw-bold">
                <i class="fas fa-shield-alt me-2"></i>LicenseHub
            </h4>
        </div>
        <nav class="licensehub-sidebar-nav flex-fill">
            <ul class="nav nav-pills flex-column gap-1">
                <li class="nav-item">
                    <a class="nav-link licensehub-nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" ? "active" : "")" 
                       asp-controller="Home" asp-action="Index">
                        <i class="fas fa-home me-2"></i>Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link licensehub-nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Product" ? "active" : "")" 
                       asp-controller="Product" asp-action="Index">
                        <i class="fas fa-box me-2"></i>Products
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link licensehub-nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "License" ? "active" : "")" 
                       asp-controller="License" asp-action="Index">
                        <i class="fas fa-key me-2"></i>Licenses
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link licensehub-nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Consumer" ? "active" : "")" 
                       asp-controller="Consumer" asp-action="Index">
                        <i class="fas fa-users me-2"></i>Consumers
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link licensehub-nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Notification" ? "active" : "")" 
                       asp-controller="Notification" asp-action="Index">
                        <i class="fas fa-bell me-2"></i>Notifications
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link licensehub-nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Audit" ? "active" : "")" 
                       asp-controller="Audit" asp-action="Index">
                        <i class="fas fa-clipboard-list me-2"></i>Audit Logs
                    </a>
                </li> 
                <li class="nav-item">
                    <a class="nav-link licensehub-nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "User" || ViewContext.RouteData.Values["controller"]?.ToString() == "Role" || ViewContext.RouteData.Values["controller"]?.ToString() == "Tenant" ? "active" : "") d-flex justify-content-between align-items-center" 
                       data-bs-toggle="collapse" 
                       data-bs-target="#userManagementSubmenu" 
                       aria-expanded="@(ViewContext.RouteData.Values["controller"]?.ToString() == "User" || ViewContext.RouteData.Values["controller"]?.ToString() == "Role" || ViewContext.RouteData.Values["controller"]?.ToString() == "Tenant" ? "true" : "false")"
                       style="cursor: pointer;">
                        <span><i class="fas fa-user-cog me-2"></i>User Management</span>
                        <i class="fas fa-chevron-down"></i>
                    </a>
                    <div class="collapse @(ViewContext.RouteData.Values["controller"]?.ToString() == "User" || ViewContext.RouteData.Values["controller"]?.ToString() == "Role" || ViewContext.RouteData.Values["controller"]?.ToString() == "Tenant" ? "show" : "")" id="userManagementSubmenu">
                        <ul class="nav nav-pills flex-column ms-3 mt-1">
                            <li class="nav-item">
                                <a class="nav-link licensehub-nav-link py-1 @(ViewContext.RouteData.Values["controller"]?.ToString() == "User" ? "active" : "")" 
                                   asp-controller="User" asp-action="Index">
                                    <i class="fas fa-users me-2"></i>Users
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link licensehub-nav-link py-1 @(ViewContext.RouteData.Values["controller"]?.ToString() == "Role" ? "active" : "")" 
                                   asp-controller="Role" asp-action="Index">
                                    <i class="fas fa-user-tag me-2"></i>Roles
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link licensehub-nav-link py-1 @(ViewContext.RouteData.Values["controller"]?.ToString() == "Tenant" ? "active" : "")" 
                                   asp-controller="Tenant" asp-action="Index">
                                    <i class="fas fa-building me-2"></i>Tenants
                                </a>
                            </li>
                        </ul>
                    </div>
                </li>
                <li class="nav-item">
                    <a class="nav-link licensehub-nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "System" || ViewContext.RouteData.Values["controller"]?.ToString() == "HangfireDashboard" ? "active" : "") d-flex justify-content-between align-items-center" 
                       data-bs-toggle="collapse" 
                       data-bs-target="#systemAdminSubmenu" 
                       aria-expanded="@(ViewContext.RouteData.Values["controller"]?.ToString() == "System" || ViewContext.RouteData.Values["controller"]?.ToString() == "HangfireDashboard" ? "true" : "false")"
                       style="cursor: pointer;">
                        <span><i class="fas fa-cogs me-2"></i>System Administration</span>
                        <i class="fas fa-chevron-down"></i>
                    </a>
                    <div class="collapse @(ViewContext.RouteData.Values["controller"]?.ToString() == "System" || ViewContext.RouteData.Values["controller"]?.ToString() == "HangfireDashboard" ? "show" : "")" id="systemAdminSubmenu">
                        <ul class="nav nav-pills flex-column ms-3 mt-1">
                            <li class="nav-item">
                                <a class="nav-link licensehub-nav-link py-1 @(ViewContext.RouteData.Values["controller"]?.ToString() == "System" && ViewContext.RouteData.Values["action"]?.ToString() == "Index" ? "active" : "")" 
                                   asp-controller="System" asp-action="Index">
                                    <i class="fas fa-tachometer-alt me-2"></i>Dashboard
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link licensehub-nav-link py-1 @(ViewContext.RouteData.Values["controller"]?.ToString() == "HangfireDashboard" ? "active" : "")" 
                                   asp-controller="HangfireDashboard" asp-action="Index">
                                    <i class="fas fa-tasks me-2"></i>Job Dashboard
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link licensehub-nav-link py-1 @(ViewContext.RouteData.Values["action"]?.ToString() == "Jobs" ? "active" : "")" 
                                   asp-controller="System" asp-action="Jobs">
                                    <i class="fas fa-clock me-2"></i>Scheduled Jobs
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link licensehub-nav-link py-1 @(ViewContext.RouteData.Values["controller"]?.ToString() == "HangfireDashboard" && ViewContext.RouteData.Values["action"]?.ToString() == "Embedded" ? "active" : "")" 
                                   asp-controller="HangfireDashboard" asp-action="Embedded">
                                    <i class="fas fa-desktop me-2"></i>Embedded Dashboard
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link licensehub-nav-link py-1" 
                                   href="/hangfire" target="_blank">
                                    <i class="fas fa-external-link-alt me-2"></i>Full Dashboard
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link licensehub-nav-link py-1 @(ViewContext.RouteData.Values["controller"]?.ToString() == "Settings" ? "active" : "")" 
                                   asp-controller="Settings" asp-action="Index">
                                    <i class="fas fa-cog me-2"></i>Settings
                                </a>
                            </li>
                        </ul>
                    </div>
                </li>
            </ul>
        </nav>
        
        <!-- User Authentication Section -->
        <div class="licensehub-sidebar-user mt-auto p-3 border-top border-light border-opacity-25">
            @if (User.Identity?.IsAuthenticated == true)
            {
                <div class="licensehub-user-info d-flex align-items-center mb-3 p-2 bg-white bg-opacity-10 rounded">
                    <div class="licensehub-user-avatar me-2">
                        <i class="fas fa-user-circle fs-2 text-white text-opacity-75"></i>
                    </div>
                    <div class="licensehub-user-details flex-fill">
                        <div class="licensehub-user-name text-white fw-semibold small text-truncate">@User.Identity.Name</div>
                        <div class="licensehub-user-role text-white text-opacity-75 text-uppercase small">@User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value</div>
                    </div>
                </div>

                @if (User.IsInRole("Administrator"))
                {
                    <!-- Tenant Switcher for Administrators -->
                    <div class="licensehub-tenant-switcher mb-3 p-2 bg-white bg-opacity-10 rounded">
                        <div class="d-flex align-items-center justify-content-between mb-2">
                            <span class="text-white text-opacity-75 small fw-semibold">
                                <i class="fas fa-building me-1"></i>Viewing as Tenant
                            </span>
                            <button type="button" class="btn btn-link btn-sm text-white text-opacity-75 p-0" 
                                    onclick="clearTenantSelection()" title="Clear Selection">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <select class="form-select form-select-sm bg-white bg-opacity-25 text-white border-0" 
                                id="tenantSwitcher" onchange="switchTenant(this.value)">
                            <option value="">Loading tenants...</option>
                        </select>
                        <div class="text-white text-opacity-50 small mt-1" id="tenantSwitcherStatus">
                            Select a tenant to view data from their perspective
                        </div>
                    </div>
                }

                <form asp-controller="Account" asp-action="Logout" method="post" class="licensehub-logout-form">
                    <button type="submit" class="btn btn-outline-light btn-sm w-100 d-flex align-items-center justify-content-center" title="Logout">
                        <i class="fas fa-sign-out-alt me-2"></i>
                        <span>Logout</span>
                    </button>
                </form>
            }
            else
            {
                <div class="licensehub-login-section text-center">
                    <div class="licensehub-login-prompt mb-3 text-white text-opacity-75 small">
                        <i class="fas fa-lock me-1"></i>
                        <span>Not logged in</span>
                    </div>
                    <a href="@Url.Action("Login", "Account")" class="btn btn-primary btn-sm w-100 d-flex align-items-center justify-content-center">
                        <i class="fas fa-sign-in-alt me-2"></i>
                        <span>Login</span>
                    </a>
                </div>
            }
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="licensehub-main-content">
        <div class="container-fluid p-4">
        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show d-flex align-items-center" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show d-flex align-items-center" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (TempData["WarningMessage"] != null)
        {
            <div class="alert alert-warning alert-dismissible fade show d-flex align-items-center" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                @TempData["WarningMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (TempData["InfoMessage"] != null)
        {
            <div class="alert alert-info alert-dismissible fade show d-flex align-items-center" role="alert">
                <i class="fas fa-info-circle me-2"></i>
                @TempData["InfoMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Page Content -->
        <main role="main">
            @RenderBody()
        </main>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- LicenseHub JavaScript -->
    <script>
        // Mobile sidebar toggle
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('show');
        }

        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', function(event) {
            const sidebar = document.getElementById('sidebar');
            const toggleBtn = event.target.closest('button');
            
            if (window.innerWidth <= 768 && 
                !sidebar.contains(event.target) && 
                !toggleBtn?.onclick?.toString().includes('toggleSidebar')) {
                sidebar.classList.remove('show');
            }
        });

        // Auto-hide alerts after 5 seconds
        document.addEventListener('DOMContentLoaded', function() {
            const alerts = document.querySelectorAll('.alert:not(.alert-persistent)');
            alerts.forEach(function(alert) {
                setTimeout(function() {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }, 5000);
            });
        });

        // Initialize tooltips and popovers
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
            
            // Initialize popovers
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
            var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl);
            });
        });

        // Table row click handling
        document.addEventListener('DOMContentLoaded', function() {
            const tableRows = document.querySelectorAll('.licensehub-table tbody tr[data-href]');
            tableRows.forEach(function(row) {
                row.style.cursor = 'pointer';
                row.addEventListener('click', function() {
                    window.location.href = this.dataset.href;
                });
            });
        });

        // Form validation enhancement
        document.addEventListener('DOMContentLoaded', function() {
            const forms = document.querySelectorAll('.needs-validation');
            forms.forEach(function(form) {
                form.addEventListener('submit', function(event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                });
            });
        });

        // Search functionality
        function initializeSearch() {
            const searchInputs = document.querySelectorAll('[data-search-target]');
            searchInputs.forEach(function(input) {
                input.addEventListener('keyup', function() {
                    const searchTerm = this.value.toLowerCase();
                    const targetSelector = this.dataset.searchTarget;
                    const targets = document.querySelectorAll(targetSelector);
                    
                    targets.forEach(function(target) {
                        const text = target.textContent.toLowerCase();
                        const row = target.closest('tr');
                        if (row) {
                            row.style.display = text.includes(searchTerm) ? '' : 'none';
                        }
                    });
                });
            });
        }

        // Load common functionality
        document.addEventListener('DOMContentLoaded', function() {
            initializeSearch();
            loadAvailableTenants();
        });

        // Tenant Switcher Functions
        function loadAvailableTenants() {
            const tenantSwitcher = document.getElementById('tenantSwitcher');
            const statusDiv = document.getElementById('tenantSwitcherStatus');
            
            if (!tenantSwitcher) return; // Not an admin user

            fetch('@Url.Action("GetAvailableTenants", "Account")')
                .then(response => response.json())
                .then(data => {
                    console.log('Tenant data received:', data);
                    
                    if (data.success) {
                        tenantSwitcher.innerHTML = '<option value="">All Tenants (Admin View)</option>';
                        
                        if (data.tenants && data.tenants.length > 0) {
                            data.tenants.forEach(tenant => {
                                const option = document.createElement('option');
                                option.value = tenant.id || '';
                                
                                // Handle undefined/null tenant names gracefully
                                const tenantName = tenant.name || 'Unknown Tenant';
                                const tenantCode = tenant.code || 'N/A';
                                option.textContent = `${tenantName} (${tenantCode})`;
                                
                                console.log('Adding tenant option:', option.textContent, 'with value:', option.value);
                                
                                // Select current tenant if it matches
                                if (data.currentTenantId && tenant.id === data.currentTenantId) {
                                    option.selected = true;
                                    statusDiv.textContent = `Viewing as: ${tenantName}`;
                                }
                                
                                tenantSwitcher.appendChild(option);
                            });
                        } else {
                            tenantSwitcher.innerHTML += '<option value="" disabled>No tenants available</option>';
                        }

                        // Update status if no tenant is selected
                        if (!data.currentTenantId) {
                            statusDiv.textContent = 'Viewing all data (Admin perspective)';
                        }
                    } else {
                        console.error('Failed to load tenants:', data.message);
                        tenantSwitcher.innerHTML = '<option value="">Failed to load tenants</option>';
                        statusDiv.textContent = 'Error loading tenant list';
                    }
                })
                .catch(error => {
                    console.error('Error loading tenants:', error);
                    tenantSwitcher.innerHTML = '<option value="">Error loading tenants</option>';
                    statusDiv.textContent = 'Failed to load tenants';
                });
        }

        function switchTenant(tenantId) {
            const statusDiv = document.getElementById('tenantSwitcherStatus');
            const tenantSwitcher = document.getElementById('tenantSwitcher');
            
            if (!tenantId) {
                clearTenantSelection();
                return;
            }

            statusDiv.textContent = 'Switching tenant...';

            const requestData = { TenantId: tenantId };

            fetch('@Url.Action("SwitchTenant", "Account")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const selectedOption = tenantSwitcher.options[tenantSwitcher.selectedIndex];
                    statusDiv.textContent = `Viewing as: ${selectedOption.textContent}`;
                    
                    // Show success message briefly
                    showNotification('Tenant switched successfully', 'success');
                    
                    // Refresh the current page to load data for the new tenant
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    statusDiv.textContent = 'Failed to switch tenant';
                    showNotification(data.message || 'Failed to switch tenant', 'error');
                }
            })
            .catch(error => {
                console.error('Error switching tenant:', error);
                statusDiv.textContent = 'Error switching tenant';
                showNotification('Error switching tenant', 'error');
            });
        }

        function clearTenantSelection() {
            const statusDiv = document.getElementById('tenantSwitcherStatus');
            const tenantSwitcher = document.getElementById('tenantSwitcher');
            
            statusDiv.textContent = 'Clearing selection...';

            fetch('@Url.Action("ClearTenantSelection", "Account")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    tenantSwitcher.value = '';
                    statusDiv.textContent = 'Viewing all data (Admin perspective)';
                    showNotification('Tenant selection cleared', 'success');
                    
                    // Refresh the current page to load all data
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    statusDiv.textContent = 'Failed to clear selection';
                    showNotification(data.message || 'Failed to clear selection', 'error');
                }
            })
            .catch(error => {
                console.error('Error clearing tenant selection:', error);
                statusDiv.textContent = 'Error clearing selection';
                showNotification('Error clearing tenant selection', 'error');
            });
        }

        function showNotification(message, type) {
            // Simple notification function - you can enhance this
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
