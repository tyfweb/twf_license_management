@model TechWayFit.Licensing.Management.Web.ViewModels.Role.RoleDetailsViewModel
@{
    ViewData["Title"] = "Role Details";
    ViewData["Description"] = "View role information and assigned users";
}



@Html.AntiForgeryToken()

<div class="container-fluid py-3">
    @await Html.PartialAsync("_PageHeaderPartial", new TechWayFit.Licensing.Management.Web.ViewModels.Shared.PageHeaderViewModel
    {
        Title = $"Role Details - {Model.RoleName}",
        BackButtonText = "Back to Role Management",
        BackButtonController = "Role",
        BackButtonAction = "Index",
        Icon = "fas fa-user-tag"
    })

    <div class="row g-4">
        <!-- Main Content -->
        <div class="col-lg-8">
            <!-- Role Information -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header-enhanced">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div class="icon-circle bg-light rounded-circle">
                                <i class="fas fa-user-tag text-primary"></i>
                            </div>
                        </div>
                        <div>
                            <h6 class="card-title">Role Information</h6>
                            <p class="card-subtitle">Basic details and configuration</p>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="role-details-grid">
                        <div class="role-details-left">
                            <div class="role-info-item">
                                <div class="role-info-label">Role Name</div>
                                <div class="role-info-value">
                                    <div class="d-flex align-items-center">
                                        <div class="role-icon-sm me-2">
                                            <i class="fas fa-@(Model.IsSystemRole ? "crown" : "user-tag") text-@(Model.IsSystemRole ? "danger" : "primary")"></i>
                                        </div>
                                        <span class="fw-semibold">@Model.RoleName</span>
                                        @if (Model.IsSystemRole)
                                        {
                                            <span class="badge bg-danger-soft text-danger ms-2">
                                                <i class="fas fa-shield-alt me-1"></i>System Role
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="role-info-item">
                                <div class="role-info-label">Status</div>
                                <div class="role-info-value">
                                    @if (Model.IsActive)
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-check me-1"></i>Active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">
                                            <i class="fas fa-pause me-1"></i>Inactive
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="role-details-divider"></div>
                        
                        <div class="role-details-right">
                            <div class="role-info-item">
                                <div class="role-info-label">Tenant</div>
                                <div class="role-info-value">
                                    <span class="text-muted">@(Model.TenantName ?? "System")</span>
                                </div>
                            </div>
                            <div class="role-info-item">
                                <div class="role-info-label">Users Assigned</div>
                                <div class="role-info-value">
                                    <span class="fw-semibold text-primary">@Model.UsersCount</span>
                                    <span class="text-muted">user@(Model.UsersCount == 1 ? "" : "s")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(Model.RoleDescription))
                    {
                        <div class="role-description-section">
                            <div class="role-info-label">Description</div>
                            <div class="role-info-value">
                                <p class="text-muted mb-0">@Model.RoleDescription</p>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Module Permissions -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header-enhanced">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div class="icon-circle bg-light rounded-circle">
                                <i class="fas fa-shield-alt text-primary"></i>
                            </div>
                        </div>
                        <div>
                            <h6 class="card-title">Module Permissions</h6>
                            <p class="card-subtitle">Access levels for system modules</p>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="content-list">
                        @{
                            var modulesWithAccess = Enum.GetValues<TechWayFit.Licensing.Management.Core.Models.User.SystemModule>()
                                .Where(module => Model.Permissions.GetValueOrDefault(module, TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.None) != TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.None)
                                .ToList();
                        }
                        
                        @if (modulesWithAccess.Any())
                        {
                            @foreach (var module in modulesWithAccess)
                            {
                                var permission = Model.Permissions.GetValueOrDefault(module, TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.None);
                                <div class="content-list-item">
                                    <div class="d-flex align-items-center justify-content-between">
                                        <div class="d-flex align-items-center">
                                            <div class="me-3">
                                                <div class="icon-circle bg-light rounded-circle">
                                                    <i class="@(GetModuleIcon(module)) text-primary"></i>
                                                </div>
                                            </div>
                                            <div>
                                                <h6 class="mb-1 text-dark">@(GetModuleName(module))</h6>
                                                <p class="small text-muted mb-0">@(GetModuleDescription(module))</p>
                                            </div>
                                        </div>
                                        <div>
                                            <span class="badge @(GetPermissionBadgeClass(permission)) px-3 py-2">
                                                <i class="@(GetPermissionIcon(permission)) me-1"></i>
                                                @(GetPermissionName(permission))
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <div class="icon-circle bg-warning-soft rounded-circle mx-auto mb-3" style="width: 64px; height: 64px;">
                                    <i class="fas fa-exclamation-triangle text-warning" style="font-size: 24px;"></i>
                                </div>
                                <h6 class="text-muted">No Module Permissions Assigned</h6>
                                <p class="text-muted small mb-0">This role has no access to any system modules.</p>
                            </div>
                        }
                    </div>
                    
                    <!-- Permission Summary -->
                    @if (modulesWithAccess.Any())
                    {
                        <div class="mt-4 p-3 bg-light rounded">
                            <div class="row text-center">
                                @{
                                    var approverCount = Model.Permissions.Count(p => p.Value == TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.Approver);
                                    var readWriteCount = Model.Permissions.Count(p => p.Value == TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.ReadWrite);
                                    var readOnlyCount = Model.Permissions.Count(p => p.Value == TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.ReadOnly);
                                    var totalModulesWithAccess = modulesWithAccess.Count;
                                }
                                
                                <div class="col-12 mb-4">
                                    <div class="fw-semibold text-primary fs-5">@totalModulesWithAccess</div>
                                    <div class="small text-muted">Total Modules with Access</div>
                                </div>
                                <hr>
                                
                                    <div class="col-4">
                                        <div class="fw-semibold text-primary">@approverCount</div>
                                        <div class="small text-muted">Approver</div>
                                    </div>
                                
                                    <div class="col-4">
                                        <div class="fw-semibold text-warning">@readWriteCount</div>
                                        <div class="small text-muted">Read/Write</div>
                                    </div>
                               
                                    <div class="col-4">
                                        <div class="fw-semibold text-info">@readOnlyCount</div>
                                        <div class="small text-muted">Read Only</div>
                                    </div>
                              
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Assigned Users -->
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom-0 py-3">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <div class="avatar avatar-sm bg-primary-soft rounded me-3">
                                <i class="fas fa-users text-primary"></i>
                            </div>
                            <div>
                                <h5 class="card-title mb-0">Assigned Users</h5>
                                <p class="text-muted small mb-0">Users with this role</p>
                            </div>
                        </div>
                        <div class="badge bg-primary-soft text-primary">@Model.UsersCount</div>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.AssignedUsers.Any())
                    {
                        <div class="row">
                            @foreach (var user in Model.AssignedUsers)
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card border h-100">
                                        <div class="card-body p-3">
                                            <div class="d-flex align-items-start">
                                                <div class="avatar avatar-sm bg-@(user.IsActive ? "success" : "secondary")-soft rounded me-3">
                                                    <i class="fas fa-user text-@(user.IsActive ? "success" : "secondary")"></i>
                                                </div>
                                                <div class="flex-grow-1">
                                                    <h6 class="mb-1">
                                                        <a href="@Url.Action("Details", "User", new { id = user.UserId })" class="text-decoration-none">
                                                            @user.FullName
                                                        </a>
                                                    </h6>
                                                    <p class="text-muted small mb-1">@user.UserName</p>
                                                    <p class="text-muted small mb-2">@user.Email</p>
                                                    <div class="d-flex align-items-center gap-2">
                                                        @if (user.IsActive)
                                                        {
                                                            <span class="badge bg-success-soft text-success">Active</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary-soft text-secondary">Inactive</span>
                                                        }
                                                        @if (user.LastLoginDate > DateTime.MinValue)
                                                        {
                                                            <span class="text-muted small">Last login: @user.LastLoginDate.ToString("MMM dd, yyyy")</span>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <div class="avatar avatar-lg bg-light rounded-circle mx-auto mb-3">
                                <i class="fas fa-users text-muted"></i>
                            </div>
                            <h6 class="text-muted">No Users Assigned</h6>
                            <p class="text-muted small mb-0">This role hasn't been assigned to any users yet.</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Quick Actions -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header-enhanced">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div class="icon-circle bg-light rounded-circle">
                                <i class="fas fa-bolt text-primary"></i>
                            </div>
                        </div>
                        <div>
                            <h6 class="card-title">Quick Actions</h6>
                            <p class="card-subtitle">Available operations</p>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="@Url.Action("Edit", new { id = Model.RoleId })" class="btn btn-primary">
                            <i class="fas fa-edit me-2"></i>Edit Role
                        </a>
                        @if (Model.UsersCount == 0)
                        {
                            <button type="button" class="btn btn-outline-danger" onclick="deleteRole('@Model.RoleId', '@Model.RoleName')">
                                <i class="fas fa-trash me-2"></i>Delete Role
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-outline-secondary" disabled title="Cannot delete role with assigned users">
                                <i class="fas fa-lock me-2"></i>Delete Restricted
                            </button>
                        }
                    </div>
                </div>
            </div>

            <!-- Audit Information -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header-enhanced">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div class="icon-circle bg-light rounded-circle">
                                <i class="fas fa-history text-primary"></i>
                            </div>
                        </div>
                        <div>
                            <h6 class="card-title">Audit Information</h6>
                            <p class="card-subtitle">Creation and modification history</p>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="info-section">
                        <div class="info-item">
                            <div class="info-label">Created On</div>
                            <div class="info-value">@Model.CreatedOn.ToString("MMM dd, yyyy 'at' hh:mm tt")</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Created By</div>
                            <div class="info-value">@Model.CreatedBy</div>
                        </div>
                        @if (Model.UpdatedOn.HasValue)
                        {
                            <div class="info-item">
                                <div class="info-label">Last Updated</div>
                                <div class="info-value">@Model.UpdatedOn.Value.ToString("MMM dd, yyyy 'at' hh:mm tt")</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Updated By</div>
                                <div class="info-value">@(Model.UpdatedBy ?? "Unknown")</div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Help Section -->
            <div class="card border-0 shadow-sm">
                <div class="card-header-enhanced">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div class="icon-circle bg-light rounded-circle">
                                <i class="fas fa-info-circle text-primary"></i>
                            </div>
                        </div>
                        <div>
                            <h6 class="card-title">Role Information</h6>
                            <p class="card-subtitle">Tips and best practices</p>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="info-section">
                        <div class="d-flex align-items-start mb-2">
                            <div class="me-2">
                                <i class="fas fa-shield-alt text-primary"></i>
                            </div>
                            <div>
                                <h6 class="mb-2 text-dark">System Roles</h6>
                            </div>
                        </div>
                        <p class="small text-muted mb-0 ps-3">
                            System roles have elevated privileges and are typically used for administrative purposes.
                        </p>
                    </div>
                    
                    <div class="info-section">
                        <div class="d-flex align-items-start mb-2">
                            <div class="me-2">
                                <i class="fas fa-users text-primary"></i>
                            </div>
                            <div>
                                <h6 class="mb-2 text-dark">User Assignment</h6>
                            </div>
                        </div>
                        <p class="small text-muted mb-0 ps-3">
                            Users can be assigned multiple roles to combine different permission sets.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function deleteRole(roleId, roleName) {
            if (confirm(`Are you sure you want to delete the role "${roleName}"? This action cannot be undone.`)) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("Delete")';
                
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const idInput = document.createElement('input');
                idInput.type = 'hidden';
                idInput.name = 'id';
                idInput.value = roleId;
                
                form.appendChild(tokenInput);
                form.appendChild(idInput);
                document.body.appendChild(form);
                form.submit();
            }
        }    </script>
}

@functions {
    private string GetModuleName(TechWayFit.Licensing.Management.Core.Models.User.SystemModule module)
    {
        return TechWayFit.Licensing.Management.Core.Models.User.ModuleInfo.ModuleNames.GetValueOrDefault(module, module.ToString());
    }
    
    private string GetModuleDescription(TechWayFit.Licensing.Management.Core.Models.User.SystemModule module)
    {
        return TechWayFit.Licensing.Management.Core.Models.User.ModuleInfo.ModuleDescriptions.GetValueOrDefault(module, "");
    }
    
    private string GetModuleIcon(TechWayFit.Licensing.Management.Core.Models.User.SystemModule module)
    {
        return TechWayFit.Licensing.Management.Core.Models.User.ModuleInfo.ModuleIcons.GetValueOrDefault(module, "fas fa-cog");
    }
    
    private string GetModuleBadgeColor(TechWayFit.Licensing.Management.Core.Models.User.SystemModule module)
    {
        return module switch
        {
            TechWayFit.Licensing.Management.Core.Models.User.SystemModule.Products => "primary",
            TechWayFit.Licensing.Management.Core.Models.User.SystemModule.Consumers => "success",
            TechWayFit.Licensing.Management.Core.Models.User.SystemModule.Licenses => "warning",
            TechWayFit.Licensing.Management.Core.Models.User.SystemModule.Users => "info",
            TechWayFit.Licensing.Management.Core.Models.User.SystemModule.Roles => "secondary",
            TechWayFit.Licensing.Management.Core.Models.User.SystemModule.Tenants => "dark",
            TechWayFit.Licensing.Management.Core.Models.User.SystemModule.Approvals => "success",
            TechWayFit.Licensing.Management.Core.Models.User.SystemModule.Reports => "info",
            TechWayFit.Licensing.Management.Core.Models.User.SystemModule.Audit => "danger",
            TechWayFit.Licensing.Management.Core.Models.User.SystemModule.System => "warning",
            _ => "secondary"
        };
    }
    
    private string GetPermissionName(TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel level)
    {
        return TechWayFit.Licensing.Management.Core.Models.User.ModuleInfo.PermissionNames.GetValueOrDefault(level, level.ToString());
    }
    
    private string GetPermissionIcon(TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel level)
    {
        return level switch
        {
            TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.None => "fas fa-ban",
            TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.ReadOnly => "fas fa-eye",
            TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.ReadWrite => "fas fa-edit",
            TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.Approver => "fas fa-check-circle",
            _ => "fas fa-question"
        };
    }
    
    private string GetPermissionBadgeClass(TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel level)
    {
        return level switch
        {
            TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.None => "bg-secondary text-white",
            TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.ReadOnly => "bg-info text-white",
            TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.ReadWrite => "bg-warning text-dark",
            TechWayFit.Licensing.Management.Core.Models.User.PermissionLevel.Approver => "bg-success text-white",
            _ => "bg-secondary text-white"
        };
    }
}
