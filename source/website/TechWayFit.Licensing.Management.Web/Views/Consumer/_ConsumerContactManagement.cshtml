@{
    var consumerId = ViewBag.ConsumerId ?? Guid.Empty;
}

<!-- Contact Information Tab Content -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <h5><i class="fas fa-address-book me-2"></i>All Contacts</h5>
    <button type="button" class="btn btn-primary" onclick="showAddContactModal()">
        <i class="fas fa-plus me-2"></i>Add Contact
    </button>
</div>

<!-- Contact List Container -->
<div id="contactListContainer">
    <div class="text-center py-5">
        <i class="fas fa-address-book fa-3x text-muted mb-3"></i>
        <h6 class="text-muted">No Contacts Added</h6>
        <p class="text-muted">Add contact information for this consumer.</p>
        <button type="button" class="btn btn-primary" onclick="showAddContactModal()">
            <i class="fas fa-plus me-2"></i>Add First Contact
        </button>
    </div>
</div>

<!-- Add/Edit Contact Modal -->
<div class="modal fade" id="contactModal" tabindex="-1" aria-labelledby="contactModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="contactModalLabel">
                    <i class="fas fa-address-book me-2"></i>Add Contact
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="contactForm" onsubmit="submitContactForm(event)">
                <div class="modal-body">
                    <input type="hidden" id="contactId" name="contactId" />
                    <input type="hidden" id="consumerId" name="consumerId" value="@consumerId" />
                    
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="contactName" class="form-label">Contact Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="contactName" name="contactName" required maxlength="200">
                        </div>
                        <div class="col-md-6">
                            <label for="contactEmail" class="form-label">Email Address <span class="text-danger">*</span></label>
                            <input type="email" class="form-control" id="contactEmail" name="contactEmail" required maxlength="255">
                        </div>
                        <div class="col-md-6">
                            <label for="contactPhone" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="contactPhone" name="contactPhone" maxlength="50">
                        </div>
                        <div class="col-md-6">
                            <label for="contactDesignation" class="form-label">Designation</label>
                            <input type="text" class="form-control" id="contactDesignation" name="contactDesignation" maxlength="100">
                        </div>
                        <div class="col-md-6">
                            <label for="companyDivision" class="form-label">Company Division</label>
                            <input type="text" class="form-control" id="companyDivision" name="companyDivision" maxlength="100">
                        </div>
                        <div class="col-md-6">
                            <label for="contactType" class="form-label">Contact Type</label>
                            <select class="form-select" id="contactType" name="contactType">
                                <option value="">Select Type</option>
                                <option value="Technical">Technical</option>
                                <option value="Billing">Billing</option>
                                <option value="Administrative">Administrative</option>
                                <option value="Management">Management</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="col-12">
                            <label for="contactAddress" class="form-label">Address</label>
                            <textarea class="form-control" id="contactAddress" name="contactAddress" rows="2" maxlength="500"></textarea>
                        </div>
                        <div class="col-12">
                            <label for="notes" class="form-label">Notes</label>
                            <textarea class="form-control" id="notes" name="notes" rows="3" maxlength="1000"></textarea>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="isPrimaryContact" name="isPrimaryContact">
                                <label class="form-check-label" for="isPrimaryContact">
                                    Set as primary contact for this division
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Contact
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Contact Modal -->
<div class="modal fade" id="deleteContactModal" tabindex="-1" aria-labelledby="deleteContactModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteContactModalLabel">
                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this contact?</p>
                <div id="deleteContactInfo"></div>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDeleteContact()">
                    <i class="fas fa-trash me-2"></i>Delete Contact
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// Global variables for contact management
let currentContactId = null;
let currentConsumerId = '@consumerId';

// Load contacts when page loads
document.addEventListener('DOMContentLoaded', function() {
    loadContacts();
});

// Load all contacts for the consumer
async function loadContacts() {
    try {
        const response = await fetch(`/api/consumer/${currentConsumerId}/contacts`);
        const result = await response.json();
        
        if (result.success) {
            renderContacts(result.data);
        } else {
            showError('Failed to load contacts: ' + result.message);
        }
    } catch (error) {
        console.error('Error loading contacts:', error);
        showError('Failed to load contacts. Please try again.');
    }
}

// Render contacts in the list
function renderContacts(contacts) {
    const container = document.getElementById('contactListContainer');
    
    if (!contacts || contacts.length === 0) {
        container.innerHTML = `
            <div class="text-center py-5">
                <i class="fas fa-address-book fa-3x text-muted mb-3"></i>
                <h6 class="text-muted">No Contacts Added</h6>
                <p class="text-muted">Add contact information for this consumer.</p>
                <button type="button" class="btn btn-primary" onclick="showAddContactModal()">
                    <i class="fas fa-plus me-2"></i>Add First Contact
                </button>
            </div>
        `;
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Contact Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Designation</th>
                        <th>Type</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    contacts.forEach(contact => {
        const isPrimary = contact.isPrimaryContact;
        
        html += `
            <tr>
                <td>
                    <div class="d-flex align-items-center">
                        ${isPrimary ? '<i class="fas fa-star text-warning me-2" title="Primary Contact"></i>' : '<i class="fas fa-user text-muted me-2"></i>'}
                        <div>
                            <span class="fw-medium">${escapeHtml(contact.contactName)}</span>
                            ${isPrimary ? '<span class="badge bg-primary ms-2">Primary</span>' : ''}
                        </div>
                    </div>
                </td>
                <td>
                    <a href="mailto:${escapeHtml(contact.contactEmail)}" class="text-decoration-none">
                        ${escapeHtml(contact.contactEmail)}
                    </a>
                </td>
                <td>
                    ${contact.contactPhone ? `<a href="tel:${escapeHtml(contact.contactPhone)}" class="text-decoration-none">${escapeHtml(contact.contactPhone)}</a>` : '<span class="text-muted">-</span>'}
                </td>
                <td>
                    ${contact.contactDesignation ? escapeHtml(contact.contactDesignation) : '<span class="text-muted">-</span>'}
                </td>
                <td>
                    ${contact.contactType ? `<span class="badge bg-secondary">${escapeHtml(contact.contactType)}</span>` : '<span class="text-muted">-</span>'}
                </td>
                <td>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-primary btn-sm" title="Edit Contact" onclick="editContact('${contact.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        ${!isPrimary ? `<button class="btn btn-outline-warning btn-sm" title="Set as Primary" onclick="setPrimaryContact('${contact.id}')">
                            <i class="fas fa-star"></i>
                        </button>` : ''}
                        <button class="btn btn-outline-danger btn-sm" title="Delete Contact" onclick="deleteContact('${contact.id}', '${escapeHtml(contact.contactName)}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });
    
    html += `
                </tbody>
            </table>
        </div>
    `;
    
    container.innerHTML = html;
}

// Show add contact modal
function showAddContactModal() {
    currentContactId = null;
    document.getElementById('contactModalLabel').innerHTML = '<i class="fas fa-address-book me-2"></i>Add Contact';
    document.getElementById('contactForm').reset();
    document.getElementById('contactId').value = '';
    new bootstrap.Modal(document.getElementById('contactModal')).show();
}

// Edit contact
async function editContact(contactId) {
    try {
        const response = await fetch(`/api/consumer/contacts/${contactId}`);
        const result = await response.json();
        
        if (result.success) {
            const contact = result.data;
            currentContactId = contactId;
            
            document.getElementById('contactModalLabel').innerHTML = '<i class="fas fa-edit me-2"></i>Edit Contact';
            document.getElementById('contactId').value = contact.id;
            document.getElementById('contactName').value = contact.contactName;
            document.getElementById('contactEmail').value = contact.contactEmail;
            document.getElementById('contactPhone').value = contact.contactPhone || '';
            document.getElementById('contactDesignation').value = contact.contactDesignation || '';
            document.getElementById('companyDivision').value = contact.companyDivision || '';
            document.getElementById('contactType').value = contact.contactType || '';
            document.getElementById('contactAddress').value = contact.contactAddress || '';
            document.getElementById('notes').value = contact.notes || '';
            document.getElementById('isPrimaryContact').checked = contact.isPrimaryContact;
            
            new bootstrap.Modal(document.getElementById('contactModal')).show();
        } else {
            showError('Failed to load contact details: ' + result.message);
        }
    } catch (error) {
        console.error('Error loading contact:', error);
        showError('Failed to load contact details. Please try again.');
    }
}

// Submit contact form
async function submitContactForm(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const contactData = {
        contactName: formData.get('contactName'),
        contactEmail: formData.get('contactEmail'),
        contactPhone: formData.get('contactPhone'),
        contactDesignation: formData.get('contactDesignation'),
        companyDivision: formData.get('companyDivision'),
        contactType: formData.get('contactType'),
        contactAddress: formData.get('contactAddress'),
        notes: formData.get('notes'),
        isPrimaryContact: formData.get('isPrimaryContact') === 'on'
    };
    
    try {
        let response;
        if (currentContactId) {
            // Update existing contact
            response = await fetch(`/api/consumer/contacts/${currentContactId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(contactData)
            });
        } else {
            // Create new contact
            contactData.consumerId = currentConsumerId;
            response = await fetch('/api/consumer/contacts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(contactData)
            });
        }
        
        const result = await response.json();
        
        if (result.success) {
            bootstrap.Modal.getInstance(document.getElementById('contactModal')).hide();
            showSuccess(currentContactId ? 'Contact updated successfully!' : 'Contact added successfully!');
            loadContacts();
        } else {
            showError('Failed to save contact: ' + result.message);
        }
    } catch (error) {
        console.error('Error saving contact:', error);
        showError('Failed to save contact. Please try again.');
    }
}

// Delete contact
function deleteContact(contactId, contactName) {
    currentContactId = contactId;
    document.getElementById('deleteContactInfo').innerHTML = `
        <div class="alert alert-warning">
            <strong>Contact:</strong> ${escapeHtml(contactName)}
        </div>
    `;
    new bootstrap.Modal(document.getElementById('deleteContactModal')).show();
}

// Confirm delete contact
async function confirmDeleteContact() {
    try {
        const response = await fetch(`/api/consumer/contacts/${currentContactId}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
            bootstrap.Modal.getInstance(document.getElementById('deleteContactModal')).hide();
            showSuccess('Contact deleted successfully!');
            loadContacts();
        } else {
            showError('Failed to delete contact: ' + result.message);
        }
    } catch (error) {
        console.error('Error deleting contact:', error);
        showError('Failed to delete contact. Please try again.');
    }
}

// Set primary contact
async function setPrimaryContact(contactId) {
    try {
        const response = await fetch(`/api/consumer/contacts/${contactId}/set-primary`, {
            method: 'PUT'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showSuccess('Contact set as primary successfully!');
            loadContacts();
        } else {
            showError('Failed to set primary contact: ' + result.message);
        }
    } catch (error) {
        console.error('Error setting primary contact:', error);
        showError('Failed to set primary contact. Please try again.');
    }
}

// Utility functions
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function showSuccess(message) {
    // Implementation depends on your notification system
    // For now, using simple alert
    alert(message);
}

function showError(message) {
    // Implementation depends on your notification system
    // For now, using simple alert
    alert(message);
}
</script>

<style>
.contact-details {
    font-size: 0.9rem;
}

.contact-details .fa {
    width: 16px;
}

.card.border-primary {
    border-width: 2px;
}
</style>
