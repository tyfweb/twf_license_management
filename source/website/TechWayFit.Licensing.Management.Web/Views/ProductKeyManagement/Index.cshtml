@model TechWayFit.Licensing.Management.Web.ViewModels.Product.ProductKeyManagementViewModel
@{
    ViewBag.Title = "Product Key Management";
    ViewBag.PageTitle = $"Key Management - {Model.ProductName}";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-1">Product Key Management</h2>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a asp-controller="Product" asp-action="Index">Products</a></li>
                            <li class="breadcrumb-item"><a asp-controller="Product" asp-action="Details" asp-route-id="@Model.ProductId">@Model.ProductName</a></li>
                            <li class="breadcrumb-item active">Key Management</li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <a asp-controller="Product" asp-action="Details" asp-route-id="@Model.ProductId" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Product
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Information -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0"><i class="fas fa-cube"></i> Product Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Name:</strong> @Model.ProductName
                        </div>
                        <div class="col-md-6">
                            <strong>Product ID:</strong> <code>@Model.ProductId</code>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.ProductDescription))
                    {
                        <div class="row mt-2">
                            <div class="col-12">
                                <strong>Description:</strong> @Model.ProductDescription
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Key Status and Operations -->
    <div class="row">
        <div class="col-lg-8">
            <!-- Current Key Status -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0"><i class="fas fa-key"></i> Current Key Status</h5>
                    <span class="badge @(Model.HasKeys ? "bg-success" : "bg-warning")">
                        @(Model.HasKeys ? "Keys Active" : "No Keys")
                    </span>
                </div>
                <div class="card-body">
                    @if (Model.HasKeys)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Key Generated:</strong> @(Model.KeyGeneratedAt?.ToString("yyyy-MM-dd HH:mm:ss") ?? "Unknown")</p>
                                <p><strong>Key Version:</strong> @Model.KeyVersion</p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>Key Size:</strong> @Model.KeySize bits</p>
                                <p><strong>Algorithm:</strong> RSA</p>
                            </div>
                        </div>
                        
                        <!-- Public Key Display -->
                        <div class="mt-3">
                            <label class="form-label"><strong>Public Key (PEM Format):</strong></label>
                            <div class="position-relative">
                                <textarea id="publicKeyDisplay" class="form-control font-monospace" rows="8" readonly>@Model.PublicKey</textarea>
                                <button type="button" class="btn btn-sm btn-outline-secondary position-absolute top-0 end-0 m-2" 
                                        onclick="copyPublicKey()" title="Copy to clipboard">
                                    <i class="fas fa-copy"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Key Actions -->
                        <div class="mt-3 d-flex gap-2 flex-wrap">
                            <button type="button" class="btn btn-primary" onclick="showRotateKeysModal()">
                                <i class="fas fa-sync-alt"></i> Rotate Keys
                            </button>
                            <button type="button" class="btn btn-success" onclick="downloadPublicKey()">
                                <i class="fas fa-download"></i> Download Public Key
                            </button>
                            <button type="button" class="btn btn-outline-info" onclick="refreshKeyInfo()">
                                <i class="fas fa-refresh"></i> Refresh
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-key fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No Keys Generated</h5>
                            <p class="text-muted">This product doesn't have RSA key pairs for license signing.</p>
                            <button type="button" class="btn btn-primary btn-lg" onclick="showGenerateKeysModal()">
                                <i class="fas fa-plus"></i> Generate Keys
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <!-- Key Management Help -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0"><i class="fas fa-info-circle"></i> Key Management Help</h5>
                </div>
                <div class="card-body">
                    <h6>RSA Key Pairs</h6>
                    <p class="small">RSA key pairs are used to sign and validate licenses. The private key is stored securely encrypted, while the public key is used for license validation.</p>
                    
                    <h6>Key Sizes</h6>
                    <ul class="small">
                        <li><strong>2048 bits:</strong> Standard security, faster operations</li>
                        <li><strong>4096 bits:</strong> Enhanced security, slower operations</li>
                    </ul>

                    <h6>Key Rotation</h6>
                    <p class="small">Regularly rotating keys improves security. Old licenses remain valid, but new licenses will use the new key.</p>

                    <div class="alert alert-warning small mt-3">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Important:</strong> Deleting keys will make it impossible to generate new licenses for this product.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Generate Keys Modal -->
<div class="modal fade" id="generateKeysModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-key"></i> Generate RSA Key Pair</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="generateKeysForm">
                    <div class="mb-3">
                        <label for="generateKeySize" class="form-label">Key Size</label>
                        <select id="generateKeySize" class="form-select">
                            <option value="2048">2048 bits (Standard)</option>
                            <option value="4096">4096 bits (Enhanced Security)</option>
                        </select>
                        <div class="form-text">Larger keys provide better security but slower operations.</div>
                    </div>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        This will generate a new RSA key pair for license signing. The operation may take a few seconds.
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="generateKeys()">
                    <i class="fas fa-cog fa-spin d-none" id="generateSpinner"></i>
                    Generate Keys
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Rotate Keys Modal -->
<div class="modal fade" id="rotateKeysModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-sync-alt"></i> Rotate RSA Key Pair</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="rotateKeysForm">
                    <div class="mb-3">
                        <label for="rotateKeySize" class="form-label">New Key Size</label>
                        <select id="rotateKeySize" class="form-select">
                            <option value="2048">2048 bits (Standard)</option>
                            <option value="4096">4096 bits (Enhanced Security)</option>
                        </select>
                    </div>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Key Rotation:</strong> This will generate new keys and deactivate the current ones. 
                        Existing licenses will continue to work, but new licenses will use the new key pair.
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="rotateKeys()">
                    <i class="fas fa-cog fa-spin d-none" id="rotateSpinner"></i>
                    Rotate Keys
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const productId = '@Model.ProductId';

        // Show generate keys modal
        function showGenerateKeysModal() {
            $('#generateKeysModal').modal('show');
        }

        // Show rotate keys modal
        function showRotateKeysModal() {
            $('#rotateKeysModal').modal('show');
        }

        // Generate new keys
        function generateKeys() {
            const keySize = $('#generateKeySize').val();
            const spinner = $('#generateSpinner');
            const button = spinner.parent();
            
            // Show loading state
            spinner.removeClass('d-none');
            button.prop('disabled', true);

            $.ajax({
                url: '@Url.Action("GenerateKeys", "ProductKeyManagement")',
                type: 'POST',
                data: {
                    productId: productId,
                    keySize: keySize,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#generateKeysModal').modal('hide');
                        showSuccessMessage(response.message);
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        showErrorMessage(response.message);
                    }
                },
                error: function() {
                    showErrorMessage('An error occurred while generating keys. Please try again.');
                },
                complete: function() {
                    spinner.addClass('d-none');
                    button.prop('disabled', false);
                }
            });
        }

        // Rotate existing keys
        function rotateKeys() {
            const keySize = $('#rotateKeySize').val();
            const spinner = $('#rotateSpinner');
            const button = spinner.parent();
            
            // Show loading state
            spinner.removeClass('d-none');
            button.prop('disabled', true);

            $.ajax({
                url: '@Url.Action("RotateKeys", "ProductKeyManagement")',
                type: 'POST',
                data: {
                    productId: productId,
                    keySize: keySize,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#rotateKeysModal').modal('hide');
                        showSuccessMessage(response.message);
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        showErrorMessage(response.message);
                    }
                },
                error: function() {
                    showErrorMessage('An error occurred while rotating keys. Please try again.');
                },
                complete: function() {
                    spinner.addClass('d-none');
                    button.prop('disabled', false);
                }
            });
        }

        // Copy public key to clipboard
        function copyPublicKey() {
            const textarea = document.getElementById('publicKeyDisplay');
            textarea.select();
            textarea.setSelectionRange(0, 99999); // For mobile devices
            
            navigator.clipboard.writeText(textarea.value).then(function() {
                showSuccessMessage('Public key copied to clipboard');
            }, function() {
                showErrorMessage('Failed to copy public key');
            });
        }

        // Download public key as file
        function downloadPublicKey() {
            window.location.href = '@Url.Action("DownloadPublicKey", "ProductKeyManagement", new { productId = Model.ProductId })';
        }

        // Refresh key information
        function refreshKeyInfo() {
            location.reload();
        }

        // Show success message
        function showSuccessMessage(message) {
            const alert = $(`
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle"></i> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);
            
            $('.container-fluid').prepend(alert);
            setTimeout(() => alert.alert('close'), 5000);
        }

        // Show error message
        function showErrorMessage(message) {
            const alert = $(`
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle"></i> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);
            
            $('.container-fluid').prepend(alert);
            setTimeout(() => alert.alert('close'), 8000);
        }

        // Initialize page
        $(document).ready(function() {
            // Add anti-forgery token to all AJAX requests
            $.ajaxSetup({
                beforeSend: function(xhr, settings) {
                    if (settings.type === 'POST') {
                        xhr.setRequestHeader("RequestVerificationToken", 
                            $('input[name="__RequestVerificationToken"]').val());
                    }
                }
            });
        });
    </script>
}

@{
    Html.AntiForgeryToken();
}
