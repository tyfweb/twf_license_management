@model TechWayFit.Licensing.Management.Web.ViewModels.Product.ProductDetailViewModel
@{
    ViewData["Title"] = $"Product Details - {Model.Product.ProductName}";
    ViewData["Description"] = $"Detailed information for {Model.Product.ProductName}";
}



<div class="container-fluid py-3"> <!-- Header Section -->
    <div class="header mb-4">
        <div class="d-flex justify-content-between align-items-start">
            <div class="flex-grow-1">
                <div class="d-flex align-items-center mb-2">
                    <h2 class="mb-0 me-3">@Model.Product.ProductName</h2>
                    @if (Model.Product.IsActive)
                    {
                        <span class="badge bg-success-subtle text-success fs-6">
                            <i class="fas fa-check-circle me-1"></i>Active
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary-subtle text-secondary fs-6">
                            <i class="fas fa-pause-circle me-1"></i>Inactive
                        </span>
                    }
                </div>
                <p class="text-muted mb-0">
                    <i class="fas fa-info-circle me-2"></i>
                    Comprehensive product information and lifecycle management dashboard
                </p>
            </div>
            <div class="btn-group shadow-sm" role="group">
                <a href="@Url.Action("Details", new { id = Model.Product.ProductId })" class="btn btn-primary">
                    <i class="fas fa-info-circle me-1"></i>Details
                </a>
                <a href="@Url.Action("Tiers", new { id = Model.Product.ProductId })" class="btn btn-outline-primary">
                    <i class="fas fa-layer-group me-1"></i>Tiers
                </a>
                <a href="@Url.Action("Index", "ProductVersion", new { productId = Model.Product.ProductId })"
                    class="btn btn-outline-primary">
                    <i class="fas fa-code-branch me-1"></i>Versions
                </a>
                <a href="@Url.Action("Index", "ProductFeature", new { productId = Model.Product.ProductId })"
                    class="btn btn-outline-primary">
                    <i class="fas fa-star me-1"></i>Features
                </a>
                <a href="@Url.Action("Index", "ProductKeyManagement", new { productId = Model.Product.ProductId })"
                    class="btn btn-outline-primary">
                    <i class="fas fa-key me-1"></i>Keys
                </a>
            </div>
        </div>
    </div>


    <div class="row g-2">
        <!-- Main Content -->
        <div class="col-lg-9">
            <!-- Status Overview Cards -->
            <partial name="_StatsTiles" model="Model.StatsTiles" />
            <!-- Product Information -->
            <div class="edit-section mb-3">
                <div class="section-header">
                    <h5><i class="fas fa-info-circle me-2"></i>Product Information</h5>
                </div>
                <div class="section-content">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Product ID</label>
                                <div class="detail-value">
                                    <i class="fas fa-fingerprint me-2 text-muted"></i>
                                    <span class="text-monospace">@Model.Product.ProductId</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Status</label>
                                <div class="detail-value">
                                    <i class="fas fa-circle-check me-2 text-muted"></i>
                                    @if (Model.Product.IsActive)
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-check-circle me-1"></i>Active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">
                                            <i class="fas fa-pause-circle me-1"></i>Inactive
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Product Name</label>
                                <div class="detail-value">
                                    <i class="fas fa-box me-2 text-muted"></i>
                                    <span>@Model.Product.ProductName</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Product Type</label>
                                <div class="detail-value">
                                    <i class="fas fa-tag me-2 text-muted"></i>
                                    <span class="badge bg-primary">@Model.Product.ProductType</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Version</label>
                                <div class="detail-value">
                                    <i class="fas fa-code-branch me-2 text-muted"></i>
                                    <span>@Model.Product.Version</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Created</label>
                                <div class="detail-value">
                                    <i class="fas fa-clock me-2 text-muted"></i>
                                    <span>@Model.Product.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Last Updated</label>
                                <div class="detail-value">
                                    <i class="fas fa-clock me-2 text-muted"></i>
                                    <span>@Model.Product.UpdatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Created By</label>
                                <div class="detail-value">
                                    <i class="fas fa-user me-2 text-muted"></i>
                                    <span>@Model.Product.CreatedBy</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div> <!-- Metadata Section -->
            @if (Model.Product.Metadata.Any())
            {
                <div class="edit-section mb-3">
                    <div class="section-header">
                        <h5><i class="fas fa-tags me-2"></i>Metadata</h5>
                    </div>
                    <div class="section-content">
                        <div class="row g-3">
                            @foreach (var metadata in Model.Product.Metadata)
                            {
                                <div class="col-md-6 col-lg-4">
                                    <div class="detail-group">
                                        <label class="detail-label">@metadata.Key</label>
                                        <div class="detail-value">
                                            <i class="fas fa-info-circle me-2 text-muted"></i>
                                            <span>@metadata.Value</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
 <!-- Available Features -->
            @if (Model.Product.AvailableFeatures.Any())
            {
                <div class="edit-section mb-3">
                    <div class="section-header">
                        <h5><i class="fas fa-cogs me-2"></i>Available Features</h5>
                    </div>
                    <div class="section-content">
                        <div class="row">
                            @foreach (var feature in Model.Product.AvailableFeatures)
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="feature-card">
                                        <div class="feature-header">
                                            <h6 class="feature-name">@feature.Name</h6>
                                            <span class="feature-category badge bg-info">@feature.Category</span>
                                        </div>
                                        <div class="feature-content">
                                            <p class="feature-description">@feature.Description</p>
                                            <span class="feature-tier badge bg-secondary">@feature.MinimumTier+</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
 <!-- Recent Licenses -->
            @if (Model.RecentLicenses.Any())
            {
                <div class="edit-section mb-3">
                    <div class="section-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5><i class="fas fa-history me-2"></i>Recent Licenses</h5>
                            <a href="@Url.Action("Index", "License", new { productId = Model.Product.ProductId })"
                                class="btn btn-outline-primary btn-sm">View All</a>
                        </div>
                    </div>
                    <div class="section-content">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>License ID</th>
                                        <th>Consumer</th>
                                        <th>Tier</th>
                                        <th>Status</th>
                                        <th>Valid Until</th>
                                        <th>Created</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var license in Model.RecentLicenses.Take(5))
                                    {
                                        <tr>
                                            <td><span class="text-monospace small">@license.LicenseId.Substring(0, Math.Min(8,
                                                                                                license.LicenseId.Length))...</span></td>
                                    <td>@license.ConsumerName</td>
                                    <td><span class="badge bg-secondary">@license.Tier</span></td>
                                    <td>
                                        @if (license.Status == TechWayFit.Licensing.Core.Models.LicenseStatus.Active &&
                                                                                license.ValidTo > DateTime.UtcNow)
                                                {
                                                    @if (license.IsExpiringSoon)
                                                    {
                                                        <span class="badge bg-warning">Expiring Soon</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-success">Active</span>
                                                    }
                                                }
                                                else if (license.ValidTo < DateTime.UtcNow)
                                                {
                                                    <span class="badge bg-danger">Expired</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">@license.Status</span>
                                                }
                                            </td>
                                            <td>@license.ValidTo.ToString("MMM dd, yyyy")</td>
                                            <td>@license.CreatedAt.ToString("MMM dd, yyyy")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="edit-section mb-3">
                    <div class="section-header">
                        <h5><i class="fas fa-history me-2"></i>Recent Licenses</h5>
                    </div>
                    <div class="section-content">
                        <div class="text-center py-4">
                            <i class="fas fa-certificate fa-3x text-muted mb-3"></i>
                            <h6 class="text-muted">No Licenses Generated</h6>
                            <p class="text-muted">This product doesn't have any licenses yet.</p>
                            <a asp-controller="License" asp-action="Create" asp-route-productId="@Model.Product.ProductId"
                                class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Generate First License
                            </a>
                        </div>
                    </div>
                </div>
            }
 <!-- License Breakdown -->

            <!-- RSA Key Management -->
            @if (Model.KeyInfo != null)
            {
                <div class="sidebar-section">
                    <partial name="_ProductKeyInfo" model="Model.KeyInfo" />
                </div>
            }

        </div> <!-- Sidebar -->
        <div class="col-lg-3">
            <!-- Product Lifecycle Management -->
            <div class="sidebar-section mb-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-cog me-2"></i>Product Lifecycle Management
                            </h6>
                            <span class="badge bg-light text-primary">
                                @if (Model.Product.IsActive)
                                {
                                    <i class="fas fa-check-circle me-1"></i>
                                    @("Active")
                                }
                                else
                                {
                                    <i class="fas fa-pause-circle me-1"></i>
                                    @("Inactive")
                                }
                            </span>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Status Overview -->
                        <div class="text-center mb-4">
                            <div class="status-indicator">
                                @if (Model.Product.IsActive)
                                {
                                    <div class="status-circle bg-success mx-auto">
                                        <i class="fas fa-check text-white fa-lg"></i>
                                    </div>
                                    <h6 class="mt-2 text-success fw-bold">Product Active</h6>
                                    <p class="text-muted small mb-0">Ready for license generation</p>
                                }
                                else
                                {
                                    <div class="status-circle bg-secondary mx-auto">
                                        <i class="fas fa-pause text-white fa-lg"></i>
                                    </div>
                                    <h6 class="mt-2 text-secondary fw-bold">Product Inactive</h6>
                                    <p class="text-muted small mb-0">License generation disabled</p>
                                }
                            </div>
                        </div>

                        <!-- Lifecycle Actions -->
                        <div class="d-grid gap-2">
                            @if (!Model.Product.IsActive)
                            {
                                <button type="button" class="btn btn-success btn-sm"
                                    onclick="activateProduct('@Model.Product.ProductId')">
                                    <i class="fas fa-play me-2"></i>Activate Product
                                </button>
                            }
                            @if (Model.Product.IsActive)
                            {
                                <button type="button" class="btn btn-warning btn-sm"
                                    onclick="deactivateProduct('@Model.Product.ProductId')">
                                    <i class="fas fa-pause me-2"></i>Deactivate Product
                                </button>
                            }

                            <div class="dropdown">
                                <button class="btn btn-outline-primary btn-sm dropdown-toggle w-100" type="button"
                                    data-bs-toggle="dropdown">
                                    <i class="fas fa-exchange-alt me-2"></i>Change Status
                                </button>
                                <ul class="dropdown-menu w-100">
                                    <li>
                                        <h6 class="dropdown-header">
                                            <i class="fas fa-traffic-light me-2"></i>Available Statuses
                                        </h6>
                                    </li>
                                    <li><button class="dropdown-item"
                                            onclick="updateProductStatus('@Model.Product.ProductId', 'PreRelease')">
                                            <i class="fas fa-flask text-info me-2"></i>Pre-Release
                                        </button></li>
                                    <li><button class="dropdown-item"
                                            onclick="updateProductStatus('@Model.Product.ProductId', 'Active')">
                                            <i class="fas fa-check-circle text-success me-2"></i>Active
                                        </button></li>
                                    <li><button class="dropdown-item"
                                            onclick="updateProductStatus('@Model.Product.ProductId', 'Inactive')">
                                            <i class="fas fa-pause-circle text-secondary me-2"></i>Inactive
                                        </button></li>
                                    <li><button class="dropdown-item"
                                            onclick="updateProductStatus('@Model.Product.ProductId', 'Deprecated')">
                                            <i class="fas fa-exclamation-triangle text-warning me-2"></i>Deprecated
                                        </button></li>
                                    <li>
                                        <hr class="dropdown-divider">
                                    </li>
                                    <li><button class="dropdown-item text-danger"
                                            onclick="decommissionProduct('@Model.Product.ProductId')">
                                            <i class="fas fa-times-circle me-2"></i>Schedule Decommission
                                        </button></li>
                                </ul>
                            </div>

                            <button type="button" class="btn btn-outline-secondary btn-sm"
                                onclick="showStatusHistory()">
                                <i class="fas fa-history me-2"></i>Status History
                            </button>
                        </div>

                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="sidebar-section">
                <div class="section-header">
                    <h6><i class="fas fa-bolt me-2"></i>Quick Actions</h6>
                </div>
                <div class="section-content">
                    <div class="d-grid gap-2">
                        <a asp-controller="License" asp-action="Create" asp-route-productId="@Model.Product.ProductId"
                            class="btn btn-outline-success">
                            <i class="fas fa-plus me-2"></i>Generate License
                        </a>
                        <a href="@Url.Action("Index", "License", new { productId = Model.Product.ProductId })"
                            class="btn btn-outline-secondary">
                            <i class="fas fa-history me-2"></i>View All Licenses
                        </a>
                        <a href="@Url.Action("Edit", new { id = Model.Product.ProductId })"
                            class="btn btn-outline-warning">
                            <i class="fas fa-edit me-2"></i>Edit Product
                        </a>
                        <button class="btn btn-outline-secondary" onclick="generateReport()">
                            <i class="fas fa-chart-bar me-2"></i>Generate Report
                        </button>
                    </div>
                </div>
            </div>


        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the product <strong>@Model.Product.ProductName</strong>?</p>
                @if (Model.Statistics.ActiveLicenses > 0)
                {
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> This product has @Model.Statistics.ActiveLicenses active license(s).
                        Deleting will deactivate the product but preserve license history.
                    </div>
                }
                <p class="text-muted small">This action will deactivate the product record but preserve all license
                    history for audit purposes.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="Delete" asp-route-id="@Model.Product.ProductId" method="post" class="d-inline">
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i>Delete Product
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        /* Custom styles for Product Lifecycle Management */
        .status-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
    </style>

    <script>
        function showDeleteModal() {
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        function generateReport() {
            // TODO: Implement report generation functionality
            alert('Report generation functionality will be implemented in a future update.');
        }

        function showStatusHistory() {
            // TODO: Implement status history functionality
            alert('Status history functionality will be implemented in a future update.');
        }

        // Product Lifecycle Management Functions
        function activateProduct(productId) {
            if (confirm('Are you sure you want to activate this product?')) {
                fetch(`/api/product/${productId}/activate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showAlert('Product activated successfully!', 'success');
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showAlert('Failed to activate product: ' + (data.message || 'Unknown error'), 'danger');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showAlert('An error occurred while activating the product.', 'danger');
                    });
            }
        }

        function deactivateProduct(productId) {
            const reason = prompt('Optional: Provide a reason for deactivation:');
            if (reason !== null) { // User didn't cancel
                const requestBody = reason ? { reason: reason } : {};

                fetch(`/api/product/${productId}/deactivate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(requestBody)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showAlert('Product deactivated successfully!', 'warning');
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showAlert('Failed to deactivate product: ' + (data.message || 'Unknown error'), 'danger');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showAlert('An error occurred while deactivating the product.', 'danger');
                    });
            }
        }

        function updateProductStatus(productId, status) {
            const reason = prompt(`Optional: Provide a reason for changing status to ${status}:`);
            if (reason !== null) { // User didn't cancel
                const requestBody = { status: status };
                if (reason) requestBody.reason = reason;

                fetch(`/api/product/${productId}/status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(requestBody)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showAlert(`Product status updated to ${status} successfully!`, 'info');
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showAlert('Failed to update product status: ' + (data.message || 'Unknown error'), 'danger');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showAlert('An error occurred while updating the product status.', 'danger');
                    });
            }
        }

        function decommissionProduct(productId) {
            const decommissionDate = prompt('Enter the decommission date (YYYY-MM-DD):');
            if (decommissionDate && decommissionDate.match(/^\d{4}-\d{2}-\d{2}$/)) {
                const reason = prompt('Optional: Provide a reason for decommissioning:');
                if (reason !== null) { // User didn't cancel
                    const requestBody = { decommissionDate: decommissionDate };
                    if (reason) requestBody.reason = reason;

                    fetch(`/api/product/${productId}/decommission`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify(requestBody)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                showAlert(`Product scheduled for decommission on ${decommissionDate}!`, 'info');
                                setTimeout(() => location.reload(), 1500);
                            } else {
                                showAlert('Failed to schedule decommission: ' + (data.message || 'Unknown error'), 'danger');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            showAlert('An error occurred while scheduling decommission.', 'danger');
                        });
                }
            } else if (decommissionDate !== null) {
                showAlert('Please enter a valid date in YYYY-MM-DD format.', 'danger');
            }
        }

        function showAlert(message, type) {
            // Create alert element
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.role = 'alert';
            alertDiv.innerHTML = `
                    <strong><i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'} me-2"></i></strong>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;

            // Insert into body
            document.body.appendChild(alertDiv);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // Initialize tooltips if you want to add them later
        document.addEventListener('DOMContentLoaded', function () {
            // Add subtle entrance animation
            const card = document.querySelector('.card');
            if (card) {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    card.style.transition = 'all 0.5s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 100);
            }
        });
    </script>
}
