@using TechWayFit.Licensing.Core.Models
@model TechWayFit.Licensing.Management.Web.ViewModels.License.LicenseGenerationViewModel
@{
    ViewData["Title"] = "Create License";
    
    // Prepare header data
    var headerModel = new TechWayFit.Licensing.Management.Web.ViewModels.Shared.PageHeaderViewModel
    {
        Title = "Create License",
        Icon = "fas fa-certificate",
        BreadcrumbItems = new List<TechWayFit.Licensing.Management.Web.ViewModels.Shared.BreadcrumbItem>
        {
            new() { Text = "Dashboard", Controller = "License", Action = "Index" },
            new() { Text = "Licenses", Controller = "License", Action = "Index" },
            new() { Text = "Create", IsActive = true }
        },
        BackButtonText = "Back to Licenses",
        BackButtonController = "License",
        BackButtonAction = "Index"
    };
}


@await Html.PartialAsync("_PageHeaderPartial", headerModel)

<div class="container-fluid py-3">
    <form asp-action="Create" method="post" class="needs-validation" novalidate>
        <div class="row">
            <div class="col-md-8">
                <!-- Basic Information Section -->
                <div class="form-section">
                    <h5><i class="fas fa-info-circle me-2"></i>Basic Information</h5>
                    <div class="row g-3">                        <div class="col-md-6">
                            <label asp-for="ProductId" class="form-label">Product</label>
                            <select asp-for="ProductId" class="form-select" required asp-items="ViewBag.AvailableProducts">
                                <option value="">Select a Product</option>
                            </select>
                            <span asp-validation-for="ProductId" class="invalid-feedback"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="ConsumerId" class="form-label">Consumer</label>
                            <select asp-for="ConsumerId" class="form-select" required asp-items="ViewBag.AvailableConsumers">
                                <option value="">Select a Consumer</option>
                            </select>
                            <span asp-validation-for="ConsumerId" class="invalid-feedback"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="ProductTierId" class="form-label">Product Tier</label>
                            <select asp-for="ProductTierId" class="form-select" required id="productTierSelect">
                                <option value="">Select a Tier</option>
                                <!-- Will be populated dynamically -->
                            </select>
                            <span asp-validation-for="ProductTierId" class="invalid-feedback"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="Tier" class="form-label">License Tier</label>
                            <select asp-for="Tier" class="form-select" required>
                                @foreach (LicenseTier tier in Enum.GetValues<LicenseTier>())
                                {
                                    <option value="@tier">@tier</option>
                                }
                            </select>
                            <span asp-validation-for="Tier" class="invalid-feedback"></span>
                        </div>
                    </div>
                </div>

                <!-- Contact Information Section -->
                <div class="form-section">
                    <h5><i class="fas fa-user me-2"></i>Contact Information</h5>
                    <div class="alert alert-info alert-persistent">
                        <i class="fas fa-info-circle me-1"></i>Contact information is automatically populated from the selected consumer and cannot be edited here.
                    </div>
                    <!-- Contact Selection Dropdown -->
                    <div class="row g-3 mb-3">
                        <div class="col-md-12">
                            <label for="ContactSelection" class="form-label">Select Contact Person</label>
                            <select id="ContactSelection" class="form-select">
                                <option value="">Select a consumer first to load contacts</option>
                            </select>
                        </div>
                    </div>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label asp-for="LicensedTo" class="form-label">Licensed To</label>
                            <input asp-for="LicensedTo" class="form-control" placeholder="Select a consumer to populate" readonly required />
                            <span asp-validation-for="LicensedTo" class="invalid-feedback"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="ContactPerson" class="form-label">Contact Person</label>
                            <input asp-for="ContactPerson" class="form-control" placeholder="Will be loaded from consumer" readonly required />
                            <span asp-validation-for="ContactPerson" class="invalid-feedback"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="ContactEmail" class="form-label">Contact Email</label>
                            <input asp-for="ContactEmail" type="email" class="form-control" placeholder="Will be loaded from consumer" readonly required />
                            <span asp-validation-for="ContactEmail" class="invalid-feedback"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="SecondaryContactPerson" class="form-label">Secondary Contact (Optional)</label>
                            <input asp-for="SecondaryContactPerson" class="form-control" placeholder="No secondary contact available" readonly />
                            <span asp-validation-for="SecondaryContactPerson" class="invalid-feedback"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="SecondaryContactEmail" class="form-label">Secondary Email (Optional)</label>
                            <input asp-for="SecondaryContactEmail" type="email" class="form-control" placeholder="No secondary email available" readonly />
                            <span asp-validation-for="SecondaryContactEmail" class="invalid-feedback"></span>
                        </div>
                    </div>
                </div>
 

                <!-- License Configuration Section -->
                <div class="form-section">
                    <h5><i class="fas fa-cog me-2"></i>License Configuration</h5>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label asp-for="ValidFrom" class="form-label">Valid From</label>
                            <input asp-for="ValidFrom" type="datetime-local" class="form-control" required />
                            <span asp-validation-for="ValidFrom" class="invalid-feedback"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="ValidTo" class="form-label">Valid To</label>
                            <input asp-for="ValidTo" type="datetime-local" class="form-control" required />
                            <span asp-validation-for="ValidTo" class="invalid-feedback"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="MaxApiCallsPerMonth" class="form-label">Max API Calls Per Month</label>
                            <input asp-for="MaxApiCallsPerMonth" type="number" class="form-control" min="0" placeholder="Unlimited if empty" />
                            <span asp-validation-for="MaxApiCallsPerMonth" class="invalid-feedback"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="MaxConcurrentConnections" class="form-label">Max Concurrent Connections</label>
                            <input asp-for="MaxConcurrentConnections" type="number" class="form-control" min="0" placeholder="Unlimited if empty" />
                            <span asp-validation-for="MaxConcurrentConnections" class="invalid-feedback"></span>
                        </div>
                    </div>
                </div>

                <!-- License Model Section -->
                <div class="form-section">
                    <h5><i class="fas fa-key me-2"></i>License Model</h5>
                    <div class="alert alert-info alert-persistent">
                        <i class="fas fa-info-circle me-1"></i>Choose the licensing model based on your activation requirements.
                    </div>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label asp-for="LicenseModel" class="form-label">License Type</label>
                            <select asp-for="LicenseModel" class="form-select" required id="licenseModelSelect">
                                @foreach (TechWayFit.Licensing.Management.Core.Models.Enums.LicenseType licenseType in Enum.GetValues<TechWayFit.Licensing.Management.Core.Models.Enums.LicenseType>())
                                {
                                    <option value="@licenseType">
                                        @(licenseType switch {
                                            TechWayFit.Licensing.Management.Core.Models.Enums.LicenseType.ProductKey => "Product Key (Online Activation)",
                                            TechWayFit.Licensing.Management.Core.Models.Enums.LicenseType.ProductLicenseFile => "Product License (Offline Activation)",
                                            TechWayFit.Licensing.Management.Core.Models.Enums.LicenseType.VolumetricLicense => "Volumetric License (Multi-User Keys)",
                                            _ => licenseType.ToString()
                                        })
                                    </option>
                                }
                            </select>
                            <span asp-validation-for="LicenseModel" class="invalid-feedback"></span>
                            <div class="form-text" id="licenseModelDescription">
                                Select a license model to see its description.
                            </div>
                        </div>
                        <div class="col-md-6" id="maxUsersContainer">
                            <label asp-for="MaxAllowedUsers" class="form-label">Max Allowed Users</label>
                            <input asp-for="MaxAllowedUsers" type="number" class="form-control" min="1" placeholder="Enter maximum number of users" />
                            <span asp-validation-for="MaxAllowedUsers" class="invalid-feedback"></span>
                            <div class="form-text">
                                Maximum number of concurrent users allowed for this license.
                            </div>
                        </div>
                    </div>
                    
                    <!-- License Model Information Cards -->
                    <div class="row g-3 mt-2">
                        <div class="col-md-4">
                            <div class="card h-100 license-model-card" data-model="ProductKey">
                                <div class="card-body">
                                    <h6 class="card-title"><i class="fas fa-cloud me-1"></i>Product Key</h6>
                                    <p class="card-text small">
                                        Online activation with XXXX-XXXX-XXXX-XXXX format keys. 
                                        Requires internet connection for activation.
                                    </p>
                                    <small class="text-muted">✓ Supports max users limit</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card h-100 license-model-card" data-model="ProductLicenseFile">
                                <div class="card-body">
                                    <h6 class="card-title"><i class="fas fa-file-download me-1"></i>Product License</h6>
                                    <p class="card-text small">
                                        Offline activation with downloadable license files. 
                                        No internet required after initial download.
                                    </p>
                                    <small class="text-muted">✓ Supports max users limit</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card h-100 license-model-card" data-model="VolumetricLicense">
                                <div class="card-body">
                                    <h6 class="card-title"><i class="fas fa-users me-1"></i>Volumetric License</h6>
                                    <p class="card-text small">
                                        Multi-user keys with usage limits (XXXX-XXXX-XXXX-0001 to 9999). 
                                        Single key for multiple activations.
                                    </p>
                                    <small class="text-muted">ⓘ Uses internal user tracking</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Features Section -->
                <div class="form-section">
                    <h5><i class="fas fa-puzzle-piece me-2"></i>Features</h5>
                    <div class="feature-selection" id="featuresContainer">
                        @if (Model.AvailableFeatures?.Any() == true)
                        {
                            @foreach (var feature in Model.AvailableFeatures)
                            {
                                <div class="feature-item">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" 
                                               name="SelectedFeatures" value="@feature.FeatureId" 
                                               id="feature_@feature.FeatureId"
                                               @(Model.SelectedFeatures.Contains(feature.FeatureId) ? "checked" : "") />
                                        <label class="form-check-label" for="feature_@feature.FeatureId">
                                            <strong>@feature.Name</strong>
                                            @if (feature.MinimumTier != LicenseTier.Community)
                                            {
                                                <span class="badge bg-secondary ms-1">@feature.MinimumTier+</span>
                                            }
                                            @if (!string.IsNullOrEmpty(feature.Description))
                                            {
                                                <br><small class="text-muted">@feature.Description</small>
                                            }
                                        </label>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted mb-0">No features available. Please select a product first.</p>
                        }
                    </div>
                </div>

                <!-- Metadata Section -->
                <div class="form-section">
                    <h5><i class="fas fa-tags me-2"></i>Additional Metadata</h5>
                    <div id="metadataContainer">
                        @if (Model.Metadata?.Any() == true)
                        {
                            @foreach (var metadata in Model.Metadata)
                            {
                                <div class="metadata-row row g-2">
                                    <div class="col-md-5">
                                        <input type="text" class="form-control" name="Metadata.Keys" value="@metadata.Key" placeholder="Key" />
                                    </div>
                                    <div class="col-md-5">
                                        <input type="text" class="form-control" name="Metadata.Values" value="@metadata.Value" placeholder="Value" />
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-outline-danger btn-sm w-100" onclick="removeMetadataRow(this)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    <button type="button" class="btn btn-outline-primary btn-sm btn-add-metadata" onclick="addMetadataRow()">
                        <i class="fas fa-plus me-1"></i>Add Metadata
                    </button>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-md-4">
                <div class="form-section">
                    <h5><i class="fas fa-info me-2"></i>Information</h5>
                    <div class="alert alert-info  alert-persistent">
                        <h6><i class="fas fa-lightbulb me-1"></i>Tips</h6>
                        <ul class="mb-0 small">
                            <li>Select a product first to load available tiers and features</li>
                            <li>Consumer must be registered before creating a license</li>
                            <li>Valid To date must be after Valid From date</li>
                            <li>Features are filtered based on the selected tier</li>
                        </ul>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(Model.CreatedBy))
                    {
                        <div class="mb-3">
                            <strong>Created By:</strong> @Model.CreatedBy
                        </div>
                    }
                </div>

                <!-- Actions -->
                <div class="form-section">
                    <h5><i class="fas fa-tasks me-2"></i>Actions</h5>
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-plus me-1"></i>Create License
                        </button>
                        <a href="@Url.Action("Index", "License")" class="btn btn-outline-secondary">
                            <i class="fas fa-times me-1"></i>Cancel
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Hidden fields for validation -->
        <input asp-for="CreatedBy" type="hidden" />
    </form>
</div>

@section Styles {
    <style>
        .license-model-card {
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid #dee2e6;
        }
        
        .license-model-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .license-model-card.border-primary {
            border-color: #0d6efd !important;
            box-shadow: 0 2px 4px rgba(13, 110, 253, 0.2);
        }
        
        .feature-selection {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
        }
        
        .metadata-row {
            margin-bottom: 0.5rem;
        }
        
        .form-section {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .alert-persistent {
            margin-bottom: 1rem;
        }
    </style>
}

@section Scripts {
    <script src="~/js/product-features.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Load consumer contact information when consumer is selected
            const consumerSelect = document.getElementById('ConsumerId');
            const contactSelect = document.getElementById('ContactSelection');
            
            if (consumerSelect) {
                consumerSelect.addEventListener('change', function() {
                    const consumerId = this.value;
                    if (consumerId) {
                        loadConsumerContacts(consumerId);
                    } else {
                        clearContactInfo();
                        clearContactDropdown();
                    }
                });
            }

            // Handle contact selection
            if (contactSelect) {
                contactSelect.addEventListener('change', function() {
                    const selectedContactData = this.value;
                    if (selectedContactData) {
                        try {
                            const contactInfo = JSON.parse(selectedContactData);
                            populateContactFields(contactInfo);
                        } catch (error) {
                            console.error('Error parsing contact data:', error);
                        }
                    } else {
                        clearContactInfo();
                    }
                });
            }

            // Load contacts for initially selected consumer
            if (consumerSelect && consumerSelect.value) {
                loadConsumerContacts(consumerSelect.value);
            }

            // Load product tiers when product is selected
            const productSelect = document.getElementById('ProductId');
            const tierSelect = document.getElementById('productTierSelect');
            
            if (productSelect) {
                productSelect.addEventListener('change', function() {
                    const productId = this.value;
                    if (productId) {
                        loadProductTiers(productId);
                        loadProductFeatures(productId);
                    } else {
                        tierSelect.innerHTML = '<option value="">Select a Tier</option>';
                        clearFeatures();
                    }
                });
            }

            // Load tiers for initially selected product
            if (productSelect && productSelect.value) {
                loadProductTiers(productSelect.value);
                loadProductFeatures(productSelect.value);
            }

            // Form validation
            const form = document.querySelector('.needs-validation');
            if (form) {
                form.addEventListener('submit', function(event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                });
            }

            // Date validation
            const validFromInput = document.querySelector('input[name="ValidFrom"]');
            const validToInput = document.querySelector('input[name="ValidTo"]');
            
            if (validFromInput && validToInput) {
                function validateDates() {
                    const validFrom = new Date(validFromInput.value);
                    const validTo = new Date(validToInput.value);
                    
                    if (validTo <= validFrom) {
                        validToInput.setCustomValidity('Valid To must be after Valid From');
                    } else {
                        validToInput.setCustomValidity('');
                    }
                }
                
                validFromInput.addEventListener('change', validateDates);
                validToInput.addEventListener('change', validateDates);
            }

            // License Model handling
            const licenseModelSelect = document.getElementById('licenseModelSelect');
            const maxUsersContainer = document.getElementById('maxUsersContainer');
            const licenseModelCards = document.querySelectorAll('.license-model-card');
            
            if (licenseModelSelect) {
                function updateLicenseModelUI() {
                    const selectedModel = licenseModelSelect.value;
                    
                    // Update card highlighting
                    licenseModelCards.forEach(card => {
                        const cardModel = card.getAttribute('data-model');
                        if (cardModel === selectedModel) {
                            card.classList.add('border-primary', 'bg-light');
                        } else {
                            card.classList.remove('border-primary', 'bg-light');
                        }
                    });
                    
                    // Show/hide max users field based on license model
                    if (selectedModel === 'VolumetricLicense') {
                        maxUsersContainer.style.display = 'none';
                        // Clear the max users value for volumetric licenses
                        const maxUsersInput = maxUsersContainer.querySelector('input');
                        if (maxUsersInput) {
                            maxUsersInput.value = '';
                            maxUsersInput.removeAttribute('required');
                        }
                    } else {
                        maxUsersContainer.style.display = 'block';
                        // Make max users required for Product Key and Product License
                        const maxUsersInput = maxUsersContainer.querySelector('input');
                        if (maxUsersInput) {
                            maxUsersInput.setAttribute('required', 'required');
                        }
                    }
                }
                
                // Set initial state
                updateLicenseModelUI();
                
                // Handle changes
                licenseModelSelect.addEventListener('change', updateLicenseModelUI);
                
                // Add click handlers to license model cards
                licenseModelCards.forEach(card => {
                    card.addEventListener('click', function() {
                        const cardModel = this.getAttribute('data-model');
                        licenseModelSelect.value = cardModel;
                        updateLicenseModelUI();
                    });
                });
            }
        });

        function loadProductTiers(productId) {
            const tierSelect = document.getElementById('productTierSelect');
            
            // Show loading state
            tierSelect.innerHTML = '<option value="">Loading...</option>';
            tierSelect.disabled = true;
            
            fetch(`/api/Product/${productId}/tiers`)
                .then(response => response.json())
                .then(tiers => {
                    tierSelect.innerHTML = '<option value="">Select a Tier</option>';
                    tiers.data.forEach(tier => {
                        const option = document.createElement('option');
                        option.value = tier.tierId || tier.TierId;
                        option.textContent = `${tier.name || tier.Name} - $${tier.monthlyPrice || tier.MonthlyPrice || 0}/month`;
                        tierSelect.appendChild(option);
                    });
                    tierSelect.disabled = false;
                })
                .catch(error => {
                    console.error('Error loading tiers:', error);
                    tierSelect.innerHTML = '<option value="">Error loading tiers</option>';
                    tierSelect.disabled = false;
                });
        }

        function loadProductFeatures(productId) {
            const featuresContainer = document.getElementById('featuresContainer');
            
            fetch(`/api/Product/${productId}/features`)
                .then(response => response.json())
                .then(features => {
                    if (features && features.data && features.data.length > 0) {
                        featuresContainer.innerHTML = '';
                        features.data.forEach(feature => {
                            const featureDiv = document.createElement('div');
                            featureDiv.className = 'feature-item';
                            featureDiv.innerHTML = `
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" 
                                           name="SelectedFeatures" value="${feature.featureId}" 
                                           id="feature_${feature.featureId}" />
                                    <label class="form-check-label" for="feature_${feature.featureId}">
                                        <strong>${feature.name}</strong>
                                        ${feature.minimumTier !== 'Community' ? `<span class="badge bg-secondary ms-1">${feature.minimumTier}+</span>` : ''}
                                        ${feature.description ? `<br><small class="text-muted">${feature.description}</small>` : ''}
                                    </label>
                                </div>
                            `;
                            featuresContainer.appendChild(featureDiv);
                        });
                    } else {
                        featuresContainer.innerHTML = '<p class="text-muted mb-0">No features available for this product.</p>';
                    }
                })
                .catch(error => {
                    console.error('Error loading features:', error);
                    featuresContainer.innerHTML = '<p class="text-danger mb-0">Error loading features.</p>';
                });
        }

        function clearFeatures() {
            const featuresContainer = document.getElementById('featuresContainer');
            featuresContainer.innerHTML = '<p class="text-muted mb-0">No features available. Please select a product first.</p>';
        }

        function addMetadataRow() {
            const container = document.getElementById('metadataContainer');
            const row = document.createElement('div');
            row.className = 'metadata-row row g-2';
            row.innerHTML = `
                <div class="col-md-5">
                    <input type="text" class="form-control" name="Metadata.Keys" placeholder="Key" />
                </div>
                <div class="col-md-5">
                    <input type="text" class="form-control" name="Metadata.Values" placeholder="Value" />
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-outline-danger btn-sm w-100" onclick="removeMetadataRow(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
            container.appendChild(row);
        }

        function removeMetadataRow(button) {
            const row = button.closest('.metadata-row');
            row.remove();
        }

        function loadConsumerContacts(consumerId) {
            const contactSelect = document.getElementById('ContactSelection');
            
            // Show loading state
            contactSelect.innerHTML = '<option value="">Loading contacts...</option>';
            contactSelect.disabled = true;
            
            // First, get the consumer's basic information
            fetch(`/api/Consumer/${consumerId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(consumer => {
                    // Then get the consumer's additional contacts
                    return fetch(`/api/Consumer/${consumerId}/contacts`)
                        .then(response => {
                            if (!response.ok) {
                                // If contacts API fails, still use primary consumer info
                                console.warn('Could not load additional contacts, using primary consumer info only');
                                return { data: [] };
                            }
                            return response.json();
                        })
                        .then(contactsResult => {
                            const contacts = contactsResult.data || [];
                            populateContactDropdown(consumer.data, contacts);
                        });
                })
                .catch(error => {
                    console.error('Error loading consumer contacts:', error);
                    contactSelect.innerHTML = '<option value="">Error loading contacts</option>';
                    contactSelect.disabled = false;
                    showMessage('Error loading consumer contact information. Please try again.', 'error');
                });
        }

        function populateContactDropdown(consumer, additionalContacts) {
            const contactSelect = document.getElementById('ContactSelection');
            
            // Clear existing options
            contactSelect.innerHTML = '';
            
            // Add primary consumer contact as first option
            const primaryContactData = {
                type: 'primary',
                licensedTo: consumer.companyName || consumer.company || consumer.name || '',
                contactPerson: consumer.primaryContactName || consumer.name || '',
                contactEmail: consumer.primaryContactEmail || consumer.email || '',
                secondaryContactPerson: consumer.secondaryContactName || '',
                secondaryContactEmail: consumer.secondaryContactEmail || ''
            };
            
            const primaryOption = document.createElement('option');
            primaryOption.value = JSON.stringify(primaryContactData);
            primaryOption.textContent = `${primaryContactData.contactPerson} (Primary Contact)`;
            contactSelect.appendChild(primaryOption);
            
            // Add additional contacts if available
            if (additionalContacts && additionalContacts.length > 0) {
                additionalContacts.forEach(contact => {
                    const contactData = {
                        type: 'additional',
                        licensedTo: consumer.companyName || consumer.company || consumer.name || '',
                        contactPerson: contact.contactName || '',
                        contactEmail: contact.contactEmail || '',
                        secondaryContactPerson: '',
                        secondaryContactEmail: '',
                        contactPhone: contact.contactPhone || '',
                        contactAddress: contact.contactAddress || '',
                        companyDivision: contact.companyDivision || '',
                        contactDesignation: contact.contactDesignation || '',
                        isPrimary: contact.isPrimary || false
                    };
                    
                    const option = document.createElement('option');
                    option.value = JSON.stringify(contactData);

                    let displayText = contact.contactName || 'Unnamed Contact'; // Updated property name
                    if (contact.companyDivision) { // Updated property name
                        displayText += ` (${contact.companyDivision})`;
                    }
                    if (contact.contactDesignation) { // Updated property name
                        displayText += ` - ${contact.contactDesignation}`;
                    }
                    if (contact.isPrimary) { // Updated property name
                        displayText += ' [Primary]';
                    }
                    
                    option.textContent = displayText;
                    contactSelect.appendChild(option);
                });
            }
            
            // Enable the dropdown
            contactSelect.disabled = false;
            
            // Auto-select the first option (primary contact) and populate fields
            if (contactSelect.options.length > 0) {
                contactSelect.selectedIndex = 0;
                const selectedContactData = JSON.parse(contactSelect.value);
                populateContactFields(selectedContactData);
                showMessage('Contact information loaded successfully from consumer data.', 'success');
            }
        }

        function populateContactFields(contactInfo) {
            // Populate the form fields
            document.getElementById('LicensedTo').value = contactInfo.licensedTo || '';
            document.getElementById('ContactPerson').value = contactInfo.contactPerson || '';
            document.getElementById('ContactEmail').value = contactInfo.contactEmail || '';
            document.getElementById('SecondaryContactPerson').value = contactInfo.secondaryContactPerson || '';
            document.getElementById('SecondaryContactEmail').value = contactInfo.secondaryContactEmail || '';
        }

        function clearContactDropdown() {
            const contactSelect = document.getElementById('ContactSelection');
            contactSelect.innerHTML = '<option value="">Select a consumer first to load contacts</option>';
            contactSelect.disabled = true;
        }

        function clearContactInfo() {
            document.getElementById('LicensedTo').value = '';
            document.getElementById('ContactPerson').value = '';
            document.getElementById('ContactEmail').value = '';
            document.getElementById('SecondaryContactPerson').value = '';
            document.getElementById('SecondaryContactEmail').value = '';
            clearContactDropdown();
        }

        function showMessage(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
            
            const messageHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show mt-3" role="alert">
                    <i class="fas ${iconClass} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Remove existing messages
            const existingAlerts = document.querySelectorAll('.alert-dismissible');
            existingAlerts.forEach(alert => alert.remove());
            
            // Add new message after the form header
            const formHeader = document.querySelector('.form-header');
            if (formHeader) {
                formHeader.insertAdjacentHTML('afterend', messageHtml);
            }
            
            // Auto-dismiss success messages after 3 seconds
            if (type === 'success') {
                setTimeout(() => {
                    const successAlert = document.querySelector('.alert-success');
                    if (successAlert) {
                        successAlert.style.transition = 'opacity 0.5s';
                        successAlert.style.opacity = '0';
                        setTimeout(() => successAlert.remove(), 500);
                    }
                }, 3000);
            }
        }
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}