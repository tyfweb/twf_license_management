@using TechWayFit.Licensing.Core.Models
@using TechWayFit.Licensing.Management.Web.Helpers
@model TechWayFit.Licensing.Management.Web.ViewModels.License.LicenseDetailViewModel
@{
    ViewData["Title"] = "License Details";
    Layout = "~/Views/Shared/Layout/_LicenseHubLayout.cshtml";
}

@section Styles {
    <style>
        /* Style for download format selection */
        .d-flex.gap-2 {
            gap: 0.5rem !important;
        }
        
        .form-select {
            border: 1px solid #ced4da;
            border-radius: 0.375rem;
        }
        
        .form-select:focus {
            border-color: #86b7fe;
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
        
        /* Ensure proper button sizing */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
    </style>
}


<div class="container-fluid py-3 license-details-container">
    <!-- Header Section -->
    <div class="header mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <div class="d-flex align-items-center mb-2">
                    <a href="@Url.Action("Index", "License")" class="btn btn-outline-secondary me-3">
                        <i class="fas fa-arrow-left me-1"></i>Back to Licenses
                    </a>
                    <h2 class="mb-0">License Details</h2>
                </div>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a asp-controller="License" asp-action="Index">Licenses</a></li>
                        @{
                            var LicenseId = Model.License.LicenseId.ConvertToString();
                        }
                        <li class="breadcrumb-item active">@LicenseId.Substring(0, Math.Min(8, LicenseId.Length))...
                        </li>
                    </ol>
                </nav>
            </div>
            <div class="d-flex gap-1 flex-wrap">
                @if (Model.License.Status == LicenseStatus.Active)
                {
                    <div class="btn-group" role="group">
                        <a href="@Url.Action("Download", "License", new { id = Model.License.LicenseId })"
                            class="btn btn-info">
                            <i class="fas fa-download me-1"></i><span class="d-none d-md-inline">Download</span>
                        </a>
                        <button type="button" class="btn btn-info dropdown-toggle dropdown-toggle-split"
                            data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="visually-hidden">Toggle Dropdown</span>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item"
                                        href="@Url.Action("Download", "License", new { id = Model.License.LicenseId })">
                                        <i class="fas fa-file-alt me-2"></i>License File (.lic)
                                    </a></li>
                                <li><a class="dropdown-item"
                                        href="@Url.Action("DownloadJson", "License", new { id = Model.License.LicenseId })">
                                        <i class="fas fa-code me-2"></i>JSON Format (.json)
                                    </a></li>
                                <li><a class="dropdown-item"
                                        href="@Url.Action("DownloadXml", "License", new { id = Model.License.LicenseId })">
                                        <i class="fas fa-file-code me-2"></i>XML Format (.xml)
                                    </a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item"
                                        href="@Url.Action("DownloadZip", "License", new { id = Model.License.LicenseId })">
                                        <i class="fas fa-file-archive me-2"></i>Complete Package (.zip)
                                    </a></li>
                            </ul>
                    </div>
                }
                @if (Model.CanEdit)
                {
                    <button class="btn btn-outline-primary" onclick="editLicense()">
                        <i class="fas fa-edit me-1"></i><span class="d-none d-md-inline">Edit</span>
                    </button>
                }
                @if (Model.CanRenew)
                {
                    <button class="btn btn-success" onclick="renewLicense()">
                        <i class="fas fa-sync-alt me-1"></i><span class="d-none d-md-inline">Renew</span>
                    </button>
                }
                @if (Model.CanSuspend)
                {
                    <button class="btn btn-warning" onclick="suspendLicense()">
                        <i class="fas fa-pause me-1"></i><span class="d-none d-md-inline">Suspend</span>
                    </button>
                }
                @if (Model.CanReactivate)
                {
                    <button class="btn btn-info" onclick="reactivateLicense()">
                        <i class="fas fa-play me-1"></i><span class="d-none d-md-inline">Reactivate</span>
                    </button>
                }
                @if (Model.CanRevoke)
                {
                    <button class="btn btn-danger" onclick="revokeLicense()">
                        <i class="fas fa-ban me-1"></i><span class="d-none d-md-inline">Revoke</span>
                    </button>
                }
            </div>
        </div>
    </div>

    <!-- Status Overview Cards -->
    <div class="row g-2 mb-3">
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-key"></i>
                    </div>
                    <div class="stats-number text-monospace small">@Model.License.LicenseCode</div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">License ID</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            @{
                var statusCardClass = Model.License.Status switch
                {
                    TechWayFit.Licensing.Core.Models.LicenseStatus.Active => "stats-card-success",
                    TechWayFit.Licensing.Core.Models.LicenseStatus.Expired => "stats-card-danger",
                    TechWayFit.Licensing.Core.Models.LicenseStatus.Suspended => "stats-card-warning",
                    TechWayFit.Licensing.Core.Models.LicenseStatus.GracePeriod => "stats-card-warning",
                    _ => ""
                };
            }
            <div class="stats-card @statusCardClass">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-circle-check"></i>
                    </div>
                    <div class="stats-number">@Model.License.Status</div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Status</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            @{
                var daysUntilExpiry = (Model.License.ValidTo - DateTime.UtcNow).Days;
                var expiryCardClass = daysUntilExpiry <= 0 ? "stats-card-danger" :
                daysUntilExpiry <= 30 ? "stats-card-warning" : "stats-card-success";
            }
            <div class="stats-card @expiryCardClass">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-calendar-alt"></i>
                    </div>
                    <div class="stats-number">
                        @if (daysUntilExpiry <= 0)
                        {
                            <span>Expired</span>
                        }
                        else if (daysUntilExpiry <= 30)
                        {
                            <span>@daysUntilExpiry days</span>
                        }
                        else
                        {
                            <span>@daysUntilExpiry days</span>
                        }
                    </div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Expires In</div>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="stats-card">
                <div class="stats-row-1">
                    <div class="stats-icon">
                        <i class="fas fa-calendar-plus"></i>
                    </div>
                    <div class="stats-number small">@Model.License.CreatedAt.ToString("MMM dd, yyyy")</div>
                </div>
                <div class="stats-row-2">
                    <div class="stats-label">Created</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Tab Navigation -->
    <div class="row g-2">
        <div class="col-12">
            <ul class="nav nav-tabs" id="licenseDetailsTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="overview-tab" data-bs-toggle="tab" 
                            data-bs-target="#overview" type="button" role="tab" 
                            aria-controls="overview" aria-selected="true">
                        <i class="fas fa-info-circle me-2"></i>Overview
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="activations-tab" data-bs-toggle="tab" 
                            data-bs-target="#activations" type="button" role="tab" 
                            aria-controls="activations" aria-selected="false">
                        <i class="fas fa-devices me-2"></i>Activations
                        @if (Model.Activations?.Any() == true)
                        {
                            <span class="badge bg-primary ms-1">@Model.Activations.Count</span>
                        }
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <!-- Tab Content -->
    <div class="tab-content" id="licenseDetailsTabContent">
        <!-- Overview Tab -->
        <div class="tab-pane fade show active" id="overview" role="tabpanel" aria-labelledby="overview-tab">
    
    <!-- Main Content -->
    <div class="row g-2 mt-2">
        <!-- License Information -->
        <div class="col-lg-8">
            <div class="edit-section mb-3 license-info">
                <div class="section-header">
                    <h5><i class="fas fa-info-circle me-2"></i>License Information</h5>
                </div>
                <div class="section-content">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">License ID</label>
                                <div class="detail-value">
                                    <i class="fas fa-fingerprint me-2 text-muted"></i>
                                    <span class="text-monospace">@Model.License.LicenseId</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Status</label>
                                <div class="detail-value">
                                    <i class="fas fa-circle-check me-2 text-muted"></i>
                                    <span class="badge @(GetStatusBadgeClass(Model.License.Status))">
                                        @Model.License.Status
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Licensed To</label>
                                <div class="detail-value">
                                    <i class="fas fa-building me-2 text-muted"></i>
                                    <span>@Model.License.LicenseConsumer.Consumer.CompanyName</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Contact Email</label>
                                <div class="detail-value">
                                    <i class="fas fa-envelope me-2 text-muted"></i>
                                    <a href="mailto:@Model.License.LicenseConsumer.Consumer.PrimaryContact.Email"
                                        class="text-decoration-none">
                                        @Model.License.LicenseConsumer.Consumer.PrimaryContact.Email
                                    </a>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Valid From</label>
                                <div class="detail-value">
                                    <i class="fas fa-calendar-plus me-2 text-muted"></i>
                                    <span>@Model.License.ValidFrom.ToString("MMM dd, yyyy HH:mm")</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Valid To</label>
                                <div class="detail-value">
                                    <i class="fas fa-calendar-times me-2 text-muted"></i>
                                    <span>@Model.License.ValidTo.ToString("MMM dd, yyyy HH:mm")</span>
                                    @if (Model.License.ValidTo < DateTime.UtcNow)
                                    {
                                        <span class="badge bg-danger ms-2">Expired</span>
                                    }
                                    else if (Model.License.ValidTo <= DateTime.UtcNow.AddDays(30))
                                    {
                                        <span class="badge bg-warning ms-2">Expiring Soon</span>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Created</label>
                                <div class="detail-value">
                                    <i class="fas fa-clock me-2 text-muted"></i>
                                    <span>@Model.License.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="detail-group">
                                <label class="detail-label">Product Tiers</label>
                                <div class="detail-value">
                                    <i class="fas fa-layer-group me-2 text-muted"></i>
                                    @if (Model.Product != null && Model.Product.Tiers.Any())
                                    {
                                        @foreach (var tier in Model.Product.Tiers.Take(3))
                                        {
                                            var tierClass = tier.Name.ToLower() switch
                                            {
                                                "enterprise" => "bg-success",
                                                "professional" or "pro" => "bg-info",
                                                "community" or "basic" => "bg-secondary",
                                                _ => "bg-secondary"
                                            };
                                            <span class="badge @tierClass me-1">@tier.Name</span>
                                        }
                                        @if (Model.Product.Tiers.Count() > 3)
                                        {
                                            <span class="text-muted">+@(Model.Product.Tiers.Count() - 3) more</span>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">Standard License</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>



            @if (Model.License.LicenseConsumer.Features.Any())
            {
                <div class="edit-section mb-3">
                    <div class="section-header">
                        <h5><i class="fas fa-puzzle-piece me-2"></i>Licensed Features</h5>
                    </div>
                    <div class="section-content">
                        <div class="row g-2">
                            @foreach (var feature in Model.License.LicenseConsumer.Features)
                            {
                                <div class="col-sm-6 col-lg-4">
                                    <div class="feature-item">
                                        <i class="fas fa-check-circle text-success me-2"></i>
                                        <span>@feature.Name</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Product Information - Moved below License Information -->
            @if (Model.Product != null)
            {
                <div class="edit-section mb-3">
                    <div class="section-header">
                        <h5><i class="fas fa-box me-2"></i>Product Information</h5>
                    </div>
                    <div class="section-content">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="detail-group">
                                    <label class="detail-label">Name</label>
                                    <div class="detail-value">
                                        <i class="fas fa-tag me-2 text-muted"></i>
                                        <span>@Model.Product.Name</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="detail-group">
                                    <label class="detail-label">Version</label>
                                    <div class="detail-value">
                                        <i class="fas fa-code-branch me-2 text-muted"></i>
                                        <span>@Model.Product.Version</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="detail-group">
                                    <label class="detail-label">Description</label>
                                    <div class="detail-value">
                                        <span class="text-muted">@Model.Product.Description</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <a href="@Url.Action("Details", "Product", new { id = Model.Product.ProductId })"
                                    class="btn btn-outline-primary">
                                    <i class="fas fa-external-link-alt me-1"></i>View Product Details
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Consumer Information - Moved below Product Information -->
            @if (Model.Consumer != null)
            {
                <div class="edit-section mb-3">
                    <div class="section-header">
                        <h5><i class="fas fa-users me-2"></i>Consumer Information</h5>
                    </div>
                    <div class="section-content">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="detail-group">
                                    <label class="detail-label">Organization</label>
                                    <div class="detail-value">
                                        <i class="fas fa-building me-2 text-muted"></i>
                                        <span>@Model.Consumer.CompanyName</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="detail-group">
                                    <label class="detail-label">Contact</label>
                                    <div class="detail-value">
                                        <i class="fas fa-user me-2 text-muted"></i>
                                        <span>@Model.Consumer.PrimaryContact.Name</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="detail-group">
                                    <label class="detail-label">Email</label>
                                    <div class="detail-value">
                                        <i class="fas fa-envelope me-2 text-muted"></i>
                                        <a href="mailto:@Model.Consumer.PrimaryContact.Email" class="text-decoration-none">
                                            @Model.Consumer.PrimaryContact.Email
                                        </a>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <a href="@Url.Action("Details", "Consumer", new { id = Model.Consumer.ConsumerId })"
                                    class="btn btn-outline-primary">
                                    <i class="fas fa-external-link-alt me-1"></i>View Consumer Details
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div> <!-- Sidebar - Quick Actions moved here -->
        <div class="col-lg-4">
            <!-- Quick Actions -->
            <div class="sidebar-section mb-3">
                <div class="section-header">
                    <h6><i class="fas fa-bolt me-2"></i>Quick Actions</h6>
                </div>
                <div class="section-content">
                    <div class="d-grid gap-2">
                        @if (Model.License.Status == LicenseStatus.Active)
                        {
                            <!-- Download License Format Selection -->
                            <div class="d-flex gap-2 w-100">
                                <select class="form-select" id="downloadFormat" style="flex: 1;">
                                    <option value="lic">License File (.lic) - Human-readable</option>
                                    <option value="json">JSON Format (.json) - API integration</option>
                                    <option value="xml">XML Format (.xml) - Enterprise systems</option>
                                    <option value="zip">Complete Package (.zip) - All formats</option>
                                </select>
                                <button class="btn btn-primary" onclick="downloadSelectedFormat()" style="white-space: nowrap;">
                                    <i class="fas fa-download me-1"></i>Download
                                </button>
                            </div>
                        }
                        else
                        {
                            <!-- Disabled Download Button for inactive licenses -->
                            <button class="btn btn-outline-secondary" disabled>
                                <i class="fas fa-download me-2"></i>Download License
                                <small class="d-block">Available only for active licenses</small>
                            </button>
                        }
                        <button class="btn btn-outline-secondary" onclick="validateLicense()">
                            <i class="fas fa-check-circle me-2"></i>Validate License
                        </button>
                        <button class="btn btn-outline-secondary" onclick="viewAuditLog()">
                            <i class="fas fa-history me-2"></i>View Audit Log
                        </button>
                        <button class="btn btn-outline-secondary" onclick="generateReport()">
                            <i class="fas fa-chart-bar me-2"></i>Generate Report
                        </button>
                    </div>
                </div>
            </div>

            <!-- Recent License History -->
            @if (Model.Consumer != null)
            {
                <div class="sidebar-section">
                    <div class="section-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6><i class="fas fa-history me-2"></i>Recent License History</h6>
                            <a href="@Url.Action("Index", "License", new { consumerId = Model.Consumer.ConsumerId })"
                                class="btn btn-outline-primary btn-sm">
                                View All
                            </a>
                        </div>
                    </div>
                    <div class="section-content">
                        <p class="text-muted small mb-3">Latest licenses for @Model.Consumer.CompanyName</p>

                        <!-- Sample Recent Licenses - Replace with actual data when available -->
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead class="table-light">
                                    <tr>
                                        <th>License ID</th>
                                        <th>Product</th>
                                        <th>Status</th>
                                        <th>Valid To</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Current License -->
                                    <tr class="table-info">
                                        <td>
                                            @{
                                                var currentLicenseId = Model.License.LicenseId.ConvertToString();
                                            }
                                            <span class="text-monospace small fw-bold">@currentLicenseId.Substring(0,
                                                                                            Math.Min(8, currentLicenseId.Length))...</span>
                                        <br><small class="text-muted">Current</small>
                                    </td>
                                    <td>
                                        <span class="fw-medium">@(Model.Product?.Name ?? "Unknown")</span>
                                    </td>
                                    <td>
                                        <span class="badge @(GetStatusBadgeClass(Model.License.Status)) badge-sm">
                                            @Model.License.Status
                                        </span>
                                    </td>
                                    <td>
                                        <span class="small">@Model.License.ValidTo.ToString("MMM dd, yyyy")</span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <a href="@Url.Action("Details", "License", new { id = Model.License.LicenseId })"
                                                class="btn btn-outline-primary btn-sm" title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <button class="btn btn-outline-secondary btn-sm" onclick="downloadLicense()"
                                                title="Download">
                                                <i class="fas fa-download"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>

                                    <!-- Sample Previous Licenses - TODO: Replace with actual data -->
                                    <tr>
                                        <td>
                                            <span class="text-monospace small">LIC-FIT...</span>
                                            <br><small class="text-muted">Previous</small>
                                        </td>
                                        <td>
                                            <span>@(Model.Product?.Name ?? "TechWayFit Fitness Pro")</span>
                                        </td>
                                        <td>
                                            <span class="badge bg-secondary badge-sm">Expired</span>
                                        </td>
                                        <td>
                                            <span class="small">Jan 20, 2025</span>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <a href="@Url.Action("Details", "License", new { id = "LIC-FITLIFE-FP-001" })"
                                                    class="btn btn-outline-primary btn-sm" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <button class="btn btn-outline-secondary btn-sm"
                                                    onclick="alert('Download previous license')" title="Download">
                                                    <i class="fas fa-download"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                        }
        </div>
    </div>
        </div> <!-- End Overview Tab -->
        
        <!-- Activations Tab -->
        <div class="tab-pane fade" id="activations" role="tabpanel" aria-labelledby="activations-tab">
            <div class="row g-2 mt-2">
                <div class="col-12">
                    <div class="edit-section mb-3">
                        <div class="section-header d-flex justify-content-between align-items-center">
                            <h5><i class="fas fa-devices me-2"></i>License Activations</h5>
                            <div class="d-flex gap-2">
                                @if (Model.Activations?.Any() == true)
                                {
                                    <button class="btn btn-sm btn-outline-success" onclick="downloadActivationsCSV()">
                                        <i class="fas fa-download me-1"></i>Download CSV
                                    </button>
                                }
                                <button class="btn btn-sm btn-outline-primary" onclick="refreshActivations()">
                                    <i class="fas fa-sync-alt me-1"></i>Refresh
                                </button>
                            </div>
                        </div>
                        <div class="section-content">
                            @if (Model.Activations?.Any() == true)
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th><i class="fas fa-desktop me-1"></i>Device</th>
                                                <th><i class="fas fa-laptop me-1"></i>Type</th>
                                                <th><i class="fas fa-desktop me-1"></i>OS</th>
                                                <th><i class="fas fa-calendar-plus me-1"></i>Activated</th>
                                                <th><i class="fas fa-clock me-1"></i>Last Activity</th>
                                                <th><i class="fas fa-globe me-1"></i>IP Address</th>
                                                <th><i class="fas fa-circle me-1"></i>Status</th>
                                                <th class="text-center">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var activation in Model.Activations)
                                            {
                                                <tr>
                                                    <td>
                                                        <div>
                                                            <strong class="text-truncate" style="max-width: 150px; display: inline-block;" 
                                                                    title="@activation.DeviceName">
                                                                @activation.DeviceName
                                                            </strong>
                                                            <small class="d-block text-muted text-truncate" 
                                                                   style="max-width: 150px;" title="@activation.DeviceId">
                                                                ID: @activation.DeviceId
                                                            </small>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-secondary">
                                                            @(string.IsNullOrEmpty(activation.DeviceType) ? "Unknown" : activation.DeviceType)
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <span class="text-muted">
                                                            @(string.IsNullOrEmpty(activation.OperatingSystem) ? "Unknown" : activation.OperatingSystem)
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <span class="text-muted" title="@activation.ActivatedAt.ToString("f")">
                                                            @activation.ActivatedAt.ToString("MMM dd, yyyy")
                                                        </span>
                                                        <small class="d-block text-muted">
                                                            @activation.ActivatedAt.ToString("HH:mm")
                                                        </small>
                                                    </td>
                                                    <td>
                                                        <span class="text-muted" title="@activation.LastActivity.ToString("f")">
                                                            @activation.LastActivity.ToString("MMM dd, yyyy")
                                                        </span>
                                                        <small class="d-block text-muted">
                                                            @activation.LastActivity.ToString("HH:mm")
                                                        </small>
                                                    </td>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(activation.IpAddress))
                                                        {
                                                            <span class="text-monospace small">@activation.IpAddress</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">Unknown</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (activation.IsActive)
                                                        {
                                                            <span class="badge bg-success">
                                                                <i class="fas fa-check-circle me-1"></i>Active
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary">
                                                                <i class="fas fa-times-circle me-1"></i>Inactive
                                                            </span>
                                                        }
                                                    </td>
                                                    <td class="text-center">
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <button class="btn btn-outline-info" 
                                                                    onclick="viewDeviceInfo('@activation.DeviceId')" 
                                                                    title="View Device Details">
                                                                <i class="fas fa-info-circle"></i>
                                                            </button>
                                                            @if (activation.IsActive)
                                                            {
                                                                <button class="btn btn-outline-warning" 
                                                                        onclick="deactivateDevice('@activation.DeviceId', '@activation.DeviceName')" 
                                                                        title="Deactivate Device">
                                                                    <i class="fas fa-power-off"></i>
                                                                </button>
                                                            }
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                
                                <!-- Activation Summary -->
                                <div class="row mt-3">
                                    <div class="col-md-4">
                                        <div class="card bg-light">
                                            <div class="card-body text-center">
                                                <h5 class="card-title mb-1">@Model.Activations.Count</h5>
                                                <p class="card-text text-muted mb-0">Total Activations</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="card bg-light">
                                            <div class="card-body text-center">
                                                <h5 class="card-title mb-1">@Model.Activations.Count(a => a.IsActive)</h5>
                                                <p class="card-text text-muted mb-0">Active Devices</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="card bg-light">
                                            <div class="card-body text-center">
                                                @{
                                                    var lastActivity = Model.Activations.Any() ? Model.Activations.Max(a => a.LastActivity) : DateTime.MinValue;
                                                }
                                                <h5 class="card-title mb-1">
                                                    @if (lastActivity != DateTime.MinValue)
                                                    {
                                                        @lastActivity.ToString("MMM dd")
                                                    }
                                                    else
                                                    {
                                                        <span>Never</span>
                                                    }
                                                </h5>
                                                <p class="card-text text-muted mb-0">Last Activity</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5">
                                    <i class="fas fa-devices fa-3x text-muted mb-3"></i>
                                    <h5 class="text-muted">No Activations Found</h5>
                                    <p class="text-muted">This license has not been activated on any devices yet.</p>
                                    @if (Model.License.Status == LicenseStatus.Active)
                                    {
                                        <p class="text-muted small">
                                            Users can activate this license using the license key: 
                                            <code class="bg-light px-2 py-1 rounded">@Model.License.LicenseCode</code>
                                        </p>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div> <!-- End Activations Tab -->
    </div> <!-- End Tab Content -->
</div>

@functions {
    string GetStatusBadgeClass(TechWayFit.Licensing.Core.Models.LicenseStatus status)
    {
        return status switch
        {
            TechWayFit.Licensing.Core.Models.LicenseStatus.Active => "bg-success",
            TechWayFit.Licensing.Core.Models.LicenseStatus.Expired => "bg-danger",
            TechWayFit.Licensing.Core.Models.LicenseStatus.Suspended => "bg-warning",
            TechWayFit.Licensing.Core.Models.LicenseStatus.Revoked => "bg-dark",
            TechWayFit.Licensing.Core.Models.LicenseStatus.Pending => "bg-info",
            TechWayFit.Licensing.Core.Models.LicenseStatus.GracePeriod => "bg-warning",
            _ => "bg-secondary"
        };
    }
}

@section Scripts {
    <script>
        function editLicense() {
            // TODO: Implement edit functionality
            alert('Edit functionality will be implemented in a future update.');
        }

        function renewLicense() {
            if (confirm('Are you sure you want to renew this license?')) {
                // Show custom modal for renewal details
                showRenewalDialog();
            }
        }

        function suspendLicense() {
            if (confirm('Are you sure you want to suspend this license?')) {
                // Show custom modal for suspension reason
                showSuspensionDialog();
            }
        }

        function reactivateLicense() {
            if (confirm('Are you sure you want to reactivate this license?')) {
                // Prompt for optional reason
                const reason = prompt('Enter reason for reactivation (optional):');
                performLicenseAction('reactivate', { reason: reason || 'License reactivated' });
            }
        }

        function revokeLicense() {
            if (confirm('Are you sure you want to revoke this license? This action cannot be undone.')) {
                // Show custom modal for revocation reason
                showRevocationDialog();
            }
        }

        function showRenewalDialog() {
            const durationDays = prompt('Enter renewal duration in days (1-3650):', '365');
            if (durationDays && !isNaN(durationDays) && durationDays > 0 && durationDays <= 3650) {
                const reason = prompt('Enter reason for renewal (optional):');
                performLicenseAction('renew', { 
                    renewalDurationDays: parseInt(durationDays),
                    reason: reason || 'License renewed via web interface'
                });
            } else if (durationDays !== null) {
                alert('Please enter a valid number of days between 1 and 3650.');
            }
        }

        function showSuspensionDialog() {
            const reason = prompt('Enter reason for suspension (required):');
            if (reason && reason.trim()) {
                performLicenseAction('suspend', { reason: reason.trim() });
            } else if (reason !== null) {
                alert('Reason is required for license suspension.');
            }
        }

        function showRevocationDialog() {
            const reason = prompt('Enter reason for revocation (required):');
            if (reason && reason.trim()) {
                performLicenseAction('revoke', { reason: reason.trim() });
            } else if (reason !== null) {
                alert('Reason is required for license revocation.');
            }
        }

        function performLicenseAction(action, data) {
            const licenseId = '@Model.License.Id';
            const apiUrl = `/api/license/${licenseId}/${action}`;
            
            // Show loading indicator
            showLoadingState(action);
            
            fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                hideLoadingState();
                
                if (result.success) {
                    // Show success message
                    showNotification(result.data?.message || `License ${action} completed successfully`, 'success');
                    
                    // Handle specific responses
                    if (action === 'renew' && result.data?.newExpirationDate) {
                        updateExpirationDate(result.data.newExpirationDate);
                    }
                    if (action === 'regenerate-key' && result.data?.newLicenseKey) {
                        updateLicenseKey(result.data.newLicenseKey);
                    }
                    
                    // Refresh page after successful operation
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    showNotification(result.message || `Failed to ${action} license`, 'error');
                }
            })
            .catch(error => {
                hideLoadingState();
                console.error('License operation error:', error);
                showNotification(`An error occurred while performing ${action} operation`, 'error');
            });
        }

        function showLoadingState(action) {
            // Disable all action buttons and show loading
            $('.license-action-btn').prop('disabled', true);
            $('.license-action-btn').each(function() {
                $(this).data('original-text', $(this).text());
                if ($(this).text().toLowerCase().includes(action)) {
                    $(this).html('<i class="fas fa-spinner fa-spin"></i> Processing...');
                }
            });
        }

        function hideLoadingState() {
            // Re-enable buttons and restore text
            $('.license-action-btn').prop('disabled', false);
            $('.license-action-btn').each(function() {
                const originalText = $(this).data('original-text');
                if (originalText) {
                    $(this).text(originalText);
                }
            });
        }

        function showNotification(message, type) {
            // Create notification element
            const notification = $(`
                <div class="alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);
            
            // Add to top of content area
            $('.card-body').first().prepend(notification);
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                notification.fadeOut();
            }, 5000);
        }

        function updateExpirationDate(newDate) {
            // Update expiration date display
            const formattedDate = new Date(newDate).toLocaleDateString();
            $('.expiration-date').text(formattedDate);
        }

        function updateLicenseKey(newKey) {
            // Update license key display
            $('.license-key').text(newKey);
        }

        function downloadLicense() {
            const licenseId = '@Model.License.Id';
            const downloadUrl = `/api/license/${licenseId}/download`;
            
            // Create a temporary anchor element to trigger download
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.download = `license_${licenseId}.lic`;
            
            // Add to DOM, click, and remove
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Show notification
            showNotification('License file download started', 'success');
        }

        function regenerateLicenseKey() {
            if (confirm('Are you sure you want to regenerate the license key? This will invalidate the current key and cannot be undone.')) {
                const reason = prompt('Enter reason for regenerating the license key (required):');
                if (reason && reason.trim()) {
                    performLicenseAction('regenerate-key', { reason: reason.trim() });
                } else if (reason !== null) {
                    alert('Reason is required for license key regeneration.');
                }
            }
        }

        function validateLicense() {
            // TODO: Implement validation functionality
            alert('Validation functionality will be implemented in a future update.');
        }

        function viewAuditLog() {
            // TODO: Implement audit log functionality
            alert('Audit log functionality will be implemented in a future update.');
        }

        function generateReport() {
            // TODO: Implement report generation functionality
            alert('Report generation functionality will be implemented in a future update.');
        }

        function downloadSelectedFormat() {
            var formatSelect = document.getElementById('downloadFormat');
            var selectedFormat = formatSelect.value;
            var licenseId = '@Model.License.LicenseId';
            
            // Use the unified Download action with format parameter
            var downloadUrl = '@Url.Action("Download", "License")' + '?id=' + licenseId + '&format=' + selectedFormat;
            
            // Create a temporary anchor element to trigger download
            var link = document.createElement('a');
            link.href = downloadUrl;
            link.download = '';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // Activation management functions
        function refreshActivations() {
            // Refresh the current page to reload activation data
            location.reload();
        }

        function downloadActivationsCSV() {
            @if (Model.Activations?.Any() == true)
            {
                <text>
            // Prepare CSV data with proper headers
            var activations = @Html.Raw(Json.Serialize(Model.Activations));
            var csvContent = "Device Name,Device ID,Device Type,Operating System,Activated Date,Last Activity Date,IP Address,Status\n";
            
            activations.forEach(function(activation) {
                // Format dates properly for CSV
                var activatedDate = new Date(activation.activatedAt).toLocaleDateString() + " " + new Date(activation.activatedAt).toLocaleTimeString();
                var lastActivity = new Date(activation.lastActivity).toLocaleDateString() + " " + new Date(activation.lastActivity).toLocaleTimeString();
                var status = activation.isActive ? 'Active' : 'Inactive';
                
                // Clean and escape CSV values
                var deviceName = (activation.deviceName || 'Unknown').replace(/"/g, '""');
                var deviceId = (activation.deviceId || '').replace(/"/g, '""');
                var deviceType = (activation.deviceType || 'Unknown').replace(/"/g, '""');
                var operatingSystem = (activation.operatingSystem || 'Unknown').replace(/"/g, '""');
                var ipAddress = (activation.ipAddress || 'Unknown').replace(/"/g, '""');
                
                // Build CSV row - only quote fields that contain commas, quotes, or newlines
                var row = [
                    deviceName.includes(',') || deviceName.includes('"') || deviceName.includes('\n') ? '"' + deviceName + '"' : deviceName,
                    deviceId.includes(',') || deviceId.includes('"') || deviceId.includes('\n') ? '"' + deviceId + '"' : deviceId,
                    deviceType.includes(',') || deviceType.includes('"') || deviceType.includes('\n') ? '"' + deviceType + '"' : deviceType,
                    operatingSystem.includes(',') || operatingSystem.includes('"') || operatingSystem.includes('\n') ? '"' + operatingSystem + '"' : operatingSystem,
                    activatedDate.includes(',') ? '"' + activatedDate + '"' : activatedDate,
                    lastActivity.includes(',') ? '"' + lastActivity + '"' : lastActivity,
                    ipAddress.includes(',') || ipAddress.includes('"') || ipAddress.includes('\n') ? '"' + ipAddress + '"' : ipAddress,
                    status
                ];
                
                csvContent += row.join(',') + '\n';
            });
            
            // Create and download CSV file with proper filename
            var licenseCode = '@Model.License.LicenseCode';
            var currentDate = new Date().toISOString().slice(0, 10).replace(/-/g, '');
            var filename = 'license_activations_' + licenseCode + '_' + currentDate + '.csv';
            
            var blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            var link = document.createElement("a");
            var url = URL.createObjectURL(blob);
            link.setAttribute("href", url);
            link.setAttribute("download", filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
            
            showNotification('Activations CSV file downloaded successfully', 'success');
                </text>
            }
            else
            {
                <text>
            showNotification('No activation data available to download', 'warning');
                </text>
            }
        }

        function viewDeviceInfo(deviceId) {
            // Find the activation data for this device from the rendered model
            @if (Model.Activations?.Any() == true)
            {
                <text>
            var activations = @Html.Raw(Json.Serialize(Model.Activations));
            var device = activations.find(a => a.deviceId === deviceId);
            
            if (device) {
                var deviceInfo = device.deviceInfo || {};
                var infoHtml = `
                    <div class="device-info">
                        <h6><i class="fas fa-desktop me-2"></i>${device.deviceName}</h6>
                        <div class="row g-2">
                            <div class="col-md-6">
                                <strong>Device ID:</strong><br>
                                <code class="small">${device.deviceId}</code>
                            </div>
                            <div class="col-md-6">
                                <strong>Device Type:</strong><br>
                                ${device.deviceType || 'Unknown'}
                            </div>
                            <div class="col-md-6">
                                <strong>Operating System:</strong><br>
                                ${device.operatingSystem || 'Unknown'}
                            </div>
                            <div class="col-md-6">
                                <strong>IP Address:</strong><br>
                                ${device.ipAddress || 'Unknown'}
                            </div>
                            <div class="col-md-6">
                                <strong>Activated:</strong><br>
                                ${new Date(device.activatedAt).toLocaleString()}
                            </div>
                            <div class="col-md-6">
                                <strong>Last Activity:</strong><br>
                                ${new Date(device.lastActivity).toLocaleString()}
                            </div>
                            <div class="col-12">
                                <strong>Status:</strong><br>
                                <span class="badge bg-${device.isActive ? 'success' : 'secondary'}">
                                    ${device.isActive ? 'Active' : 'Inactive'}
                                </span>
                            </div>
                        </div>
                    </div>
                `;
                
                // Show device info in a modal or alert
                showDeviceInfoModal(infoHtml);
            }
                </text>
            }
            else
            {
                <text>
            alert('No activation data available.');
                </text>
            }
        }

        function showDeviceInfoModal(content) {
            // Create a simple modal for device info
            var modal = document.createElement('div');
            modal.innerHTML = `
                <div class="modal fade" id="deviceInfoModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Device Information</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                ${content}
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            var bootstrapModal = new bootstrap.Modal(document.getElementById('deviceInfoModal'));
            bootstrapModal.show();
            
            // Clean up modal after hiding
            document.getElementById('deviceInfoModal').addEventListener('hidden.bs.modal', function() {
                document.body.removeChild(modal);
            });
        }

        function deactivateDevice(deviceId, deviceName) {
            if (confirm(`Are you sure you want to deactivate device "${deviceName}"? This will prevent the device from using this license.`)) {
                var reason = prompt('Enter reason for deactivation (optional):');
                
                var licenseId = '@Model.License.LicenseId';
                var deactivateUrl = `/api/activation/deactivate`;
                
                fetch(deactivateUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                        licenseId: licenseId,
                        deviceId: deviceId,
                        reason: reason || 'Device deactivated via web interface'
                    })
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        showNotification(`Device "${deviceName}" has been deactivated successfully`, 'success');
                        // Refresh the activations tab
                        setTimeout(() => {
                            location.reload();
                        }, 2000);
                    } else {
                        showNotification(result.message || 'Failed to deactivate device', 'error');
                    }
                })
                .catch(error => {
                    console.error('Deactivation error:', error);
                    showNotification('An error occurred while deactivating the device', 'error');
                });
            }
        }

        // Ensure Bootstrap dropdown is properly initialized
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize all dropdowns
            var dropdownElements = document.querySelectorAll('[data-bs-toggle="dropdown"]');
            dropdownElements.forEach(function(element) {
                new bootstrap.Dropdown(element);
            });

            // Manual click handler as backup
            var downloadButton = document.getElementById('downloadDropdown');
            if (downloadButton) {
                downloadButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    var dropdownMenu = this.nextElementSibling;
                    if (dropdownMenu && dropdownMenu.classList.contains('dropdown-menu')) {
                        if (dropdownMenu.style.display === 'block') {
                            dropdownMenu.style.display = 'none';
                            dropdownMenu.classList.remove('show');
                            this.setAttribute('aria-expanded', 'false');
                        } else {
                            dropdownMenu.style.display = 'block';
                            dropdownMenu.classList.add('show');
                            this.setAttribute('aria-expanded', 'true');
                        }
                    }
                });
            }

            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                var downloadButton = document.getElementById('downloadDropdown');
                if (downloadButton && !downloadButton.contains(e.target)) {
                    var dropdownMenu = downloadButton.nextElementSibling;
                    if (dropdownMenu && dropdownMenu.classList.contains('dropdown-menu')) {
                        dropdownMenu.style.display = 'none';
                        dropdownMenu.classList.remove('show');
                        downloadButton.setAttribute('aria-expanded', 'false');
                    }
                }
            });
        });
    </script>
}
